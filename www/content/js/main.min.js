(function () {

    'use strict';
    agGrid.initialiseAgGridWithAngular1(angular);
    angular.module('foneClub', [

        /* public modules */
        'ionic',
        'firebase',
        'ngCordova',
        'ngMask',
        'LocalStorageModule',
        'ui.bootstrap',
        'ngDialog',
        'ui.router',
        'ui.toggle',
        'autoCompleteModule',
        'smart-table'
        ,'g1b.datetime-inputs'
        ,'ngclipboard'
        ,'ngAnimate'
        ,'vAccordion'
      , 'ngTable'
      , 'kendo.directives'
      ,'agGrid'
    ]);

    angular.module('foneClub').controller('globalCtrl', globalCtrl);

    globalCtrl.$inject = ['$interval', 'DataFactory', 'FoneclubeService', '$location'];

    function globalCtrl($interval, DataFactory, FoneclubeService, $location) {
        var vm = this;
        vm.data = DataFactory;

        function init() {
            // FoneclubeService.getCustomers().then(function (result) {
            //     vm.data.customers = result.map(function (user) {
            //         user.Phones = user.Phones.map(function (phone) {
            //             phone.phoneFull = phone.DDD.concat(phone.Number);
            //             return phone;
            //         })
            //         return user;
            //     })
            //     console.log('getCustomers')
            //     console.log(result)
            //     //post realizado com sucesso
            // })
            //     .catch(function (error) {
            //         console.log('catch error');
            //         console.log(error);
            //         console.log(error.statusText); // mensagem de erro para tela, caso precise
            //     });
        }

        init();

        $interval(function () {
            FoneclubeService.getCustomers().then(function (result) {
                vm.data.customersCache = result.map(function (user) {
                    user.Phones = user.Phones.map(function (phone) {
                        phone.phoneFull = phone.DDD.concat(phone.Number);
                        return phone;
                    })
                    return user;
                })
                if ($location.$$path !== '/tab/customers') {
                    vm.data.customers = angular.copy(vm.data.customersCache);
                }
                console.log('getCustomers')
                console.log(result)
                //post realizado com sucesso
            })
                .catch(function (error) {
                    console.log('catch error');
                    console.log(error);
                    console.log(error.statusText); // mensagem de erro para tela, caso precise
                });
        }, 300000);
    }

})();






(function () {

  'use strict';

  angular.module('foneClub')
    .config(masterConfiguration);

  function masterConfiguration($urlRouterProvider,$ionicConfigProvider,$provide, $stateProvider, $locationProvider){

      configRouteProvider($ionicConfigProvider, $locationProvider)

      var rota = window.location.href;
      // debugger

      $stateProvider.state('master', {
        url: '/',
        templateUrl: 'modules/login/login.html',
        controller: 'LoginController as vm'
      })
      .state('login', {
        url: '/login',
        templateUrl: 'modules/login/login.html',
        controller: 'LoginController as vm'
      })
      .state('tabs', {
        url: "/tab",
        abstract: true,
        templateUrl: "modules/menu-tabs/menu-tabs.html",
        controller:"MenuController as vm"
      })
      .state('tabs.checkout-view', {
        url: "/checkout-view",
        views: {
          'menu-tab': {
            templateUrl: "modules/checkout/checkout.html",
            controller: 'CheckoutController as vm'
          }
        }
      })
      .state('tabs.home', {
        url: "/home",
        views: {
          'menu-tab': {
            templateUrl: "modules/home/home.html",
            controller: 'HomeController as vm'
          }
        }
      })
      .state('tabs.cadastro', {
        url: "/cadastro",
        views: {
          'menu-tab': {
            templateUrl: "modules/cadastro/cadastro.html",
            controller: 'CadastroController as vm'
          }
        }
      })
      .state('tabs.list-customer', {
        url: "/list-customer",
        views: {
          'menu-tab': {
            templateUrl: "modules/lista-customer/lista-customer.html",
            controller: 'CustomerListController as vm'
          }
        }
      })
      .state('tabs.customers', {
        cache: false,
        url: "/customers",
        params : {previous: rota},
        views: {
          'menu-tab': {
            templateUrl: "modules/customers/customers.html",
            controller: 'CustomersController as vm'
          }
        }
      })
      .state('tabs.status-charging', {
        url: "/status-charging",
        views: {
          'menu-tab': {
            templateUrl: "modules/status-charging/status-charging.html",
            controller: 'StatusChargingController as vm' 
          }
        }
      })
      .state('tabs.customers-new', {
        url: "/customers-new",
        views: {
          'menu-tab': {
            templateUrl: "modules/customers/new/customers-new.html",
            controller: 'CustomersControllerNew as vm'
          }
        }
      })
      .state('tabs.edicao', {
        url: "/edicao", 
        views: {      
          'menu-tab': {
            templateUrl: "modules/customers/edicao/edicao.html",
            controller: 'EdicaoController as vm'
          }
        },
        params: {data: null}
      })
      .state('tabs.ordemservico', {
        url: "/ordemservico",       
        templateUrl: "modules/customers/ordem-servico/ordemservico.html",
        controller: 'OrdemServico as vm',
        params: { data: null }      
      })
      .state('tabs.mass-charging', {
        url: "/mass-charging",
        views: {
          'menu-tab': {
            templateUrl: "modules/mass-charging/mass-charging.html",
            controller: 'MassChargingController as vm'
          }
        }
      })
      .state('tabs.allphone-lines',{
        url: "/allphone-lines",
        views: {
          'menu-tab': {
            templateUrl: "modules/allphonelines/allphonelines.html",
            controller: 'AllPhoneLinesController as vm'
          }
        }
      })
      .state('tabs.template-edit', {
        url: "/template-edit",
        views: {
          'menu-tab': {
            templateUrl: 'modules/template-edit/template-edit.html',
            controller: 'TemplateEditController as vm'
          }
        }
      })
      .state('tabs.all-phones', {
        url: "/allPhones",
        views: {
          'menu-tab': {
            templateUrl: 'modules/all-phones/all-phones.html',
            controller: 'AllPhonesController as vm'
          }
        }
        })
        .state('tabs.estoque', {
          url: "/estoque",
          views: {
            'menu-tab': {
              templateUrl: 'modules/estoque/estoque.html',
              controller: 'EstoqueController as vm'
            }
          }
        })
        .state('tabs.plan-edition', {
          url: "/plan-edition",
          views: {
            'menu-tab': {
              templateUrl: 'modules/plan-edition/plan-edition.html',
              controller: 'PlanEditionController as vm'
            }
          }
        })
        .state('tabs.report-comissions', {
          url: "/report-comissions",
          views: {
            'menu-tab': {
              templateUrl: 'modules/report-comissions/report-comissions.html',
              controller: 'ReportComissionController as vm'
            }
          }
        })
        .state('tabs.all-phones-new', {
          url: "/allPhoneNew",
          views: {
            'menu-tab': {
              templateUrl: 'modules/all-phones-new/all-phones-new.html',
              controller: 'AllPhoneNewController as vm'
            }
          }
        })
      // .state('tabs.estoque', {
      //   url: "/estoque",
      //   views: {
      //     'menu-tab': {
      //       templateUrl: 'modules/estoque/estoque.html',
      //       controller: 'EstoqueController as vm'
      //     }
      //   }
      // })

      
      $urlRouterProvider.otherwise('/');
      configErrorHandler($provide);
  }

  function configRouteProvider($ionicConfigProvider, $locationProvider){
      $ionicConfigProvider.views.maxCache(0);
      $ionicConfigProvider.tabs.position('bottom');

      // $locationProvider.html5Mode(true).hashPrefix('!');

      // $locationProvider.html5Mode({
      //   enabled: true,
      //   requireBase: false
      // });
  }

  function configErrorHandler($provide){
    $provide.decorator("$exceptionHandler", function($delegate) {
        return function(exception, cause) {
          $delegate(exception, cause);
          //alert(exception.name + ' - ' + exception.message);
        };
      });
  }


})();

(function () {
  'use strict';

  angular.module('foneClub')
    .run(function($ionicPlatform) {
        $ionicPlatform.ready(function() {
            if(window.cordova && window.cordova.plugins && window.cordova.plugins.Keyboard) {
            // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
            // for form inputs)
            cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);

            // Don't remove this line unless you know what you are doing. It stops the viewport
            // from snapping when text inputs are focused. Ionic handles this internally for
            // a much nicer keyboard experience.
            cordova.plugins.Keyboard.disableScroll(true);
            }
            if(window.StatusBar) {
            StatusBar.styleDefault();
            }
        });
        })

})();
(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('AllPhonesController', AllPhonesController);
    
      AllPhonesController.inject = ['FlowManagerService', 'FoneclubeService', 'PagarmeService', 'NgTableParams', '$scope'];
      function AllPhonesController(FlowManagerService, FoneclubeService, PagarmeService, NgTableParams, $scope) {
            
        var vm = this;
        vm.planOptions;
        vm.result;
        vm.filtroCliente = false;

        vm.changeFilterCliente = changeFilterCliente;
        vm.onClickDesassociar = onClickDesassociar; 
        vm.changeSelectPlan = changeSelectPlan;
        vm.onClickTrocaPlano = onClickTrocaPlano;

        FoneclubeService.getAllPhonesStatus().then(function(result){

            FoneclubeService.getPlanOptios().then(function(result){

                vm.planOptions = result;
                // vm.planOptions.forEach(plan => {
                //     console.log(plan)
                // });

            FoneclubeService.getStatusTelefonesOperadora().then(function (result) {

                

                for(var i in vm.result)
                {
                    var telefone = vm.result[i].linhaLivreOperadora;
                    vm.result[i].usoLinha = "Sem dados na SP";
                    vm.result[i].plano = "Sem dados na SP";
                    vm.result[i].divergente = -1;

                    for(var r in result){
                        if(telefone == result[r].phone){

                            var operadora; 
                            if(result[r].operadora == 1)
                            {
                                operadora = 'CLARO'
                            } 
                            else if(result[r].operadora == 2)
                            {
                                operadora = 'VIVO'
                            }

                            vm.result[i].plano = operadora + " " + result[r].plano;
                            vm.result[i].usoLinha = result[r].usoLinha ? "Sim" : "Não";

                            // console.log('telefone')
                            // console.log(vm.result[i])
                            
                            // var phoneLine = vm.result[i];
                            // var planoFoneclube = phoneLine.txtPlanoFoneclube;
                            // var planoOperadora = phoneLine.plano;                            
                        }
                    }
                }

                // console.log('tentando getStatusDivergencia')
                FoneclubeService.getStatusDivergencia().then(function (result) {
                    
                    // console.log('getStatusDivergencia')
                    for(var l in vm.result){
                        
                        // debugger;
                        vm.result[l].divergente = 'Não';
                        for(var i in result){
                            if(vm.result[l].linhaLivreOperadora == result[i].phone){
                                
                                if((result[i].bitOperatorDivergent || result[i].bitPlanDivergent)) {
                                    vm.result[l].divergente = 'Sim';
                                    vm.result[l].operatorDivergent = result[i].bitOperatorDivergent
                                    vm.result[l].planDivergent = result[i].bitOperatorDivergent
                                }
                            }
                        }

                        if(vm.result[l].plano == 'Sem dados na SP' || vm.result[l].plano == 'VIVO Sem Plano deinido na SP'){
                            vm.result[l].divergente = 'Sem dados na SP';  
                        }
                    }

                })
                
                vm.result
                
            })

        })
            

            for(var i in result){
                result[i].desativada = false;

                if(result[i].operadora == 1)
                    result[i].operadoraDescription = 'CLARO'
                else
                    result[i].operadoraDescription = 'VIVO'

                if(result[i].idPhone == null)
                    result[i].PhoneText = 'Não'
                else
                    result[i].PhoneText = 'Sim'

            }

            vm.result = result

            vm.initialParams = {
                filter: { desativada: false },
                count: 1000 // initial page size
              };
            vm.initialSettings = {
            // page size buttons (right set of buttons in demo)
            counts: [50,100,500, 1000],
            // determines the pager buttons (left set of buttons in demo)
            paginationMaxBlocks: 10,
            paginationMinBlocks: 1,
             
            dataset: vm.result
            
            };

            vm.tableParams = new NgTableParams(vm.initialParams, vm.initialSettings)
            
        })

        $scope.$watch("vm.tableParams", function () {            
            // console.log('Works')
        });

        function changeFilterCliente(){
            // console.log('changeFilterCliente')
            vm.filtroCliente = !vm.filtroCliente;

            // remonta lista e atualiza componente

            //filtra direto na tabela
        }

        function onClickDesassociar(linha){
            
            var confirmation = confirm("Deseja desativar essa linha?");
            if (confirmation) {
                FoneclubeService.postDesassociarLinha(linha.idPhone).then(function(result){
                    if(result){
                        alert('Telefone desativado com sucesso')

                        linha.idPhone = null;
                        linha.txtName = ''
                        linha.txtNickname = ''
                        linha.intIdPerson = ''
                        linha.txtPlanoFoneclube = ''
                        linha.PhoneText = 'Não'
                        
                        // caso seja pra limpar
                        // linha.desativada = true;
                        // vm.tableParams.reload();
                    }
                    else{
                        alert('Não foi possível desativar essa linha do cliente')
                    }
                })
                .catch(function (error) {
                    alert('Não foi possível desativar essa linha do cliente')
                });
            }  
        }

        function changeSelectPlan(linha){
            // console.log('changeSelectPlan')
            
            var confirmation = confirm("Deseja trocar o plano da linha " + linha.linhaLivreOperadora + " para, " +  linha.selectedPlan.Description + ' ?');
            if (confirmation) {
                FoneclubeService.postUpdatePhonePlan({Id:linha.idPhone, IdPlanOption:linha.selectedPlan.Id}).then(function(result){
                    if(result)
                    {
                        alert('Plano alterado com sucesso')
                        linha.txtPlanoFoneclube = linha.selectedPlan.Description;
                        linha.editPlan = false; 
                        linha.divergente = 'Pendente Refresh';
                        FoneclubeService.getStatusDivergencia().then(function (result) {
                            
                            for(var i in result){
                                if(result[i].phone == linha.linhaLivreOperadora){
                                    // debugger;
                                    if(result[i].bitOperatorDivergent || result[i].bitPlanDivergent) {
                                        linha.divergente = 'Sim';
                                        linha.operatorDivergent = result[i].bitOperatorDivergent
                                        linha.planDivergent = result[i].bitOperatorDivergent
                                    }
                                    else{
                                        linha.divergente = 'Não';
                                        linha.operatorDivergent = result[i].bitOperatorDivergent
                                        linha.planDivergent = result[i].bitOperatorDivergent
                                    }
                                }
                            }
                        })
                    }
                    else{
                        alert('Não foi possível alterar o plano dessa linha')
                        linha.editPlan = false; 
                    }
                    
                })
                
            }
            else{
                linha.editPlan = false; 
            }
        }

        function onClickTrocaPlano(linha){
            // console.log("onClickTrocaPlano")
            // debugger
            if(linha.txtPlanoFoneclube == null)
            {
                alert('Essa linha não tem cliente associado por isso não é possível trocar plano foneclube')
            }
            else
                linha.editPlan = true;
        }

        $scope.$watch("vm.searchUser", function () {
            try{
                var search = vm.searchUser.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~]/g, '');
                var isnum = /^\d+$/.test(search.replace(' ', ''));
                
                if(isnum)
                    vm.searchIgnoreAccent = search.replace(' ', '');
                else    
                    vm.searchIgnoreAccent = search;
    
                vm.tableParams.filter({ $: vm.searchIgnoreAccent });
                vm.tableParams.reload();
            }
            catch(e){}
            
         });
        
        
      }
    })();
    
/**
CAUTION, IMPORTANT

All this code is not following patterns. The pattern we trying to follow is: 
https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md

Please do not reaply any of pattern or the this code, structure or techniques 
used here in this file or the code will not be aproved. 

This page will be organized and refactored but we can not do it now. 
This page represent all that we do not want in code technique and pattern.

For example: 
1. We do not use jquery approach, we use angularJS .
2. We do not need use ajax, we have http service on foneclube.service
3. Avoid use Scope, use vm.

Maybe you will find other pages that are not following fully the desired patterns 
But we have the a lot of samples in the project and especially the guide:
https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md

 */

angular
  .module('foneClub')
  .controller('AllPhoneNewController', AllPhoneNewController);


function AllPhoneNewController($scope, $interval, FoneclubeService, PagarmeService) {

  var vm = this;
  vm.planOptions;
  vm.result;
  vm.filtroCliente = false;

  $scope.initPageLoad = function () {
    this.AllPhoneData();

    this.BindDropDowns();
  }

  $scope.RemoveService = function (serviceId, phoneId) {
    // 
    var removeUrl = FoneclubeService.getAPIUrl() + '/manager/phones/extra/service/insert/deactive';
    $.ajax({
      url: removeUrl,
      type: 'POST',
      data: {
        'Id': phoneId,
        'Servicos[0].Id': serviceId
      },
      dataType: 'json',
      success: function (data) {
        $scope.ShowSystemAlert('Service Removed Successfully!');

        $("#phoneService").data("kendoGrid").dataSource.read();
        $("#phoneService").data("kendoGrid").refresh();

        $("#allphoneGrid").data("kendoGrid").dataSource.read();
        $("#allphoneGrid").data("kendoGrid").refresh();


        $("#customerAllPhoneGrid").data("kendoGrid").dataSource.read();
        $("#customerAllPhoneGrid").data("kendoGrid").refresh();

        $scope.MonthlySubscription();
      }
    });
  }

  $scope.AddNewService = function (personPhoneId) {
    $('#accountServicesModel').modal('show');
    $('#hdnPersonPhoneId').val(personPhoneId);

    var readUrl = FoneclubeService.getAPIUrl() + '/manager/phones/Service/ByPerson?personId=' + personPhoneId;
    $scope.phoneServiceDataSource = new kendo.data.DataSource({
      type: "json",
      transport: { read: readUrl },
      serverPaging: false,
      serverSorting: false
    });
    $scope.phoneServiceGridOptions = {
      dataSource: $scope.phoneServiceDataSource,
      columns: [
        { field: "ServiceName", width: "180px", title: "Service" },
        { field: "ActiveDate", width: "180px", title: "Active Date" },
      ]
    }
  }

  $scope.AllPhoneData = function () {
    SetGridProperties();

    var allServicesUrl = FoneclubeService.getAPIUrl() + '/manager/phones/extra/services';
    $("#phoneServices").kendoDropDownList({
      dataTextField: "Descricao",
      dataValueField: "Id",
      dataSource: {
        transport: {
          read: {
            dataType: "json",
            url: allServicesUrl,
          }
        }
      }
    });


  }

  $scope.closeCustomers = function () {
    $('#allCustomerModel').hide();
    $('#hdnPhoneNumber').val('');
  }

  $scope.ShowAllCustomers = function (phoneNumber) {
    $('#allCustomerModel').show();
    $('#hdnPhoneNumber').val(phoneNumber);
  }

  $scope.showtabInfo = function (tabNumber) {
    $('#btnCustomerTab').removeClass('btn-default');
    $('#btnCustomerTab').removeClass('btn-info');
    $('#btnPhoneTab').removeClass('btn-default');
    $('#btnPhoneTab').removeClass('btn-info');

    $('#CustomerDetail-Container').hide();
    $('#PhoneDetail-Container').hide();

    if (tabNumber == 1) {
      $('#btnCustomerTab').addClass('btn-info');
      $('#btnPhoneTab').addClass('btn-default');
      $('#CustomerDetail-Container').show();
    }
    else {
      $('#btnCustomerTab').addClass('btn-default');
      $('#btnPhoneTab').addClass('btn-info');
      $('#PhoneDetail-Container').show();


      $('#hdnRecordId').val(0);
      $('#hdnPersonPhoneId').val(0);
      $('#hdnIsPrecoVip').val();
      $('#hdnEditPhoneNumber').val('');

      $('#phoneDetailTitle').html('Add New Phone');
      $("#AmoutPrecoVip").kendoNumericTextBox({
        value: 0.00
      });

      var url = FoneclubeService.getAPIUrl() + '/manager/phones/Available/Numbers?number=';
      $("#PhoneNumber").kendoDropDownList({
        optionLabel: "Select",
        dataTextField: "DisplayPhone",
        dataValueField: "CompletePhone",
        dataSource: {
          transport: {
            read: {
              dataType: "json",
              url: url
            }
          }
        }
      });

    }

  }

  $scope.ShowMessage = function (personId) {
    $('#ShowMessageModel').show();
    $('#hdnPersonPhoneId').val(personId);
  }

  $scope.CancelPhone = function () {
    $('#hdnPersonPhoneId').val(0);
    $('#ShowMessageModel').hide();
  }

  $scope.DeactivePhone = function () {

    var personId = $('#hdnPersonPhoneId').val();
    $scope.ActivateDeactivePhone(personId, false);
    $('#ShowMessageModel').hide();
  }

  $scope.ActivateDeactivePhone = function (personId, activate) {
    var url = FoneclubeService.getAPIUrl() + '/profile/Phone/Activate/Deactive?personPhoneId=' + personId + '&activate=' + activate;
    $.ajax({
      url: url,
      type: 'GET',
      dataType: 'json',
      success: function (data) {
        $('#hdnPersonPhoneId').val(0);
        $("#allphoneGrid").data("kendoGrid").dataSource.read();
        $("#allphoneGrid").data("kendoGrid").refresh();
      }
    });
  }

  //---------------------------------------------------------------------------------


  $scope.BindDropDowns = function () {

    //Phone Plans


    $("#CustomerPhonePlanId").kendoDropDownList({
      dataTextField: "Description",
      dataValueField: "Id",
      dataSource: {
        transport: {
          read: {
            dataType: "json",
            url: FoneclubeService.getAPIUrl() + '/manager/phones/plans'
          }
        }
      }
    });

    $("#PhonePlanId").kendoDropDownList({
      optionLabel: "Select",
      dataTextField: "Description",
      dataValueField: "Id",
      dataSource: {
        transport: {
          read: {
            dataType: "json",
            url: FoneclubeService.getAPIUrl() + '/manager/phones/plans'
          }
        }
      }
    });
    // All Availabl Phone Numbers
    $("#PhoneNumber").kendoDropDownList({
      optionLabel: "Select",

      dataTextField: "DisplayPhone",
      dataValueField: "CompletePhone",

      dataSource: {
        transport: {
          read: {
            dataType: "json",
            url: FoneclubeService.getAPIUrl() + '/manager/phones/Available/Numbers?number=' + $('#hdnEditPhoneNumber').val()
          }
        }
      }
    });
    //All Phone Plan Extra Services
    //$("#newPhoneOptionId").kendoDropDownList({
    //  optionLabel: "Select",
    //  dataTextField: "Descricao",
    //  dataValueField: "Id",
    //  dataSource: {
    //    transport: {
    //      read: {
    //        dataType: "json",
    //        url: FoneclubeService.getAPIUrl() + '/manager/phones/extra/services',
    //      }
    //    }
    //  }
    //});

    $("#PhoneOperatorId").kendoDropDownList({
      optionLabel: "Select",
      dataTextField: "Name",
      dataValueField: "Id",
      dataSource: {
        transport: {
          read: {
            dataType: "json",
            url: FoneclubeService.getAPIUrl() + '/account/operators',
          }
        }
      }
    });
  }


  $scope.editParentRef = function () {


    $('#parentRefDisplay-container').hide();
    $('#parentRefEdit-container').show();

    $('#editRefButton').hide();
    $('#cancelRefButton').show();
    $('#saveRefButton').show();

    $("#RefParentList").kendoDropDownList({
      optionLabel: "Select",
      dataTextField: "Name",
      dataValueField: "Id",
      dataSource: {
        transport: {
          read: {
            dataType: "json",
            url: FoneclubeService.getAPIUrl() + '/profile/active/customers/parents',
          }
        }
      }
    });

    var parentId = $('#ParentId').html();
    var dropdownlist = $("#RefParentList").data("kendoDropDownList");
    dropdownlist.value(parentId);

  }
  $scope.cancelParentRef = function () {
    $('#parentRefDisplay-container').show();
    $('#parentRefEdit-container').hide();

    $('#editRefButton').show();
    $('#cancelRefButton').hide();
    $('#saveRefButton').hide();

  }
  $scope.saveParentRef = function () {

    var ddParentReference = $("#RefParentList").data("kendoDropDownList");


    var parentId = ddParentReference.value();
    var parentName = ddParentReference.text();
    $.ajax({
      url: FoneclubeService.getAPIUrl() + '/profile/customer/parent/id/insert',
      type: 'Post',
      data: {
        'Id': $('#hdnPersonId').val(),
        'Pai.Id': parentId,
        'Pai.Name': parentName,
      },
      dataType: 'json',
      success: function (data) {
        $scope.ShowSystemAlert('Reference Updated Successfully!');
        $('#ParentName').html(parentName);
        $('#ParentId').html(parentId);
        $scope.cancelParentRef();
      }
    });


  }

  //---------------------------------------------------------------------------------
  $scope.SaveCustomerBasicInfo = function () {
    var url = FoneclubeService.getAPIUrl() + '/profile/customer/SaveBasicInfo';
    $.ajax({
      url: url,
      type: 'Post',
      data: {
        'Name': $('#CustomerName').val(),
        'PersonName': $('#CustomerName').val(),
        'Email': $('#CustomerEmail').val(),
        'DocumentNumber': $('#CustomerDocumentNumber').val(),
        'NickName': $('#CustomerNickName').val(),
        'PersonId': $('#hdnPersonId').val(),
      },
      dataType: 'json',
      success: function (data) {
        $scope.ShowSystemAlert('Customer Information Saved Successfully!');
      }
    });

  }

  $scope.SaveService = function (serviceId) {
    /// manager/phones/ 
    var saveUrl = FoneclubeService.getAPIUrl() + '/manager/phones/extra/service/insert';
    var phoneId = $('#hdnPersonPhoneId').val();
    var serviceId = $('#phoneServices').val();
    $.ajax({
      url: saveUrl,
      type: 'POST',
      data: {
        'Id': phoneId,
        'Servicos[0].Id': serviceId
      },
      dataType: 'json',
      success: function (data) {
        $scope.ShowSystemAlert('Service Successfully Added!');

        $("#phoneService").data("kendoGrid").dataSource.read();
        $("#phoneService").data("kendoGrid").refresh();

        $("#allphoneGrid").data("kendoGrid").dataSource.read();
        $("#allphoneGrid").data("kendoGrid").refresh();


        $("#customerAllPhoneGrid").data("kendoGrid").dataSource.read();
        $("#customerAllPhoneGrid").data("kendoGrid").refresh();

        $scope.MonthlySubscription();
      }
    });
  }

  $scope.SavePersonPhone = function () {

    var url = FoneclubeService.getAPIUrl() + '/manager/phones/Save/PersonPhone';
    var Id = $('#hdnRecordId').val();
    var PersonPhoneId = $('#hdnPersonPhoneId').val();
    var PersonId = $('#hdnPersonId').val();
    var DDNumber;
    var PhoneNumber = $('#PhoneNumber').val();
    var PlanId = $('#PhonePlanId').val();
    var OperatorId = $('#PhoneOperatorId').val();
    //var PlanOptionId = $('#newPhoneOptionId').val();
    var StatusId = $('#hdnStatusId').val();
     
    var AmoutPrecoVip = $('#AmoutPrecoVip').val();

    var newAmoutPrecoVip = 0;

    if (parseInt(AmoutPrecoVip) > 0)
    {
      newAmoutPrecoVip = AmoutPrecoVip * 100;
    }

    var Nickname = $('#PhoneNickName').val();
    var IsActive = true;
    var IsPhoneClube = true;
    var IsPortability = false;
    var IsPrecoVip = $('#hdnIsPrecoVip').val();

    DDNumber = PhoneNumber.substring(0, 2);
    PhoneNumber = PhoneNumber.substring(2, 11);

    $.ajax({
      url: url,
      type: 'Post',
      data: {
        'Id': Id,
        'PersonId': PersonId,
        'PersonPhoneId': PersonPhoneId,
        'DDNumber': DDNumber,
        'PhoneNumber': PhoneNumber,
        'OperatorId': OperatorId,
        'PlanId': PlanId,
        'StatusId': StatusId,
        'AmoutPrecoVip': newAmoutPrecoVip,
        //'PlanOptionId': PlanOptionId,
        'Nickname': Nickname,
        'IsActive': IsActive,
        'IsPhoneClube': IsPhoneClube,
        'IsPortability': IsPortability,
        'IsPrecoVip': IsPrecoVip
      },
      dataType: 'json',
      success: function (data) {
        //Once Record is Saved refresh the Grid
        $("#customerAllPhoneGrid").data("kendoGrid").dataSource.read();
        $("#customerAllPhoneGrid").data("kendoGrid").refresh();

        $('#PhonePlanId').val("");
        $('#PhoneNumber').val(""); 
        $('#PhoneOperatorId').val("");
        $('#hdnPersonPhoneId').val('');
        $('#PhoneNickName').val(""); 
        $('#AmoutPrecoVip').val("0")
        $scope.BindDropDowns();
        $scope.ShowSystemAlert('Record Saved Successfully!');
      }
    });
  }

  $scope.SaveCustomerToPhone = function (personId) {
     

    var phone = $('#hdnPhoneNumber').val();
    var DDNumber = phone.substring(0, 2);
    var PhoneNumber = phone.substring(2, 11);

    var url = FoneclubeService.getAPIUrl() + '/manager/phones/Save/PersonPhone';
    var Id = $('#hdnRecordId').val();
    var PlanId = $('#CustomerPhonePlanId').val();
    var OperatorId = $('#PhoneOperatorId').val();
    //var PlanOptionId = $('#newPhoneOptionId').val();
    var StatusId = $('#hdnStatusId').val();
    var AmoutPrecoVip = $('#AmoutPrecoVip').val();
    var Nickname = $('#PhoneNickName').val();
    var IsActive = true;
    var IsPhoneClube = true;
    var IsPortability = false;
    var IsPrecoVip = $('#hdnIsPrecoVip').val();



    $.ajax({
      url: url,
      type: 'Post',
      data: {
        'Id': Id,
        'PersonId': personId,
        'DDNumber': DDNumber,
        'PhoneNumber': PhoneNumber,
        'OperatorId': OperatorId,
        'PlanId': PlanId,
        'StatusId': StatusId,
        'AmoutPrecoVip': AmoutPrecoVip,
        'PlanOptionId': PlanOptionId,
        'Nickname': Nickname,
        'IsActive': IsActive,
        'IsPhoneClube': IsPhoneClube,
        'IsPortability': IsPortability,
        'IsPrecoVip': IsPrecoVip
      },
      dataType: 'json',
      success: function (data) {
        //Once Record is Saved refresh the Grid
        $("#allphoneGrid").data("kendoGrid").dataSource.read();
        $("#allphoneGrid").data("kendoGrid").refresh();

        $('#allCustomerModel').hide();
        $scope.ShowSystemAlert('Record Saved Successfully!');
      }
    });
  }

  $scope.EditPhoneRecord = function (personPhoneId, phoneNumber, phonePlanId, phoneNickName, phoneOperatorId, amoutPrecoVip) {

    $('#phoneDetailTitle').html('Edit Phone Detail');
    var newAmoutPrecoVip = amoutPrecoVip / 100;

    $("#AmoutPrecoVip").kendoNumericTextBox({
      value: newAmoutPrecoVip
    });

    
    $('#hdnPersonPhoneId').val(personPhoneId); 
    $('#PhoneNickName').val(phoneNickName); 
    $('#hdnEditPhoneNumber').val(phoneNumber);

    var url = FoneclubeService.getAPIUrl() + '/manager/phones/Available/Numbers?number=' + phoneNumber;
    $("#PhoneNumber").kendoDropDownList({
      optionLabel: "Select",
      dataTextField: "DisplayPhone",
      dataValueField: "CompletePhone",
      dataSource: {
        transport: {
          read: {
            dataType: "json",
            url: url
          }
        }
      }
    });


    var ddPhoneNumber = $("#PhoneNumber").data("kendoDropDownList");
    ddPhoneNumber.value(phoneNumber);

    var ddPhonePlan = $("#PhonePlanId").data("kendoDropDownList");
    ddPhonePlan.value(phonePlanId);


    var ddOperator = $("#PhoneOperatorId").data("kendoDropDownList");
    ddOperator.value(phoneOperatorId);

    //------------------------------------------------------------------------
    $('#btnCustomerTab').removeClass('btn-default');
    $('#btnCustomerTab').removeClass('btn-info');
    $('#btnPhoneTab').removeClass('btn-default');
    $('#btnPhoneTab').removeClass('btn-info');
    $('#btnCustomerTab').addClass('btn-default');
    $('#btnPhoneTab').addClass('btn-info');
    $('#CustomerDetail-Container').hide();
    $('#PhoneDetail-Container').show();
    //------------------------------------------------------------------------

  }

  $scope.UpdatePhonePrice = function () {

    var url = FoneclubeService.getAPIUrl() + '/manager/phones/Update/Phone/Price';

    $.ajax({
      url: url,
      type: 'Post',
      data: {
        'Id': $('#hdnPersonId').val(),
        'SinglePrice': $('#payableMontlyPrice').val(),
        'DescriptionSinglePrice': $('#lblMonthlySubscription').html(),
      },
      dataType: 'json',
      success: function (data) {
        $scope.ShowSystemAlert('Price has been updated Successfully!');
      }
    });
  }



  //-------------------------------------------------------------------------------------------- 
  $scope.customerGridDataSource = new kendo.data.DataSource({
    type: "json",
    transport: { read: FoneclubeService.getAPIUrl() + '/profile/all/customers?minimal=true' },
    serverPaging: false,
    serverSorting: false
  });
  $scope.customerGridOptions = {
    dataSource: $scope.phoneServiceDataSource,
    sortable: true,
    scrollable: true,
    filterable: {
      mode: "row",
      extra: false,
      operators: {
        string: {
          contains: "Contains",
          startswith: "Starts with",
          eq: "Is equal to",
          neq: "Is not equal to"
        },
        number: {
          eq: "Equal to",
          neq: "Not equal to",
          gte: "Greater Than",
          lte: "Less Than"
        }
      }
    },
    columns: [
      {
        field: "Id", width: "50px", title: '-'
        , template: "<button type='button' ng-click=\"SaveCustomerToPhone('#=Id#')\" class='btn btn-info btn-xs'><i class='fa fa-plus'></i></button>"
        , filterable: { cell: { showOperators: false } }
      },
      { field: "Name", width: "180px", title: "Name", filterable: { cell: { showOperators: false } } },
      { field: "NickName", width: "180px", title: "Nick Name", filterable: { cell: { showOperators: false } } },
      { field: "DocumentNumber", width: "180px", title: "Document Number", filterable: { cell: { showOperators: false } } },
      { field: "Email", width: "180px", title: "Email", filterable: { cell: { showOperators: false } } }
    ]
  }
  //--------------------------------------------------------------------------------------------

  $scope.showCustomerDetail = function (personId) {
    $('#CustomerDetailModel').show();
    $('#hdnPersonId').val(personId);

    //---------------------------------------------------
    $('#btnCustomerTab').removeClass('btn-default');
    $('#btnCustomerTab').removeClass('btn-info');
    $('#btnPhoneTab').removeClass('btn-default');
    $('#btnPhoneTab').removeClass('btn-info');
    $('#CustomerDetail-Container').hide();
    $('#PhoneDetail-Container').hide();
    $('#btnCustomerTab').addClass('btn-info');
    $('#btnPhoneTab').addClass('btn-default');
    $('#CustomerDetail-Container').show();

    $('#ParentName').html('');
    $('#CustomerNickName').val('');
    $('#CustomerDocumentNumber').val('');
    $('#CustomerEmail').val('');
    $('#CustomerName').val('');

    //-----------------------------------------------------

    $scope.customerSummary();
    $scope.MonthlySubscription();


    $scope.customerAllPhoneGridDataSource = new kendo.data.DataSource({
      type: "json",
      transport: { read: FoneclubeService.getAPIUrl() + '/manager/phones/AllCustomer/Phones?personId=' + $('#hdnPersonId').val() },
      serverPaging: false,
      serverSorting: false
    });
    $scope.customerAllPhoneGridGridOptions = {
      dataSource: $scope.customerAllPhoneGridDataSource,
      sortable: true,
      scrollable: true,
      height: 300,
      columns: [

        {
          field: "UsoLinha", width: "50px", title: "-"

          , template: "<button type='button' ng-click=\"EditPhoneRecord('#=PersonPhoneId#','#=CompletePhone#', '#=PlanId#', '#=NickName#','#=OperatorId#', '#=AmoutPrecoVip#')\" class='btn btn-info btn-xs'><i class='fa fa-pencil-square-o'></i></button>"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "UsoLinha", width: "80px", title: "Linha em Uso"
          , template: " # if (UsoLinha == 1) {#  <button class='btn btn-success btn-xs'>sim</button> #}else{# <button class='btn btn-warning btn-xs'>não</button> #}#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "OperatorId", width: "80px", title: "Operadora Divergente"
          , template: " # if (OperatorId == 1) {#  <button class='btn btn-success btn-xs'>A</button> #}else{# <button class='btn btn-danger btn-xs'>E</button> #}#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "OperatorName", width: "180px", title: "Plano Operadora 1"
          , template: "#:OperatorName# #:MasterOperatorName#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: true } }
        },
        {
          field: "DisplayPhone", width: "180px", title: "Telefone"
          , template: "#:DisplayPhone#", attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "PhoneServices"
          , width: "180px"
          , title: "Servico da linha"

          , template: function (dataItem) {
            var personPhoneId = dataItem.PersonPhoneId;
            var temp = "<ul class='activeServicesContainer'>";
            if (dataItem.PhoneServices != undefined) {
              for (var i = 0; i < dataItem.PhoneServices.length; i++) {
                var item = dataItem.PhoneServices[i];
                var serviceName = item.ServiceName;
                var serviceId = item.ServiceId;
                temp = temp + "<li class='activeService'>"
                  + "<button class='btn btn-info btn-xs' ng-click='RemoveService(" + serviceId + "," + personPhoneId + ")'>"
                  + serviceName
                  + "<i class='fa fa-times'></i>"
                  + "</button ></li > ";
              }
            }
            temp = temp + "<li class='activeService '><button class='btn btn-success btn-xs'  ng-click='AddNewService(" + personPhoneId + ")'><i class='fa fa-plus'></i></button></li>";
            temp = temp + "</ul>";
            return temp;
          }
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "IsActive", width: "80px", title: "Ativa"
          , template: " # if (IsActive == 1) {#  <button type='button' ng-click='ShowMessage(#=PersonPhoneId#)' class='btn btn-success btn-xs'>On</button> #}else{# <button type='button' ng-click='ActivateDeactivePhone(#=PersonPhoneId#,true)' class='btn btn-danger btn-xs'>Off</button> #}#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "PlanDescription", width: "120px", title: "Plano Fc"
          , template: "#:PlanDescription#", attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "PlanCost", width: "120px", title: "Preco Fc"
          , template: "#:DisplayPlanCost#", attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "AmoutPrecoVip", width: "80px", title: "Preco VIP"
          , template: "#:DisplayAmoutPrecoVip#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "NickName", width: "180px", title: "Apelido"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
      ]

    }
  }



  $scope.hideCustomerDetail = function () {
    $('#CustomerDetailModel').hide();
    $('#hdnPersonId').val(0);
  }
  //--------------------------------------------------------------------------------------------

  $scope.customerSummary = function () {
    // 
    var url = FoneclubeService.getAPIUrl() + '/profile/cliente/id/' + $('#hdnPersonId').val()
    $.ajax({
      url: url,
      type: 'Get',
      dataType: 'json',
      success: function (data) {

        $('#ParentName').html(data.Pai.Name);
        $('#ParentId').html(data.Pai.Id);

        $('#CustomerNickName').val(data.NickName);
        $('#CustomerDocumentNumber').val(data.DocumentNumber);
        $('#CustomerEmail').val(data.Email);
        $('#CustomerName').val(data.Name);
      }
    });
  }

  $scope.ShowSystemAlert = function (msg) {
    $('#Content-Alert').show();
    $('#Content-AlertMessage').html(msg);
    var target = $('#Content-Alert');
    if (target.length) {
      $('html, body').stop().animate({ scrollTop: target.offset().top }, 1000);
    }
    $("#Content-Alert").delay(2000).fadeOut(2000);
  }

  $scope.MonthlySubscription = function () {

    if (parseInt($('#hdnPersonId').val()) == 0)
      return;


    var url = FoneclubeService.getAPIUrl() + '/manager/phones/GetMonthly/Subscription?personId=' + $('#hdnPersonId').val()
    $.ajax({
      url: url,
      type: 'Get',
      dataType: 'json',
      success: function (data) {
        $('#lblMonthlySubscription').html('R$ ' + data);
        $('#hdnMonthlySubscription').html('R$ ' + data);
      }
    });
  }

  function SetGridProperties() {
    var pageHeight = $(window).height() - 110;
    var readUrl = FoneclubeService.getAPIUrl() + '/manager/phones/All/Phones';

    $scope.allphoneDataSource = new kendo.data.DataSource({
      type: "json",
      transport: { read: readUrl },
      serverPaging: false,
      serverSorting: false,
      schema: {
        model: {
          fields: {
            PlanCost: { type: "number" },
            AmoutPrecoVip: { type: "number" },
            CalculateAmoutPrecoVip: { type: "number" },
            CalculatePlanCost: { type: "number" },
          }
        }
      },

    });

    $scope.allphoneGridOptions = {
      dataSource: $scope.allphoneDataSource,
      height: pageHeight,
      toolbar: ["excel"],
      excel: {
        allPages: true,
        fileName: "phone Report.xlsx",
        template: "<a class='k-button k-button-icontext' onclick='customCommand();' href='\\#'></span>Cutom Command</a>"
      },
      sortable: true,
      scrollable: true,
      pageable: {
        refresh: true,
        alwaysVisible: false
      },
      reorderable: true,
      resizable: true,
      filterable: {
        mode: "row",
        extra: false,
        operators: {
          string: { contains: "Contains" },
          number: { gte: "Greater Than" }

        }
      },
      columns: [
        {
          field: "DisplayUsoLinha", width: "80px", title: "Linha em Uso"
          , template: " # if (UsoLinha == 1) {#  <button class='btn btn-success btn-xs'>sim</button> #}else{# <button class='btn btn-warning btn-xs'>não</button> #}#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "DisplayOperator", width: "80px", title: "Operadora Divergente"
          , template: " # if (OperatorId == 1) {#  <button class='btn btn-success btn-xs'>A</button> #}else{# <button class='btn btn-danger btn-xs'>E</button> #}#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "DisplayPlanoOperador", width: "180px", title: "Plano Operadora 3"
          , template: "#:DisplayPlanoOperador#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "CompletePhone", width: "180px", title: "Telefone"
          , template: "#:DisplayPhone#", attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "PersonName", width: "180px", title: "Cliente 2"
          , template: "# if( PersonName == '~') {#  <button class='btn btn-success btn-xs' ng-click='ShowAllCustomers(#:CompletePhone#)'><i class='fa fa-plus'></i></button>   #} else {# <div><a ng-click='showCustomerDetail(#:PersonId#)'> #=PersonName# </a></div>  #}# "
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "PhoneServices", width: "180px", title: "Servico da linha"
          , template: function (dataItem) {
            var personPhoneId = dataItem.PersonPhoneId;
            var temp = "<ul class='activeServicesContainer'>";
            if (dataItem.PhoneServices != undefined) {
              for (var i = 0; i < dataItem.PhoneServices.length; i++) {
                var item = dataItem.PhoneServices[i];
                var serviceName = item.ServiceName;
                var serviceId = item.ServiceId;
                temp = temp + "<li class='activeService'>"
                  + "<button class='btn btn-info btn-xs' ng-click='RemoveService(" + serviceId + "," + personPhoneId + ")'>"
                  + serviceName
                  + "<i class='fa fa-times'></i>"
                  + "</button ></li > ";
              }
            }
            temp = temp + "<li class='activeService '><button class='btn btn-success btn-xs'  ng-click='AddNewService(" + personPhoneId + ")'><i class='fa fa-plus'></i></button></li>";
            temp = temp + "</ul>";
            return temp;
          }
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: false
        },


        {
          field: "IsActive", width: "80px", title: "Ativa"
          , template: " # if (IsActive == 1) {#  <button type='button' ng-click='ShowMessage(#=PersonPhoneId#)' class='btn btn-success btn-xs'>On</button> #}else{# <button type='button' ng-click='ActivateDeactivePhone(#=PersonPhoneId#,true)' class='btn btn-danger btn-xs'>Off</button> #}#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false } }
        },
        {
          field: "PlanDescription", width: "120px", title: "Plano Fc"
          , template: "#:PlanDescription#", attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false, template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },

        {
          field: "CalculatePlanCost", width: "120px", title: "Preco Fc"
          , template: "#:DisplayPlanCost#", attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false, template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },

        {
          field: "CalculateAmoutPrecoVip", width: "80px", title: "Preco VIP"
          , template: "#:DisplayAmoutPrecoVip#"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false, template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "NickName", width: "180px", title: "Apelido"
          , attributes: { "class": "#=DisplayOperatorCss#" }
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
      ]
    }

  }
};

AllPhoneNewController.$inject = ['$scope', '$interval', 'FoneclubeService', 'PagarmeService']; 

/**
CAUTION, IMPORTANT

All this code is not following patterns. The pattern we trying to follow is: 
https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md

Please do not reaply any of pattern or the this code, structure or techniques 
used here in this file or the code will not be aproved. 

This page will be organized and refactored but we can not do it now. 
This page represent all that we do not want in code technique and pattern.

For example: 
1. We do not use jquery approach, we use angularJS .
2. We do not need use ajax, we have http service on foneclube.service
3. Avoid use Scope, use vm.

Maybe you will find other pages that are not following fully the desired patterns 
But we have the a lot of samples in the project and especially the guide:
https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md

 */

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CadastroController', CadastroController);

    CadastroController.inject = [
        '$scope',
        'PagarmeService',        
        'HubDevService',
        'FoneclubeService',        
        'MainUtils',
        '$q',
        '$timeout',        
        'FlowManagerService',
        'ViewModelUtilsService',
        '$ionicScrollDelegate',
        'UtilsService',
        'DialogFactory',
        'ngDialog'
    ];

    function CadastroController(
        $scope,
        PagarmeService,          
        HubDevService, 
        FoneclubeService,
        MainUtils, 
        $q, 
        $timeout,          
        FlowManagerService, 
        ViewModelUtilsService,
        $ionicScrollDelegate,
        UtilsService,
        DialogFactory,
        ngDialog
    ) {
            
        var vm = this;
        vm.viewName = 'Cadastro Foneclube';
        vm.requesting = false;        
        vm.cpf = '';
        vm.birthdate = '';
        vm.zipcode = '';
        vm.street = '';
        vm.complement = '';
        vm.street_number = '';
        vm.neighborhood = '';
        vm.city = '';
        vm.uf = '';
        vm.email = '';
        vm.personalNumber = '';
        vm.phoneNumbersView =[ ];
        onTapNewPhoneNumber();        
        vm.onTapSearchDocument = onTapSearchDocument;
        vm.onTapSendDocument = onTapSendDocument;

        vm.validarCEP = validarCEP;
        vm.onTapSendAddress = onTapSendAddress;

        vm.onTapSendPersonalData = onTapSendPersonalData;

        vm.onTapNewPhoneNumber = onTapNewPhoneNumber;
        vm.onTapRemoveNewNumber = onTapRemoveNewNumber;
        vm.setPlansList = setPlansList;
        vm.changePhoneNumber = changePhoneNumber;
        vm.getContactParentName = getContactParentName;
        vm.showAddNewPhone = showAddNewPhone;
        
        // vm.enter = enter;
        vm.onTapCancel = onTapCancel;

        vm.onCheckCNPJ = onCheckCNPJ
        vm.CNPJField = false;
        vm.CPFField = true;

        function onCheckCNPJ(){
            console.log("andando " + vm.checkboxCNPJ)

            if(vm.checkboxCNPJ)
            {
                onShowCNPJField();
            }
            else
            {
                onShowCPFField();
            }
            
        }

        function onShowCPFField(){
            vm.CNPJField = false;
            vm.CPFField = true;
        }

        function onShowCNPJField(){
            vm.CNPJField = true;
            vm.CPFField = false;
        }
           
        init();

        function init(){
            vm.hasCPF = false;
            etapaDocumento();            
            vm.allOperatorOptions = MainUtils.operatorOptions();
            FoneclubeService.getPlans().then(function(result){
                console.log(result)
                vm.plans = result;
                vm.selectedPlansList = [];
            })
            .catch(function(error){
                console.log(error.statusText);
            });
           FoneclubeService.getOperators().then(function(result){
                vm.operators = result;
            })
            .catch(function(error){
                console.log(error.statusText);
            });                 
        }

        //Busca o cpf na base foneclube, se existir envia pra edição senão consulta na API de cpfs e retorna o nome;
        function onTapSearchDocument() {            
            vm.requesting = true;            
            var showLoader = DialogFactory.showLoader('Tentando preencher dados...');
            var cpf = UtilsService.clearDocumentNumber(vm.cpf);
            FoneclubeService.getCustomerByCPF(cpf).then(function(existentClient){
                if (existentClient.Id == 0) {
                    HubDevService.validaCPF(cpf).then(function(result){
                        if(result.status){
                           vm.name = result.nome;
                        }
                        etapaDocumentoFaseNome();
                        showLoader.close();
                    }, function(error){
                        etapaDocumentoFaseNome();
                        showLoader.close();
                    });
                } else {
                    showLoader.close();
                    DialogFactory.dialogConfirm({titulo:'Cliente já cadastrado', mensagem:'Deseja acrescentar novas linhas a este CPF?'})
                    .then(function(res){
                        if(res) {
                            FlowManagerService.changeEdicaoView(existentClient);
                        } else {
                            FlowManagerService.changeHomeView();
                        }
                    })                    
                }
            }, function (result) {
                FlowManagerService.changeHomeView();
            }).catch(function (error) {
                FlowManagerService.changeHomeView();
            });
        }

        //envia o CPF com os dados basico para cadastro no Foneclube
        function onTapSendDocument(){
            vm.requesting = true;
            var personCheckout = {
                'DocumentNumber': UtilsService.clearDocumentNumber(vm.cpf),
                'Name': vm.name,
                'Born': '12/12/1950',
                'Email': vm.email,
                'Phones' : [{
                    'DDD': UtilsService.getPhoneNumberFromStringToJson(vm.personalNumber).DDD,
                    'Number': UtilsService.getPhoneNumberFromStringToJson(vm.personalNumber).Number,
                    'IsFoneclube': null,
                    'Id': null,
                    'IdOperator': vm.operator
                }]
            };
            FoneclubeService.postBasePerson(personCheckout).then(function(result){
                if(result) {
                    etapaEndereco();
                    DialogFactory.showMessageConfirm({titulo:'Andamento', mensagem:'Documento enviado, agora preencha os dados de Endereço.'})
                    .then(function() {
                        $timeout(function(){
                            document.getElementById('cep').focus();
                        }, 200);
                    });
                }
            }).catch(function(error){
                vm.requesting = false;
                DialogFactory.showMessageDialog({mensagem:error.statusText});                
            });
        }
            
        
        function validarCEP() {
            if (vm.zipcode.length < 9) return;
            var showLoader = DialogFactory.showLoader('Tentando preencher dados...');
            HubDevService.validaCEP(vm.zipcode.replace(/[-.]/g , '')).then(function(result){
                if (!result.erro) {
                    vm.street = result.logradouro;
                    vm.neighborhood = result.bairro;
                    vm.city = result.localidade;
                    vm.uf = result.uf;
                    $timeout(function(){
                        document.getElementById('numero').focus();
                    }, 200);
                } else {
                    DialogFactory.showMessageDialog({mensagem: "CEP incorreto."});
                }
                showLoader.close();
            }, function(error){
                showLoader.close();
            });
        }

        function onTapSendAddress() {
            vm.requesting = true;
            var cpf = UtilsService.clearDocumentNumber(vm.cpf);
            var personCheckout = {
                'DocumentNumber': cpf,
                'Adresses': [
                    {
                        'Street': vm.street,
                        'Complement': vm.complement,
                        'StreetNumber': vm.street_number,
                        'Neighborhood': vm.neighborhood,
                        'City': vm.city,
                        'State': vm.uf,
                        'Cep': vm.zipcode
                    }
                ]
            };

            FoneclubeService.postUpdatePersonAdress(personCheckout).then(function(result){
                if(result) {
                    etapaDadosPessoais();
                    DialogFactory.showMessageConfirm({titulo:'Andamento',mensagem:'Endereço enviado, agora preencha os dados pessoais.'});                    
                }
            })
            .catch(function(error){
                DialogFactory.showMessageDialog({mensagem:error.statusText});
                vm.requesting = false;
            });
        }

        // ETAPA IMAGENS
        vm.imageSelf;
        vm.base64Self;
        vm.imageFrente;
        vm.base64Frente;
        vm.imageVerso;
        vm.base64Verso;        
        vm.uploadImg = uploadImg;
        vm.viewImg = viewImg;
        function viewImg(img) {            
            ngDialog.open({
                template: '<div class="popup-lista-imagens ngdialog-close"><img ng-src="{{img}}"/></div>',
                controller: ['$scope', 'DataFactory', function($scope, DataFactory) {                    
                    $scope.img = $scope.ngDialogData.img;            
                }],
                className: 'ngDialog-custom-width popup-lista-imagens',
                plain: true,
                closeByDocument: true,
                data: {
                    img: img
                }
            });
        }
        function uploadImg(param) {
            document.getElementById(param).click();
        }
        function onTapSendPersonalData() {
            var showLoader = DialogFactory.showLoader('Enviando Imagens...');
            vm.requesting = true;
            UtilsService.sendImageToUpload(vm.imageSelf, vm.imageFrente, vm.imageVerso).then(function(result) {
                var personCheckout = {
                    'DocumentNumber': UtilsService.clearDocumentNumber(vm.cpf),
                    'Photos': []
                };
                for(var i in result) {
                    personCheckout.Photos.push({Name:result[i].filename, Tipo: result[i].tipo});
                }
                FoneclubeService.postUpdatePerson(personCheckout).then(function(result){
                    showLoader.close();
                    if(result) {
                        etapaComplementar();
                        DialogFactory.showMessageConfirm({titulo:'Andamento',mensagem:'Dados pessoais enviados, agora preencha os dados Foneclube.'})
                        .then(function() {
                            $timeout(function(){
                                document.getElementById('telefoneConvidou').focus();
                            }, 200); 
                        })
                    }
                })
                .catch(function(error){
                    DialogFactory.showMessageDialog({mensagem:error.statusText}); //TODO
                    vm.requesting = false;
                    showLoader.close();

                });
            }, function(result) {
                showLoader.close();
                DialogFactory.showMessageDialog({mensagem: 'fazer validações para mensagens de erro;'}); //TODO
            });
        }
        // ETAPA IMAGENS
        function etapaDocumentoFaseNome(){
            vm.hasCPF = true;            
            vm.requesting = false;
            $timeout(function(){
                document.getElementById('nome').focus();
            }, 200);            
        }
        function etapaDocumento(){
            limpaEtapas();
            vm.etapaDocumento = true;
        }
        function etapaEndereco(){
            limpaEtapas();
            vm.etapaBuscarCEP = true;
            vm.etapaEndereco = true;                          
        }
        function etapaDadosPessoais(){
            limpaEtapas();
            vm.etapaDadosPessoais = true;
        }
        function etapaComplementar(){
            limpaEtapas();
            vm.etapaComplementar = true;           
            
        }
        function limpaEtapas(){
            vm.etapaDocumento = false;
            vm.etapaEndereco = false;
            vm.etapaDadosPessoais = false;
            vm.etapaComplementar = false;
            vm.requesting = false;
        }

        /////////////////////////
        /////FOTOS FASE
        //MOVER PRA CONSTATNS
        // var PHOTO_SELFIE = 1;
        // var PHOTO_FRONT = 2;
        // var PHOTO_VERSE = 3;
        // var interval;
        // vm.currentPhoto;

        // function onTapPhotoSelfie(){
        //     console.log('onTapPhotoSelfie');
        //     if(!vm.selfieSended)
        //         launchModal(PHOTO_SELFIE);
        // }

        // function onTapPhotoFront(){
        //     console.log('onTapPhotoFront');
        //     if(!vm.frontSended)
        //         launchModal(PHOTO_FRONT);
        // }

        // function onTapPhotoVerse(){
        //     console.log('onTapPhotoVerse');
        //     if(!vm.verseSended)
        //         launchModal(PHOTO_VERSE);
        //         //deseja trocar imagem?
        // }

        // function launchModal(photoType){
        //     console.log('launchModal ' + photoType);
        //     vm.currentPhoto = photoType;
        //     //limpa seleção de arquivo em variável local e em variável global
        //     vm.hasFileSelected = false;
        //     FileListUtil.set(undefined);
        //     vm.hasPhotoCaptured = false;
        //     vm.modal.show();            
        //     validadeFile();

        // }

        // function validadeFile(){
        //     try{
        //         $interval.cancel(interval);
        //     }
        //     catch(error){ }
        //     interval = $interval(function() {
        //         //console.log('say hello');
        //         //console.log(FileListUtil.get())
        //         if(FileListUtil.get())
        //         {
        //             vm.hasFileSelected = true;
        //         }
        //     }, 500);
        // }

        // vm.onTapPhotoGalley = onTapPhotoGalley;
        // vm.onTapPhotoCamera = onTapPhotoCamera;
        // function onTapPhotoGalley(){
        //     console.log('onTapPhotoGalley');
        //     //não precisu file upload abre direto do DOM
        // }
        // function onTapPhotoCamera(){
        //     console.log('onTapPhotoCamera');
        //     //startCameraPhoto(); não precisa file upload abre direto do DOM
        // }

        ////PHOTO PROCCESS
        /////////////////////////////////////
        /////////////////////////////////////

        ///GALERIA
        
        
        // var personCheckout = {};
        // personCheckout.Images = [];
        // var selfiePhotoName = '';
        // var frontPhotoName = '';
        // var versePhotoName = '';
        // var listaImagens = [];
        // var cameraPhotoName;
        // vm.fotos = [];
        // vm.images = []
        // vm.onTapSendImage = onTapSendImage;
        // function uploadIdentidadeGaleria(){
        //     console.log('uploadIdentidadeGaleria')
        //     var file = FileListUtil.get();
        //     if(!file)
        //      return;
        //     uploadFile(file).then(function(result){
        //         console.log('result')
        //         console.log(result.filename);
        //         setImageReleaseView(result);
        //         //https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/lsUbxLxh-IMG_20170420_162617843.jpg
        //     });

        // }

        // function setImageReleaseView(result){
        //     switch(vm.currentPhoto) {
        //             case PHOTO_SELFIE:
        //                 console.log('PHOTO_SELFIE');
        //                 vm.selfieSended = true;
        //                 vm.showSelfiePhoto = true;
        //                 selfiePhotoName = result.filename;
        //                 vm.selfiePhotoURL = 'https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/' + selfiePhotoName;
        //                 vm.modal.hide();
        //                 //code
        //                 break;

        //             case PHOTO_FRONT:
        //                 console.log('PHOTO_FRONT');
        //                 vm.frontSended = true;
        //                 vm.showFrontPhoto = true;
        //                 frontPhotoName = result.filename;
        //                 vm.frontPhotoURL = 'https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/' + frontPhotoName;
        //                 vm.modal.hide();
        //                 //code
        //                 break;

        //             case PHOTO_VERSE:
        //                 console.log('PHOTO_VERSE');
        //                 versePhotoName = result.filename;
        //                 vm.verseSended = true;
        //                 vm.showVersePhoto = true;
        //                 vm.versePhotoURL = 'https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/' + versePhotoName;
        //                 vm.modal.hide();
        //                 //code
        //                 break;
        //         }
        // }




        // function uploadFile(file){
        //     var q = $q.defer();

        //     if(isInvalidName(file.name)){
        //         vm.file = null;
        //         vm.msg = "Não foi possivel enviar sua imagem, por favor envie uma imagem sem espaço no nome do arquivo"
        //         q.reject();
        //         return q.promise;
        //     }
        //     var showLoader = DialogFactory.showLoader('Enviando...');
        //     var imageUploader = new ImageUploader();
        //     imageUploader.push(file)
        //     .then((data) => {
        //         showLoader.close();
        //          q.resolve(data);
        //     })
        //     .catch((err) => {
        //         DialogFactory.showMessageDialog({mensagem:'Não foi possível enviar imagens'});
        //         showLoader.close();
        //         q.reject(error);
        //     });
        //     return q.promise;
        // }

        // function onTapSendImage(){
        //     vm.msg = "";
        //     console.log('onTapSendImage ');
        //     if(vm.hasPhotoCaptured)
        //         startListUpload(vm.fotos);
        //     if(vm.hasFileSelected)
        //         uploadIdentidadeGaleria();
        // }

        // /////////////////////////////////////
        // ///foto de camera
        // //extrair
        // function startCameraPhoto() {
        //     console.log('fotoIdentidadeCamera')
        //     // 2
        //     var options = {
        //         destinationType : Camera.DestinationType.FILE_URI,
        //         sourceType : Camera.PictureSourceType.CAMERA, // Camera.PictureSourceType.PHOTOLIBRARY
        //         allowEdit : false,
        //         encodingType: Camera.EncodingType.JPEG,
        //         popoverOptions: CameraPopoverOptions,
        //     };

        //     // 3
        //     $cordovaCamera.getPicture(options).then(function(imageData) {
        //         console.log('cordovaCamera.getPicture')
        //         console.log(imageData)
        //         // 4
        //         onImageSuccess(imageData);

        //         function onImageSuccess(fileURI) {
        //             createFileEntry(fileURI);
        //         }
        //         function createFileEntry(fileURI) {
        //             window.resolveLocalFileSystemURL(fileURI, copyFile, fail);
        //         }
        //         // 5
        //         function copyFile(fileEntry) {
        //             var newName = MainUtils.guid() + '.jpg'; //todo fazer tratamento pra nome jpg /png
        //             window.resolveLocalFileSystemURL(cordova.file.dataDirectory, function(fileSystem2) {
        //                 fileEntry.copyTo(
        //                     fileSystem2,
        //                     newName,
        //                     onCopySuccess,
        //                     fail
        //                 );
        //             },
        //             fail);
        //         }

        //         // 6
        //         function onCopySuccess(entry) {
        //             console.log('onCopySuccess ' );
        //             console.log(entry);
        //             console.log(entry.nativeURL);
        //             var listName = entry.nativeURL.split('/');
        //             vm.fotos.push(entry.nativeURL);
        //             listaImagens.push(listName[listName.length - 1]);
        //             $scope.$apply(function () {
        //                 vm.images.push(entry.nativeURL);
        //             });
        //             vm.hasPhotoCaptured = true;
        //             //startListUpload(vm.fotos);
        //         }

        //         function fail(error) {
        //             console.log("fail: " + error.code);
        //         }

        //         function makeid() {
        //             var text = "";
        //             var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        //             for (var i=0; i < 5; i++) {
        //                 text += possible.charAt(Math.floor(Math.random() * possible.length));
        //             }
        //             return text;
        //         }

        //     }, function(err) {
        //         console.log(err);
        //     });
        // }

        // function startListUpload(photos){
        //     var showLoader = DialogFactory.showLoader('Enviando...');
        //     if(photos.length > 0) {
        //         var lastItemIndex = photos[photos.length - 1];
        //         uploadImagePath(lastItemIndex).then(function(result){
        //             if(result)
        //                 continueListUpload(vm.fotos);
        //         });
        //     } else {
        //         showLoader.close();                
        //         console.log(listaImagens)
        //         //conclusão de foto auqi
        //         setImageReleaseView(cameraPhotoName)
        //     }
        // }

        // function continueListUpload(photos){
        //     photos.pop();
        //     startListUpload(vm.fotos);
        // }

        // function uploadImagePath(path){
        //     var q = $q.defer();
        //     var guidName = MainUtils.guid();
        //     MainUtils.pathToDataURI(path, function(dataUri) {
        //         var blob = MainUtils.dataURIToBlob(dataUri);
        //         blob.name = guidName.concat('.jpg');
        //         MainUtils.uploadFile(blob).then(function(result){
        //             console.log(' MainUtils.uploadFile(blob)')
        //             console.log(result)
        //             personCheckout.Images.push(blob.name);
        //             setImageReleaseView(result);
        //             q.resolve(true);
        //         }).catch(function(result){
        //             q.resolve(false);
        //         });
        //     });
        //     return q.promise;
        // }


        /////////////////////////////////////
        /////////////////////////////////////

        function getFoneclubePhonesOnly(array) {
            return array.filter(function (number) {
                return number.IsFoneclube == true && number.DDD.length == 2 && number.Number.length >= 8 && number.LinhaAtiva;
            });
        }

        function validadeMinInfos() {
            for (var number in vm.phoneNumbersView) {
                if(!vm.phoneNumbersView[number].Nickname || vm.phoneNumbersView[number].Nickname == '') {
                    DialogFactory.showMessageDialog({titulo:'Linha ' + (number + 1), mensagem:'Nickname é um campo obrigario'});
                    return false;
                }
                if(vm.phoneNumbersView[number].IdPlanOption == '') {
                    DialogFactory.showMessageDialog({titulo:'Linha ' + (number + 1), mensagem:'A escolha do plano é obrigatória.'});
                    return false;
                }
                if (vm.phoneNumbersView[number].NovoFormatoNumero.length < 14 && vm.phoneNumbersView[number].NovoFormatoNumero.length > 0) {
                    DialogFactory.showMessageDialog({titulo:'Aviso', mensagem:'O telefone: '.concat(vm.phoneNumbersView[number].NovoFormatoNumero).concat(', não pode ficar incompleto, mas pode ficar em branco.')});
                    return false;
                }
            }
            return true;
        }

        function validateUniquePriceLessThanPhones() {
            if (!vm.singlePrice) return true;
            var totalPriceValidade = 0;
            for (var number in vm.phoneNumbersView) {
                vm.plans.find(function (element, index, array) {
                    if (element.Id == vm.phoneNumbersView[number].IdPlanOption) {
                        totalPriceValidade = totalPriceValidade + element.Value / 100;
                    }
                });
            }
            var price = parseFloat(vm.singlePrice) / 100;
            if (price > totalPriceValidade) {
                DialogFactory.showMessageDialog({mensagem:'Preço único não pode ser maior do que o preço de todos os planos somados.'});
                return false;
            }
            return true;
        }

        function dontLetAddTheSameNumberTwice(arrayFiltered) {
            for(var x in arrayFiltered) {
                var twiceNumber = arrayFiltered.filter(function (element, index, array) {
                    return element.DDD == arrayFiltered[x].DDD && element.Number == arrayFiltered[x].Number;
                });
                if (twiceNumber.length > 1) {
                    DialogFactory.showMessageDialog({titulo:'Aviso', mensagem:'Você não pode cadastrar o mesmo telefone duas vezes para o cliente.'});
                    return false;
                }
            }
            return true;
        }

        vm.onTapSendFoneclubeData = onTapSendFoneclubeData;
        function onTapSendFoneclubeData(){
            vm.requesting = true;
            
            var cpf = UtilsService.clearDocumentNumber(vm.cpf);
            var phones = [];
            
            //valida se nickname e apelido está preenchido
            if (!validadeMinInfos()) {
                vm.requesting = false;
                //showLoader.close();
                return;
            }
            
            //valida se a soma dos planos não é maior do que o preço unico;
            if (!validateUniquePriceLessThanPhones()) {
                vm.requesting = false;
                //showLoader.close();
                return;
            }

            vm.phoneNumbersView.forEach(function (element, index, array) {
                phones.push({
                    'DDD': UtilsService.getPhoneNumberFromStringToJson(element.NovoFormatoNumero).DDD,
                    'Number': UtilsService.getPhoneNumberFromStringToJson(element.NovoFormatoNumero).Number,
                    'Portability': element.Portability,
                    'IsFoneclube': true,
                    'Nickname': element.Nickname,
                    'IdPlanOption': element.IdPlanOption
                });
            });

            var personCheckout = {
                'DocumentNumber': UtilsService.clearDocumentNumber(vm.cpf),  
                // 'NameContactParent': vm.whoinvite,
                //'IdParent': vm.IdParent, //se passar um que não existe api não guarda indicação, atualmente não retornamos erro, validar com cliente, cardozo
                //'IdContactParent': vm.IdParent, //se passar um que não existe api não guarda indicação, atualmente não retornamos erro, validar com cliente, cardozo
                'Phones': phones,
                'SinglePrice': vm.singlePrice,
                'DescriptionSinglePrice': vm.descriptionSinglePrice
            };

            // debugger;

            
            
            if (vm.IdParent) {
                personCheckout.IdParent = vm.IdParent;
                personCheckout.IdContactParent = vm.IdParent;
            }

            //busca apenas telefones foneclube e que estão ativos
            var arrayFiltered = getFoneclubePhonesOnly(phones);

            //Não deixa adicionar o mesmo numero duas vezes;
            if (!dontLetAddTheSameNumberTwice(arrayFiltered)) {
                vm.requesting = false;
                //showLoader.close();
                return;
            }
            var showLoader = DialogFactory.showLoader('Enviando dados...');
            // if (personCheckout.IdParent == 0) {
            //     delete personCheckout.IdParent;
            // }
            if (arrayFiltered.length == 0) {
                FoneclubeService.postUpdatePerson(personCheckout).then(postUpdatePersonSucess).catch(postUpdatePersonError);
            } else {
                validadeNumbers(arrayFiltered).then(function(result) {
                    var right = true;
                    for (var item in result) {
                        if (result[item].DocumentNumber && result[item].DocumentNumber != UtilsService.clearDocumentNumber(vm.cpf)) {
                            var msg = 'Você não pode cadastrar o mesmo telefone para dois clientes.</br>O número <strong>'
                                .concat(getNumberComMascara(arrayFiltered[item])).concat('</strong>, pertence ao cliente ')
                                .concat(result[item].DocumentNumber).concat(', ').concat(result[item].Name).concat('.');
                            DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: msg});
                            right = false;
                            vm.requesting = false;
                            showLoader.close();
                            break;
                        }
                    }
                    if (right) {
                        FoneclubeService.postUpdatePerson(personCheckout).then(postUpdatePersonSucess).catch(postUpdatePersonError);
                    }
                });
            }
            
            function postUpdatePersonSucess(result) {

                FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function(result){
                    
                    // debugger
                    try{
                        var parentDDD = vm.phoneContactParent.replace('(', '').replace(')','').replace('-', '').replace(' ', '').trim().substring(0,2);
                        var parentNumber = vm.phoneContactParent.replace('(', '').replace(')','').replace('-', '').replace(' ', '').trim().substring(2,11);
                    }
                    catch(erro){
                        var parentDDD = '';
                        var parentNumber = '';
                    }
                    
                    // debugger;
                    var customerObj = {
                        'NameParent':vm.whoinvite,
                        'Id': result.Id,
                        'PhoneDDDParent':parentDDD,
                        'PhoneNumberParent':parentNumber
                    }
    
                    FoneclubeService.postCustomerParent(customerObj).then(function(result){
                        var avisopai = '';
                        if(!result)
                        {
                            avisopai = '(menos o pai)'
                        }
 
                        
                        showLoader.close();
                        if(result) { 
                            DialogFactory.dialogConfirm({title:'Cadastro Realizado', mensagem: 'Todos dados pessoais enviados, cadastro Foneclube feito com sucesso.' + avisopai, btn1: 'Ir para Home', btn2: 'Realizar Cobrança'}).then(function(result) {
                                if(result) {
                                    FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function(result){
                                        if(vm.singlePrice) {
                                            result.CacheIn = vm.singlePrice;
                                            ViewModelUtilsService.showModalCustomer(result);
                                        } else {
                                            FoneclubeService.getCustomerPlans(UtilsService.clearDocumentNumber(vm.cpf)).then(function(customerPlans){
                                                var valueTotal = 0;
                                                if(customerPlans.length > 0) {
                                                    for(var i=0; i<customerPlans.length;i++){
                                                        valueTotal = valueTotal + customerPlans[i].Value;
                                                    }
                                                }
                                                result.CacheIn = valueTotal;
                                                ViewModelUtilsService.showModalCustomer(result);
                                            });
                                        }
                                    });
                                } else {
                                    FlowManagerService.changeHomeView();
                                }
                            })                    
                        }

                    }).catch(function(erro){
                        

                        showLoader.close();
                        if(result) { 
                            DialogFactory.dialogConfirm({title:'Cadastro Realizado', mensagem: 'Todos dados pessoais enviados (menos o pai), cadastro Foneclube feito com sucesso.', btn1: 'Ir para Home', btn2: 'Realizar Cobrança'}).then(function(result) {
                                if(result) {
                                    FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function(result){
                                        if(vm.singlePrice) {
                                            result.CacheIn = vm.singlePrice;
                                            ViewModelUtilsService.showModalCustomer(result);
                                        } else {
                                            FoneclubeService.getCustomerPlans(UtilsService.clearDocumentNumber(vm.cpf)).then(function(customerPlans){
                                                var valueTotal = 0;
                                                if(customerPlans.length > 0) {
                                                    for(var i=0; i<customerPlans.length;i++){
                                                        valueTotal = valueTotal + customerPlans[i].Value;
                                                    }
                                                }
                                                result.CacheIn = valueTotal;
                                                ViewModelUtilsService.showModalCustomer(result);
                                            });
                                        }
                                    });
                                } else {
                                    FlowManagerService.changeHomeView();
                                }
                            })                    
                        }
                    });
                });

                
            }
            
            function postUpdatePersonError(error) {
                vm.requesting = false;
                showLoader.close();
                DialogFactory.showMessageDialog({mensagem:error.statusText});
            }
        }
        
        function validadeNumbers(numbers){
            var promises = numbers.map(function(number) {
                return FoneclubeService.getCustomerByPhoneNumber({
                    ddd: UtilsService.clearPhoneNumber(number.DDD),
                    numero: UtilsService.clearPhoneNumber(number.Number)
                });
            });
            return $q.all(promises);
        }
        
        function setPlansList(operadora) {
            vm.selectedPlansList = [];
            for (var item in vm.plans) {
                if (operadora == 1 && vm.plans[item].Description.endsWith('VIVO')) {
                    vm.selectedPlansList.push(vm.plans[item]);
                } else if (operadora == 2 && vm.plans[item].Description.endsWith('CLARO')){
                    vm.selectedPlansList.push(vm.plans[item]);
                }
            }
        }
            
        //adiciona telefone do array que é exibido na view
        function onTapNewPhoneNumber() {
            vm.phoneNumbersView.push(
                {
                    'Id': null,
                    'DDD': '',
                    'Number': '',
                    'IsFoneclube': true,
                    'IdOperator': 0,
                    'Portability': 'false',
                    'NickName': '',
                    'IdPlanOption': 0,
                    'Inative': false,
                    'Delete': false,
                    'NovoFormatoNumero': '',
                    'operadora': '1',
                    'LinhaAtiva': true
                }
            );
        }
        //remove telefone do array que é exibido na view
        function onTapRemoveNewNumber(position) {
            DialogFactory.dialogConfirm({title:'Excluir Número', mensagem: 'Deseja realmente remover este número?'})       
            .then(function(result) {
                if (result) {
                    vm.phoneNumbersView.splice(position, 1);
                }
            })                 
        }
        
        function changePhoneNumber(position) {
            if (vm.phoneNumbersView[position].NovoFormatoNumero.length < 14) {
                return
            }
            var param = {
                ddd: UtilsService.getPhoneNumberFromStringToJson(vm.phoneNumbersView[position].NovoFormatoNumero).DDD,
                numero: UtilsService.getPhoneNumberFromStringToJson(vm.phoneNumbersView[position].NovoFormatoNumero).Number
            }
                //nao deixa add o mesmo numero duas vezes para o mesmo cliente;
                var twiceNumber = vm.phoneNumbersView.filter(function (element, index, array) {
                    return element.NovoFormatoNumero == vm.phoneNumbersView[position].NovoFormatoNumero;
                });
                if (twiceNumber.length > 1) {
                    DialogFactory.showMessageDialog({titulo:'Aviso', mensagem:'Você não pode cadastrar o mesmo telefone duas vezes para o mesmo cliente.'});
                    return;
                }
            FoneclubeService.getCustomerByPhoneNumber(param).then(function(res) {
                if (res.DocumentNumber && res.DocumentNumber != UtilsService.clearDocumentNumber(vm.cpf)) {
                    var msg = 'Este telefone já pertence ao cliente '.concat(UtilsService.getDocumentNumerWithMask(res.DocumentNumber)).concat(', ').concat(res.Name).concat('.');
                    DialogFactory.showMessageDialog({titulo:'Aviso', mensagem: msg});
                }
            });
        }
        
        function getContactParentName() {
            //TODO
            //preenchimento automatico
            // if (vm.phoneContactParent.length < 13) { 
            //     vm.IdParent = "";
            //     return 
            // }
            // var param = {
            //     ddd: UtilsService.getPhoneNumberFromStringToJson(vm.phoneContactParent).DDD,
            //     numero: UtilsService.getPhoneNumberFromStringToJson(vm.phoneContactParent).Number
            // }
            // FoneclubeService.getCustomerByPhoneNumber(param).then(function(result) {
            //     vm.IdParent = result.Id;
            //     vm.whoinvite = result.Name;
            // })
        }

        function onTapCancel(){
            vm.modal.hide();
        }
               
        function showAddNewPhone() {
            function filterPhones(number){
                return number.IsFoneclube == true;
            }
            return personCheckout.Phones.filter(filterPhones);
        }
    }

    angular.module('foneClub').directive("fileread", [function () {
        return {
            scope: {
                fileread: "=",
                base64: "="
            },
            link: function (scope, element, attributes) {
                element.bind("change", function (changeEvent) {
                    scope.$apply(function () {
                        scope.fileread = changeEvent.target.files[0];
                    });
                    var reader = new FileReader();
                    reader.onload = function (loadEvent) {
                        scope.$apply(function () {
                            scope.base64 = loadEvent.target.result;
                        });
                    }
                    reader.readAsDataURL(changeEvent.target.files[0]);
                });
            }
        }
    }]);

})();



(function () {
    'use strict';

    angular
        .module('foneClub')
        .controller('AllPhoneLinesController', AllPhoneLinesController)
        .directive('ngPrism', function () {
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    element.ready(function () {
                        Prism.highlightElement(element[0]);
                    });
                }
            };
        });


    AllPhoneLinesController.inject = ['$scope', 'DataFactory', 'ViewModelUtilsService', 'FoneclubeService', 'MainUtils', '$stateParams', 'FlowManagerService', '$timeout', 'HubDevService', '$q', '$ionicScrollDelegate', 'UtilsService', 'DialogFactory', 'ngDialog', '$http', '$sce', '$rootScope'];
    function AllPhoneLinesController($scope, DataFactory, ViewModelUtilsService, FoneclubeService, MainUtils, $stateParams, FlowManagerService, $timeout, HubDevService, $q, $ionicScrollDelegate, UtilsService, DialogFactory, ngDialog, $http, $sce, $rootScope) {
        var vm = this;
        vm.data = DataFactory;
        vm.showLoader = true;

        vm.search = "";
        vm.showall = false;
        vm.linhaAtiva = false;
        vm.claro = true;
        vm.vivo = true;
        vm.history = [];
        vm.sp = 1;
        vm.Phones = [];
        vm.tempPhones = [];
        vm.parentlist = [];
        vm.totalDisplayed = 50;
        vm.showAllText = "Show More 50";

        vm.ignoreAccents = function (item) {
            if (vm.showall) {
                return true;
            } else {
                var text = removeAccents(item.NovoFormatoNumero.toLowerCase());
                //alert(text);
                var search_text = removeAccents(vm.search.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~]/g, ''));
                var flag1 = text.indexOf(search_text) > -1;
                var flag2 = true;
                if (vm.linhaAtiva && !item.LinhaAtiva) {
                    flag2 = false;
                }
                var flag3 = true;
                if (!vm.claro) {
                    var itm = vm.plans.find(x => x.Id == item.IdPlanOption);
                    if (!itm) {
                        flag3 = false;
                    } else {
                        text = removeAccents(itm.Description.toLowerCase());
                        flag3 = !(text.indexOf('claro') > -1);
                    }
                }
                var flag4 = true;
                if (!vm.vivo) {
                    var itm = vm.plans.find(x => x.Id == item.IdPlanOption);
                    if (!itm) {
                        flag4 = false;
                    } else {
                        text = removeAccents(itm.Description.toLowerCase());
                        flag4 = !(text.indexOf('vivo') > -1);
                    }
                }

                return flag1 && flag2 && flag3 && flag4;

            }
        };

        function getNumberString(param) {
            return param.DDD.concat(param.Number);
        }

        var getCustomers = $scope.$watch(function () {

            $scope.clientList = vm.data.customers;
            return $scope.clientList;
        }, function (data) {
            if (data && data.length > 0) {
                vm.showLoader = false;
                getCustomers();
                init();
                if (vm.data.customersCache) {
                    vm.data.customers = angular.copy(vm.data.customersCache);
                }
            }
        })


        function init() {
            FoneclubeService.getPlans().then(function (result) {
                vm.plans = result;
                var size = vm.data.customers.length;
                for (var i = 0; i < size; i++) {
                    var customer = vm.data.customers[i];
                    var psize = customer.Phones.length;
                    for (var j = 0; j < psize; j++) {
                        var tmpPhone = customer.Phones[j];
                        if(tmpPhone.IdPlanOption==''){
                        tmpPhone.price = 0;
                        } else {
                            tmpPhone.price = vm.plans.find(x => x.Id == tmpPhone.IdPlanOption).Value / 100                            
                        }
                        vm.Phones.push(tmpPhone);
                        vm.parentlist.push({'parent':i,'child':j});
                        customer.Phones[j].key = Math.random();

                        customer.Phones[j].StatusOperator = { 'background-color': 'grey' }
                        customer.Phones[j].StatusDescription = 'C'

                        if (customer.Phones[j].Portability) {
                            customer.Phones[j].Portability = 'true';
                        } else {
                            customer.Phones[j].Portability = 'false';
                        }
                        customer.Phones[j].NovoFormatoNumero = getNumberString(customer.Phones[j]); //popula o novo campo vm.<telefone>
                        for (var plan in vm.plans) {
                            if (vm.plans[plan].Id == customer.Phones[j].IdPlanOption) {
                                if (vm.plans[plan].Description.endsWith('VIVO')) {
                                    customer.Phones[j].operadora = '1'; //seta a operadora local
                                    // customer.Phones[j].StatusOperator = { 'background-color': 'green' }
                                    // customer.Phones[j].StatusDescription = 'A'
                                } else {
                                    customer.Phones[j].operadora = '2'; //seta a operadora local

                                    console.log('tentando coletar')
                                    /*
                                    FoneclubeService.getStatusBlockedClaro(customer.Phones[j].DDD, customer.Phones[j].Number).then(function (result) {
                                        console.log('retorno ' + result)
                                        if (!result) {
                                            customer.Phones[j].StatusOperator = { 'background-color': 'green' }
                                            customer.Phones[j].StatusDescription = 'A'
                                        }
                                        else {
                                            customer.Phones[j].StatusOperator = { 'background-color': 'red' }
                                            customer.Phones[j].StatusDescription = 'B'
                                        }

                                    });
                                    */
                                }
                            }
                        }

                    }
                }

                vm.pricelist = [];
                for (var i = 0; i < vm.Phones.length; i++) {
                    var phoneNumber = vm.Phones[i];
                    if (phoneNumber.IdPlanOption == '') {
                        vm.pricelist.push(0);
                    } else {
                        vm.pricelist.push(vm.plans.find(x => x.Id == phoneNumber.IdPlanOption).Value / 100);
                    }
                }
                vm.tempPhones = angular.copy(vm.Phones);
                vm.sp = 1;
                addHistory();
                vm.showLoader = false;
            })

                //post realizado com sucesso

                .catch(function (error) {
                    console.log('catch error');
                    console.log(error);
                    console.log(error.statusText); // mensagem de erro para tela, caso precise
                });

        }

        vm.onchecked = onchecked;
        function onchecked(position) {
            vm.Phones[position] = angular.copy(vm.tempPhones[position]);
            vm.data.customers[vm.parentlist[position].parent].Phones[vm.parentlist[position].child] =angular.copy( vm.Phones[position]);
            vm.showLoader = true;
            onTapSendUser(vm.data.customers[vm.parentlist[position].parent]);
        }

        vm.onunchecked = onunchecked;
        function onunchecked(position) {
            vm.tempPhones[position] = angular.copy(vm.Phones[position]);
            var id = vm.tempPhones[position].IdPlanOption;
            if (id == '' || id == null)
                vm.pricelist[position] = 0;
            else
                vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;

        }

        vm.onallchecked = onallchecked;
        function onallchecked() {
            vm.Phones = angular.copy(vm.tempPhones);
            for(var position=0;position<vm.Phones.length;position++){
                vm.data.customers[vm.parentlist[position].parent].Phones[vm.parentlist[position].child] =angular.copy( vm.Phones[position]);
            }
            vm.count = 0;
            vm.showLoader = true;
            onTapAllusers(vm.data.customers);
        }

        vm.onallunchecked = onallunchecked;
        function onallunchecked() {
            vm.tempPhones = angular.copy(vm.Phones);
            for (var position = 0; position < vm.tempPhones.length; position++) {
                var id = vm.tempPhones[position].IdPlanOption;
                if (id == '' || id == null)
                    vm.pricelist[position] = 0;
                else
                    vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
            }
        }

        vm.onedit = onedit;
        function onedit(position) {
            ViewModelUtilsService.showModalCustomer(vm.data.customers[vm.parentlist[position].parent], -1);
        }


        vm.changedFilterAll = changedFilterAll;
        function changedFilterAll() {
            // debugger
            if (vm.showall) {
                vm.search = "";
                vm.linhaAtiva = false;
                vm.claro = true;
                vm.vivo = true;
            }
        }

        vm.onUndo = onUndo;
        function onUndo() {
            vm.sp--;
            var tmp = angular.copy(vm.history[vm.sp - 1]);
            vm.tempPhones = tmp.phones;
            vm.pricelist = tmp.pricelist;
            for (var position = 0; position < vm.tempPhones.length; position++) {
                var id = vm.tempPhones[position].IdPlanOption;
      /*          if (id == '' || id == null)
                    vm.pricelist[position] = 0;
                else
                    vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
                    */
            }
        }

        vm.onRedo = onRedo;
        function onRedo() {
            vm.sp++;
            var tmp = angular.copy(vm.history[vm.sp - 1]);
            vm.tempPhones = tmp.phones;
            vm.pricelist = tmp.pricelist;
            for (var position = 0; position < vm.tempPhones.length; position++) {
                var id = vm.tempPhones[position].IdPlanOption;
                /*
                if (id == '' || id == null)
                    vm.pricelist[position] = 0;
                else
                    vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
                    */
            }
        }

        vm.addHistory = addHistory;
        function addHistory() {
            if (vm.history.length > vm.sp) {
                vm.history.splice(vm.sp, vm.history.length - vm.sp);
            }
            var tmpPhones = angular.copy(vm.tempPhones);
            var tmpPricelist = angular.copy(vm.pricelist);
            vm.history.push({ 'phones': tmpPhones, 'pricelist': tmpPricelist });
            vm.sp = vm.history.length;
        }

        vm.telephonechanged = telephonechanged;
        function telephonechanged($index) {
            //addHistory();
        }

        vm.activechanged = activechanged;
        function activechanged($index) {
            addHistory();
        }


        vm.changedPlano = changedPlano;
        function changedPlano(position, id) {
            if (id == '' || id == null){
                vm.pricelist[position] = 0;
                vm.tempPhones[position].price = 0;
            } else {
                vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
                vm.tempPhones[position].price = vm.plans.find(x => x.Id == id).Value / 100;
            }
            addHistory();
            autmaticSum();
        }

        vm.pricechanged = pricechanged;
        function pricechanged($index) {
            autmaticSum();
        }

        vm.nicknamechanged = nicknamechanged;
        function nicknamechanged($index) {
            addHistory();
        }

        vm.changedAutoSum = changedAutoSum;
        function changedAutoSum() {
            if (vm.autoSum) {
                //       autmaticSum();
            }
        }

        function autmaticSum() {
            if (vm.autoSum) {
                vm.singlePriceLocal = 0;
                for (var i = 0; i < vm.pricelist.length; i++) {
                    vm.singlePriceLocal += vm.pricelist[i] * 100;
                }
                vm.singlePriceLocal = vm.singlePriceLocal / 100;
            }
        }

        vm.onShowMore = onShowMore;
        function onShowMore() {
            if(vm.totalDisplayed<vm.tempPhones.length){
                vm.totalDisplayed+=50;
            }
        }

        vm.onfocusPreco = onfocusPreco;
        function onfocusPreco(position){
            vm.tempPrice = vm.pricelist[position];
        }

        vm.onBlurPreco = onBlurPreco;
        function onBlurPreco(position){
            if(vm.tempPrice != vm.pricelist[position]){
                addHistory();
            }
        }

        vm.PhonesAsc = PhonesAsc;
        function PhonesAsc(type) {
            if (type == 'NovoFormatoNumero') {
                $scope.sortType = 'NovoFormatoNumero';
                $scope.sortReverse = false;
            } else if (type == 'IdPlanOption') {
                $scope.sortType = 'IdPlanOption';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.IdPlanOption != '');
            } else if (type == 'NickName') {
                $scope.sortType = 'NickName';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.NickName != undefined);
            } else if (type == 'price'){
                $scope.sortType = 'price';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.price != '');
            }
        }

        vm.PhonesDesc = PhonesDesc;
        function PhonesDesc(type) {
            if (type == 'NovoFormatoNumero') {
                $scope.sortType = '-NovoFormatoNumero';
                $scope.sortReverse = false;
            } else if (type == 'IdPlanOption') {
                $scope.sortType = '-IdPlanOption';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.IdPlanOption != '');
            } else if (type == 'NickName') {
                $scope.sortType = '-NickName';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.NickName != undefined);
            } else if (type == 'price'){
                $scope.sortType = '-price';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.price != '');
            }
        }

        vm.onTapSendUser = onTapSendUser;
        function onTapSendUser(customer) {

            var customerSend = {
                "Id": customer.Id,
                "DocumentNumber": UtilsService.clearDocumentNumber(customer.DocumentNumber),
                "Register": customer.Register,
                "Name": customer.Name,
                "NickName": customer.NickName,
                "Email": customer.Email,
                "Born": customer.Born,
                "Gender": customer.Gender,
                "IdPlanOption": customer.IdPlanOption,
                "IdPagarme": customer.IdPagarme,
                "IdRole": customer.IdRole,
                "Adresses": customer.Adresses,
                "Phones": customer.Phones,
                "Photos": customer.Photos,
                "IdParent": customer.IdParent,
                "NameContactParent": customer.NameContactParent,
                "IdCommissionLevel": customer.IdCommissionLevel,
                "SinglePrice": vm.singlePriceLocal,
                "DescriptionSinglePrice": customer.DescriptionSinglePrice
            }

            FoneclubeService.postUpdateCustomer(customerSend).then(function(result){
                vm.showLoader = false;
            })
        };

        vm.onTapAllusers = onTapAllusers;
        function onTapAllusers(customers){
            for(var i =0;i<customers.length;i++){
                var customer = customers[i];
                var customerSend = {
                    "Id": customer.Id,
                    "DocumentNumber": UtilsService.clearDocumentNumber(customer.DocumentNumber),
                    "Register": customer.Register,
                    "Name": customer.Name,
                    "NickName": customer.NickName,
                    "Email": customer.Email,
                    "Born": customer.Born,
                    "Gender": customer.Gender,
                    "IdPlanOption": customer.IdPlanOption,
                    "IdPagarme": customer.IdPagarme,
                    "IdRole": customer.IdRole,
                    "Adresses": customer.Adresses,
                    "Phones": customer.Phones,
                    "Photos": customer.Photos,
                    "IdParent": customer.IdParent,
                    "NameContactParent": customer.NameContactParent,
                    "IdCommissionLevel": customer.IdCommissionLevel,
                    "SinglePrice": vm.singlePriceLocal,
                    "DescriptionSinglePrice": customer.DescriptionSinglePrice
                }
    
                FoneclubeService.postUpdateCustomer(customerSend).then(function(result){
                    vm.count++;
                    if(vm.count==vm.data.customers.length){
                        vm.showLoader = false;                        
                    }
                })
            }
        }
    }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CheckoutController', CheckoutController);

    CheckoutController.inject = ['$scope','PagarmeService', 'HubDevService', 'FoneclubeService', 'FileListUtil', 'MainUtils', '$q', '$cordovaCamera', '$cordovaFile', '$timeout', 'DialogFactory'];
    function CheckoutController($scope,PagarmeService, HubDevService, FoneclubeService, FileListUtil, MainUtils, $q, $cordovaCamera, $cordovaFile, $timeout, DialogFactory) {
        var vm = this;
        var personCheckout = {};
        personCheckout.Images = [];
        vm.images = [];
        vm.fotos = [];
        var listaImagens = [];
        console.log('=== CheckoutController Controller ===');

        vm.onTapPagar = onTapPagar;
        vm.statusTransaction = ''
        vm.validarCEP = validaCEP;
        vm.validarCPF = validaCPF;
        vm.fotoIdentidadeCamera = fotoIdentidadeCamera;
        vm.uploadIdentidadeGaleria = uploadIdentidadeGaleria;
        vm.uploadIdentidadeCamera = uploadIdentidadeCamera;
        vm.OperatorsSelecteds = [];
        vm.addCheckout = addCheckout;
        vm.onRegisterTap = onRegisterTap;        

        init();

        function init(){

            faseCadastro();

            FoneclubeService.getPlans().then(function(result){
                vm.plans = result;
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
            });
           FoneclubeService.getOperators().then(function(result){
                vm.operators = result;
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
                DialogFactory.showMessageDialog({mensagem:error.statusText})                
            });
        }

        function onRegisterTap(){

                //limpando, assim chega na api

                //todo fix temp
                try{
                    var cellNumber = vm.UserCellphone.replace('-', '').replace(' ', '');
                }
                catch(e){
                    DialogFactory.showMessageDialog({mensagem:'Informações pendentes'})                       
                }

                var personCheckout = {
                    'DocumentNumber': vm.register,
                    'Name': vm.name,
                    'Nickname':vm.Nickname,
                    'Email': vm.email,
                    'Born': vm.birthdate,
                    'Gender': 1,
                    'IdPagarme': 100,
                    'IdPlanOption': 4,
                    'IdContactParent': 999999999, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou
                    'Adresses': [
                    {
                    'Street': vm.street,
                    'Complement': vm.complement,
                    'StreetNumber': vm.street_number,
                    'Neighborhood': vm.neighborhood,
                    'City': vm.city,
                    'State': vm.uf,
                    'Cep': vm.zipcode
                    }
                ],
                "Images": listaImagens,
                'Phones': [
                    {
                    // 'Id': 1,
                    'DDD': vm.UserDDD,
                    'Number': cellNumber
                    }
                ]
                };

                console.log(personCheckout)
            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
                DialogFactory.showMessageDialog({mensagem:'Cadastro realizado'})                    

                if(result)
                    fasePagamento();
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
                DialogFactory.showMessageDialog({mensagem:error.statusText})                    
            });

        }

        /*
        function onRegisterTap(){

                personCheckout.DocumentNumber = vm.register;
                personCheckout.Name = vm.name;
                personCheckout.Email = vm.email;
                personCheckout.Born = vm.birthdate;
                personCheckout.Gender = 1; // todo
                personCheckout.IdPagarme = vm.register; //vai ser limado
                personCheckout.IdPlanOption = parseInt(vm.plan);
                personCheckout.IdContactParent = 21999999999; //vm.contactParent, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou

                personCheckout.Adresses = [
                    {
                        'Street': vm.street,
                        'Complement': vm.complement,
                        'StreetNumber': vm.street_number,
                        'Neighborhood': vm.neighborhood,
                        'City': vm.city,
                        'State': vm.uf,
                        'Cep': vm.zipcode
                    }
                ];

                personCheckout.Phones = [
                    {
                    'DDD': vm.ddd,
                    'Number': vm.number
                    }
                ];


                console.log(personCheckout)

                if(!personCheckout.DocumentNumber || !personCheckout.Name || !personCheckout.Email
                || !personCheckout.Born || !personCheckout.IdPlanOption || !personCheckout.IdContactParent
                || !personCheckout.Adresses[0].Street || !personCheckout.Adresses[0].StreetNumber
                || !personCheckout.Adresses[0].City || !personCheckout.Adresses[0].Cep || !personCheckout.Adresses[0].State
                || !personCheckout.Phones[0].DDD || !personCheckout.Phones[0].Number)
                {
                    //trocar forma de aviso
                    vm.statusTransaction = "Existe pendência de campo a ser preenchido";
                    return;
                }

            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
                vm.statusTransaction = result;
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
                vm.statusTransaction = error.statusText;
            });

        }
        */

        function uploadIdentidadeGaleria(){
            console.log('uploadIdentidadeGaleria')
            var file = FileListUtil.get();

            if(!file)
             return;

            uploadFile(file).then(function(result){
                personCheckout.Images.push(result.filename);
                listaImagens.push(result.filename);
            });

        }

        function uploadIdentidadeCamera(param){
            if(vm.fotos.length > 0)
            {
                startListUpload(vm.fotos);
            }
            else
            {
                alert('não tem foto tirada')
            }
        }


        function addCheckout(){

        console.log('addCheckout');

        //esse ´o objeto checkout que vamos montar a partir do form
        //se o document number for repetido não funciona ( ver catch )
           var personCheckout = {
                    'DocumentNumber': vm.register,
                    'Name': vm.name,
                    'Email': vm.email,
                    'Born': vm.birthdate,
                    'Gender': 1, //??
                    'IdPagarme': 100, //??
                    'IdPlanOption': vm.plan,
                    'IdContactParent': 999999999, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou
                    'Adresses': [
                    {
                    'Street': vm.street,
                    'Complement': vm.complement,
                    'StreetNumber': vm.street_number,
                    'Neighborhood': vm.neighborhood,
                    'City': vm.city,
                    'State': vm.uf,
                    'Cep': vm.zipcode
                    }
                ],
                // "Images": [
                //    vm.HoldingRg.url, //aqui vão os guids
                //    vm.rg.url
                // ],
                'Phones': [
                    {
                    'DDD': vm.ddd,
                    'Number': vm.number
                    }
                ]
                };

                // debugger;
            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
            });
        }



        function validaCEP(cepInput){
            var cep = cepInput.replace(/[-.]/g , '');
            if(cep.length < 8)
                return;
            var showLoader = DialogFactory.showLoader('Tentando preencher dados...');            

            HubDevService.validaCEP(cep)
            .then(function(result){
             vm.street = result.info.logradouro;
             vm.neighborhood = result.info.bairro;
             vm.city = result.info.cidade;
             vm.uf = result.info.uf;
            showLoader.close();
             console.log(result);

            },
            function(error){
                showLoader.close();
            });
        }

         function validaCPF(cpfInput, birthdate){

                console.log(cpfInput.length)
                if(cpfInput.length <= 6)
                    return;


                var patternValidaData =/^([0-9]{2})\/([0-9]{2})\/([0-9]{4})$/;
                if(!patternValidaData.test(birthdate)){
                    DialogFactory.showMessageDialog({mensagem: 'Data Inválida'});                    
                    return;
                }


                var showLoader = DialogFactory.showLoader('Tentando preencher dados...');                

                var cpf = cpfInput.replace(/[-.,]/g , '');
                HubDevService.validaCPF(cpf,birthdate)
                .then(function(result){
                   if(result.status){
                       vm.name = result.result.nome_da_pf;
                   }
                     showLoader.close();
                },
            function(error){
            showLoader.close();
            });
        }

        function onTapPagar(){


            console.log(' --- onTapPagar ');
            vm.statusTransaction = 'Iniciando transação';



            try
            {

                var expirationMonth = vm.cardExpirationMonth;

                if(vm.cardExpirationMonth < 10)
                {
                    expirationMonth = '0' + vm.cardExpirationMonth;
                }

                var cardData = {
                    cardHolderName: vm.cardHolderName.toUpperCase(),
                    cardExpirationMonth: expirationMonth,
                    cardExpirationYear: vm.cardExpirationYear,
                    cardNumber: vm.cardNumber,
                    cardCVV:vm.cardCVV
                }
            }
            catch(erro){
                DialogFactory.showMessageDialog({mensagem: 'Existe campo vazio'});                
                return;
            }

            try
            {
                var customer = {
                    'name' : vm.name,
                    'document_number' : vm.register.toString(),
                    'email' : vm.email,
                    'birthdate' : vm.birthdate,
                    'nickname': vm.Nickname,
                    'user_cellphone': vm.UserCellphone,
                    'plan': vm.plan,
                    'actual_mobile_operators': {
                        'vivo': vm.Vivo,
                        'tim': vm.Tim,
                        'nextel': vm.Nextel,
                        'claro': vm.Claro,
                        'oi': vm.Oi,
                        'other': vm.Other
                    },
                    'front_and_back': vm.Yes == undefined ? false : vm.Yes
                    ,
                    'sugestions': vm.sugestions,
                    'foneClub_new_operators': {
                        'vivo': vm.VivoActual,
                        'claro': vm.ClaroActual
                    },
                    'invite' : {
                        'name': vm.whoinvite,
                        'number': vm.contactParent
                    },
                    'address' : {
                        'street' : vm.street,
                        'street_number' : vm.street_number,
                        'neighborhood' : vm.neighborhood,
                        'zipcode' : vm.zipcode,
                        'city': vm.city,
                        'uf': vm.uf

                    },
                    'phone' : {
                        'ddd' : vm.ddd.toString(),
                        'number' : vm.number.toString()
                    }

                }

                console.log(customer);

                var patternValidaData =/^([0-9]{2})\/([0-9]{2})\/([0-9]{4})$/;
                if(!patternValidaData.test(customer.birthdate)){
                    DialogFactory.showMessageDialog({mensagem: 'Data inválida'});                        
                    return;
                }

                var cpf = customer.document_number.replace(/[-.,]/g , '');
                HubDevService.validaCPF(cpf,customer.birthdate)
                .then(function(result){
                    console.log(result);
                    if(result.status){
                        var validaCamposReturn = {
                            success: true,
                            msg: 'Cpf válido'
                        }
                    }else{
                        DialogFactory.showMessageDialog({mensagem: 'CPF inválido'});                                       
                       return;
                    }
                });


            }
            catch(erro){
                console.log(erro)
                DialogFactory.showMessageDialog({mensagem: 'Existe campo vazio'});                        

                return;
            }

            PagarmeService.generateCardHash(cardData).then(function(cardHash){

                vm.statusTransaction = 'Criptografando dados cartão';

                PagarmeService.postTransactionCard(vm.amount, cardHash, customer)
                .then(function(result){


                    vm.statusTransaction = 'Transação em andamento';


                    PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){

                        vm.statusTransaction = 'Transação concluída';
                    })
                    .catch(function(error){
                        try{
                            DialogFactory.showMessageDialog({mensagem: 'Erro na captura da transação' + error.status});                                
                        }
                        catch(erro){
                            DialogFactory.showMessageDialog({mensagem: 'Erro na captura da transação'});                              
                        }
                        console.log(error);

                    });


                })
                .catch(function(error){
                    try{
                        DialogFactory.showMessageDialog({mensagem: 'Erro na transação'});                            
                        console.log(error.data.errors)

                        error.data.errors.forEach(function(erro) {
                            DialogFactory.showMessageDialog({mensagem: 'Erro na transação: ' + erro.message});                                
                        }, this);

                    }
                    catch(erro){
                        DialogFactory.showMessageDialog({mensagem: 'Erro na transação'});                                
                    }

                    console.log(error);
                });


            })
            .catch(function(error){
                var erro;
                for(var i in error)
                {

                    erro = error[i];
                }
                DialogFactory.showMessageDialog({mensagem: 'Erro na transação: ' + erro});      

            });

        }

         function uploadFile(file){
             console.log('-- uploadFile')
            var q = $q.defer();
            console.log(file)
            var showLoader = DialogFactory.showLoader('Enviando...');            

            var imageUploader = new ImageUploader();
            imageUploader.push(file)
            .then((data) => {
                console.debug('Upload complete. Data:', data);
                DialogFactory.showMessageDialog({mensagem: 'Imagem enviada com sucesso.'});                      
                showLoader.close();
                 q.resolve(data);
            })
            .catch((err) => {
                console.error(err);
                DialogFactory.showMessageDialog({mensagem: 'Não foi possivel enviar imagens'});                
                showLoader.close();
                q.reject(error);
            });
            return q.promise;
        }

        function faseCadastro(){
            vm.faseCadastro = true;
            vm.fasePagamento = false;
        }

        function fasePagamento(){
            vm.faseCadastro = false;
            vm.fasePagamento = true;
        }

        function fotoIdentidadeCamera() {

            console.log('fotoIdentidadeCamera')
            // 2
            var options = {
                destinationType : Camera.DestinationType.FILE_URI,
                sourceType : Camera.PictureSourceType.CAMERA, // Camera.PictureSourceType.PHOTOLIBRARY
                allowEdit : false,
                encodingType: Camera.EncodingType.JPEG,
                popoverOptions: CameraPopoverOptions,
            };

            // 3
            $cordovaCamera.getPicture(options).then(function(imageData) {

                console.log('cordovaCamera.getPicture')
                console.log(imageData)
                // 4
                onImageSuccess(imageData);

                function onImageSuccess(fileURI) {
                    createFileEntry(fileURI);
                }

                function createFileEntry(fileURI) {
                    window.resolveLocalFileSystemURL(fileURI, copyFile, fail);
                }

                // 5
                function copyFile(fileEntry) {
                    var newName = MainUtils.guid() + '.jpg'; //todo fazer tratamento pra nome jpg /png

                    window.resolveLocalFileSystemURL(cordova.file.dataDirectory, function(fileSystem2) {
                        fileEntry.copyTo(
                            fileSystem2,
                            newName,
                            onCopySuccess,
                            fail
                        );
                    },
                    fail);
                }

                // 6
                function onCopySuccess(entry) {
                    console.log('onCopySuccess ' );
                    console.log(entry.nativeURL);
                    var listName = entry.nativeURL.split('/');

                    vm.fotos.push(entry.nativeURL);
                    listaImagens.push(listName[listName.length - 1]);

                    $scope.$apply(function () {
                        vm.images.push(entry.nativeURL);
                    });

                    startListUpload(vm.fotos);

                }

                function fail(error) {
                    console.log("fail: " + error.code);
                }

                function makeid() {
                    var text = "";
                    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

                    for (var i=0; i < 5; i++) {
                        text += possible.charAt(Math.floor(Math.random() * possible.length));
                    }
                    return text;
                }

            }, function(err) {
                console.log(err);
            });


        }

        function startListUpload(photos){

            var showLoader = DialogFactory.showLoader('Enviando...');            

            if(photos.length > 0)
            {
                var lastItemIndex = photos[photos.length - 1];
                uploadImagePath(lastItemIndex).then(function(result){
                    if(result)
                        continueListUpload(vm.fotos);

                });
            }
            else
            {

                showLoader.close();
                DialogFactory.showMessageDialog({mensagem: 'Imagem enviada com sucesso'});                
            }
        }

        function continueListUpload(photos){
            photos.pop();
            startListUpload(vm.fotos);
        }

        function uploadImagePath(path){

            var q = $q.defer();

            var guidName = MainUtils.guid();

            MainUtils.pathToDataURI(path, function(dataUri) {

                var blob = MainUtils.dataURIToBlob(dataUri);
                blob.name = guidName.concat('.jpg');

                MainUtils.uploadFile(blob).then(function(result){
                    personCheckout.Images.push(blob.name);
                    q.resolve(true);
                }).catch(function(result){
                    q.resolve(false);
                });
            });

            return q.promise;
        }       


    }
})();
(function () {
  'use strict';

  angular.module('foneClub').controller('CustomersController', CustomersController);

  CustomersController.inject = [
    // 'PagarmeService',
    'DialogFactory',
    '$scope',
    'ViewModelUtilsService',
    'FoneclubeService',
    // 'MainUtils',
    // 'DataFactory',
    'FlowManagerService',
    'localStorageService',
    // '$templateCache',
    'NgTableParams',
    // '$state',
    // '$rootScope',
    // '$stateParams',
    'UtilsService',
    // 'ngTableDefaults'
    '$filter'
  ];
  function CustomersController(
    // PagarmeService,
    DialogFactory,
    $scope,
    ViewModelUtilsService,
    FoneclubeService,
    // MainUtils,
    // DataFactory,
    FlowManagerService,
    localStorageService,
    // $templateCache,
    NgTableParams,
    // $state,
    // $rootScope,
    // $stateParams,
    UtilsService,
    // ngTableDefaults
    $filter
  ) {
    console.log('=== Customers Controller ===');

    var vm = this;
    var checkvalidate = localStorageService.get('userid');

    var customerPerPage = 50;

    vm.filters = {
      active: false,
      inactive: false,
      regerror: false,
      all: true,
      excludeFather: false,
      excludeAddress: false,
      search: ''
    };

    vm.totalDisplayedCustomers = 1;

    vm.data = {};
    vm.onTapSwitchActivate = onTapSwitchActivate;
    vm.onTapCustomer = onTapCustomer;
    vm.onTapCustomerEdit = onTapCustomerEdit;
    vm.onTapRepeatLastCharge = onTapRepeatLastCharge;
    vm.onTapBoleto = onTapBoleto;
    vm.onTapBoletoPayment = onTapBoletoPayment;
    vm.onTapDebito = onTapDebito;
    vm.onTapNewCardPayment = onTapNewCardPayment;
    vm.onTapExcluir = onTapExcluir;
    vm.onDeleteCustomer = onDeleteCustomer;
    vm.onTapComment = onTapComment;
    vm.onTapMessage = onTapMessage;
    vm.onTapFlag = onTapFlag;

    initialize();

    function initialize() {
      if (checkvalidate == null) {
        FlowManagerService.changeLoginView();
      }


      FoneclubeService.getAllCustomers(false).then(function (result) {
        vm.data.customers = result.map(function (user) {
          user.Phones = user.Phones.map(function (phone) {
            if (phone) {
              phone.phoneFull = phone.DDD.concat(phone.Number);
            }
            return phone;
          });
          return user;
        });
        var customersSemSoftDelete = [];
        for (var i in vm.data.customers) {
          var customer = vm.data.customers[i];
          if (!customer.SoftDelete) {
            customer.PhoneDDDParent = null;
            customer.PhoneNumberParent = null;
            for (var i in customer.Phones) {
              if (customer.Phones[i]) {
                if (!customer.Phones[i].IsFoneclube) {
                  customer.Phones.splice(i, 1);
                }
              }
            }

            customersSemSoftDelete.push(customer);
          }
        }

        vm.tableParams = createUsingFullOptions(customersSemSoftDelete);
        vm.tableParams.reload();

        // FoneclubeService.getAllCustomers(false).then(function (result) {

        //   debugger;
        //   vm.data.customers = result.map(function (user) {
        //     user.Phones = user.Phones.map(function (phone) {
        //       phone.phoneFull = phone.DDD.concat(phone.Number);
        //       return phone;
        //     });
        //     return user;
        //   });

        //   var customersSemSoftDelete = [];
        //   for (var i in vm.data.customers) {
        //     var customer = vm.data.customers[i];
        //     if (!customer.SoftDelete) {
        //       customer.PhoneDDDParent = null;
        //       customer.PhoneNumberParent = null;
        //       for (var i in customer.Phones) {
        //         if (!customer.Phones[i].IsFoneclube) {
        //           customer.Phones.splice(i, 1);
        //         }
        //       }

        //       customersSemSoftDelete.push(customer);
        //     }
        //   }

        //   // debugger;
        //   vm.tableParams = createUsingFullOptions(customersSemSoftDelete);
        //   vm.tableParams.reload();
        // });
      });
    }

    /* Deprecated since 09-02-2019 | Ariê Furtado 
    $scope.$watch('vm.searchUser', function() {
      try {
        var search = vm.searchUser.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~]/g, '');
        var isnum = /^\d+$/.test(search.replace(' ', ''));

        if (isnum) vm.searchIgnoreAccent = search.replace(' ', '');
        else vm.searchIgnoreAccent = search;

        // debugger;
        vm.tableParams.filter({ $: vm.searchIgnoreAccent });
        vm.tableParams.reload();
      } catch (e) {}
    }); */

    function onDeleteCustomer(customer) {
      var r = confirm('Deseja fazer um soft delete nesse cliente?');
      if (r == true) {
        FoneclubeService.postSoftDeleteCustomer(customer).then(function (result) {
          if (result) {
            alert('Cliente deletado');
            customer.SoftDelete = true;
          }
        });
        /* .catch(function(error) {
            console.log(error);
          }); */
      } else {
        txt = 'You pressed Cancel!';
      }
    }

    function createUsingFullOptions(customers) {
      return new NgTableParams(
        {
          count: customerPerPage, // initial page size
          filter: vm.filters
        },
        {
          // determines the pager buttons (left set of buttons in demo)
          paginationMaxBlocks: 10,
          paginationMinBlocks: 1,
          dataset: customers,
          getData: function (params) {
            var search = vm.filters.search;
            var filtered = getFilteredCustomers(customers, params);

            if (search && search !== '') {
              search = normalizeText(search);// search.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~]/g, '');

              //var isnum = /^\d+$/.test(value.replace(' ', ''));

              // filtered = $filter('filter')(filtered, {
              //   Name: isnum ? value.replace(' ', '') : value
              // });
              search = search.toLowerCase();
              filtered = $filter('filter')(filtered, function (data) {
                if (search) {
                  return data.Name.toLowerCase().indexOf(search) > -1 ||
                    data.Email.toLowerCase().indexOf(search) > -1 ||
                    (data.DocumentNumber ? data.DocumentNumber.toLowerCase().indexOf(search) > -1 : false) ||
                    (data.NickName ? data.NickName.toLowerCase().indexOf(search) > -1 : false) ||
                    (data.Born ? data.Born.toLowerCase().indexOf(search) > -1 : false) ||
                    (data.IdPagarme ? data.IdPagarme.toString().indexOf(search) > -1 : false) ||
                    matchPhone(data.Phones, search) ||
                    (!vm.filters.excludeAddress ? matchAddress(data.Addresses, search) : false) ||
                    (!vm.filters.excludeFather ? (data.NameParent ? data.NameParent.toLowerCase().indexOf(search) > -1 : false) : false);
                } else {
                  return true;
                }
              });
            }

            params.settings({
              counts: filtered.length > customerPerPage ? [50, 100, 500] : [],
              total: filtered.length
            });

            filtered = filtered.slice(
              (params.page() - 1) * params.count(),
              params.page() * params.count()
            );

            vm.totalDisplayedCustomers = filtered.length;

            return filtered;
          }
        }
      );
    }

    function matchPhone(phones, numberToCompare) {
      numberToCompare = numberToCompare.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~' 'éá]/g, '');
      if (phones && phones.length > 0) {
        if (phones[0] == null) {
          return false;
        } else {
          var phone = $filter('filter')(phones, function (data) {
            return (data.Number ? ("55" + data.DDD + data.Number.toString()).indexOf(numberToCompare) > -1 : false);
          });

          return phone.length > 0;
        }
      }

      return false;
    }
    function matchAddress(addresses, address) {
      if (addresses && addresses.length > 0) {
        if (addresses[0] == null) {
          return false;
        } else {
          var address = $filter('filter')(addresses, function (data) {
            data.Street = normalizeText(data.Street);
            return (data.Street ? data.Street.toLowerCase().indexOf(address) > -1 : false);
          });

          return address.length > 0;
        }
      }

      return false;
    }
    function normalizeText(text) {
      var weird = 'öüóőúéáàűíÖÜÓŐÚÉÁÀŰÍçÇ';
      var normalized = 'ouooueaauiOUOOUEAAUIcC';
      var idoff = -1, new_text = '';
      var lentext = text.toString().length - 1

      for (i = 0; i <= lentext; i++) {
        if (text[i].trim() == "+") {
          new_text += text[i];
        }
        else {
          idoff = weird.search(text.charAt(i));
          if (idoff == -1 || text.charAt(i) == ".") {
            new_text = new_text + text.charAt(i);
          } else {
            new_text = new_text + normalized.charAt(idoff);
          }
        }
      }

      return new_text;
    }

    function getFilteredCustomers(customers) {
      if (vm.filters.active) {
        customers = $filter('customerBy')(customers, 'active');
      }

      if (vm.filters.inactive) {
        customers = $filter('customerBy')(customers, 'inactive');
      }

      if (vm.filters.regerror) {
        customers = $filter('customerBy')(customers, 'regerror');
      }

      return customers;
    }

    //////////////////////////////////////////////////
    // Eventos de tap
    function onTapSwitchActivate(c) {
      // console.log(c);

      var oldValue = angular.copy(c.Desativo);

      var customer = {
        Id: c.Id,
        Desativo: !c.Desativo
      };

      var confirmMessage = `
        <span class="text-center">
          Tem certeza que deseja ${c.Desativo ? 'ativar' : 'desativar'} esse cliente?
        </span>
      `;

      // TODO: confirm dialog
      ViewModelUtilsService.showConfirmDialog('Atenção!', confirmMessage).then(function (
        confirm
      ) {
        if (confirm) {
          c.Desativo = customer.Desativo;

          FoneclubeService.postPersonAtivity(customer).then(function (result) {
            if (!result) {
              customer.Desativo = oldValue;
            }
          });
        }
      });
    }

    function onTapCustomerEdit(customer, index) {
      FlowManagerService.changeEdicaoView(customer);
    }

    function onTapCustomer(customer, index) {
      ViewModelUtilsService.showModalCustomer(customer, index);
    }

    function onTapComment(customer) {
      ViewModelUtilsService.showModalComment(customer);
    }

    /* Not used! | Ariê Furtado
    function clearDocumentField(documentNumber) {
      vm.documentClear = UtilsService.clearDocumentNumber(documentNumber);
    } */

    function onTapNewCardPayment(customer) {
      ViewModelUtilsService.showModalNewCardPayment(customer);
    }

    function onTapBoletoPayment(customer) {
      ViewModelUtilsService.showModalBoletoPayment(customer);
    }

    function onTapBoleto(customer) {
      ViewModelUtilsService.showModalBoleto(customer);
    }

    function onTapDebito(customer) {
      ViewModelUtilsService.showModalDebito(customer);
    }

    function onTapRepeatLastCharge(customer) {
      FoneclubeService.getLastPaymentType(customer).then(function (result) {
        if (result['intIdPaymentType'] == 1) {
          ViewModelUtilsService.showModalRepeatCard(result, customer);
        }
      }); /* 
        .catch(function(error) {
          console.log('catch error');
          console.log(error);
        }); */
    }

    function onTapExcluir(customer) {
      var personCheckout = {
        DocumentNumber: customer.DocumentNumber
      };
      DialogFactory.dialogConfirm({
        mensagem:
          'Atenção essa ação irá excluir o cliente da base foneclube, após exclusão não terá volta, deseja proseguir?'
      }).then(function (value) {
        if (value) {
          FoneclubeService.postDeletePerson(personCheckout).then(function (result) {
            if (result) {
              DialogFactory.showMessageDialog({
                message:
                  'Usuário foi removido com sucesso, no próximo carregamento da lista ele não será mais exibido'
              });
              closeThisDialog(0);
            } else DialogFactory.showMessageDialog({ message: 'Usuário não foi removido, guarde o documento dele: ' + customer.DocumentNumber });
          }); /* 
            .catch(function(error) {
              console.log('catch error');
              console.log(error);
            }); */
        }
      });
    }

    //open whatsapp messages box
    function onTapMessage(customer) {
      ViewModelUtilsService.showModalWhatsapp(customer);
    }

    function onTapFlag(customer) {
      ViewModelUtilsService.showModalFlag(customer);
    }

  }
})();

(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('EstoqueController', EstoqueController);
    
      EstoqueController.inject = ['FlowManagerService', 'FoneclubeService', 'PagarmeService', 'NgTableParams', '$scope'];
      function EstoqueController(FlowManagerService, FoneclubeService, PagarmeService, NgTableParams, $scope) {
            
        var vm = this;
        vm.result;

        // https://codepen.io/cardozo/pen/QVYXeX    
        FoneclubeService.getLinhasEstoque().then(function(result){

            FoneclubeService.getStatusTelefonesOperadora().then(function (result) {
                
                for(var i in vm.result)
                {
                    var telefone = vm.result[i].linhaLivreOperadora;
                    vm.result[i].usoLinha = "Sem dados na SP";
                    vm.result[i].plano = "Sem dados na SP";
                    vm.result[i].divergente = -1;

                    for(var r in result){
                        if(telefone == result[r].phone){

                            var operadora; 
                            if(result[r].operadora == 1)
                            {
                                operadora = 'CLARO'
                            } 
                            else if(result[r].operadora == 2)
                            {
                                operadora = 'VIVO'
                            }

                            vm.result[i].plano = operadora + " " + result[r].plano;
                            vm.result[i].usoLinha = result[r].usoLinha ? "Sim" : "Não";
                        }
                    }
                }

                vm.result
                // debugger;
                
            })
            

            for(var i in result){
                if(result[i].operadora == 1)
                    result[i].operadoraDescription = 'CLARO'
                else
                    result[i].operadoraDescription = 'VIVO'
            }

            vm.result = result

            vm.initialParams = {
                count: 1000 // initial page size
              };
            vm.initialSettings = {
            // page size buttons (right set of buttons in demo)
            counts: [50,100,500, 1000],
            // determines the pager buttons (left set of buttons in demo)
            paginationMaxBlocks: 10,
            paginationMinBlocks: 1,
            dataset: vm.result
            };

            vm.tableParams = new NgTableParams(vm.initialParams, vm.initialSettings)
            // debugger
        })

        
        $scope.$watch("vm.tableParams", function () {
            
            console.log('Works')
        });
        
    
      }
    })();
    
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('HomeController', HomeController);

    HomeController.inject =
    [
        '$scope',
        '$cordovaCamera',
        '$cordovaFile',
        '$ionicLoading',
        'FileListUtil',
        'MainUtils',
        'FoneclubeService',
        '$q',
        '$rootScope',
        'MainComponents'
    ];

    function HomeController($scope, $cordovaCamera, $cordovaFile, $ionicLoading, FileListUtil, MainUtils, FoneclubeService, $q, $rootScope, MainComponents) {
        var vm = this;
        console.log('=== HomeController Controller ===');
        vm.images = [];
        vm.fotos = [];
        vm.addCheckout = addCheckout;
        vm.addPhoto = addPhoto;
        vm.urlForImage = urlForImage;
        vm.testeData = testeData;        

        var imageUploader = new ImageUploader();
        vm.result = {};
        vm.uploadGaleria = uploadGaleria;
        vm.version = MainComponents.getVersion();

        function addCheckout(){

            console.log('addCheckout');

            //esse ´o objeto checkout que vamos montar a partir do form
            //se o document number for repetido não funciona ( ver catch )
           var personCheckout = {
                    'DocumentNumber': '12345678946',
                    'Name': 'Teste de pessoa',
                    'Email': 'teste@teste.com.br',
                    'Born': '08/11/1988',
                    'Gender': 1,
                    'IdPagarme': 100,
                    'IdPlanOption': 4,
                    'IdContactParent': 999999999, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou
                    'Adresses': [
                    {
                    'Street': 'sample string 1',
                    'Complement': 'sample string 2',
                    'StreetNumber': '100',
                    'Neighborhood': 'sample string 4',
                    'City': 'sample string 5',
                    'State': 'sample string 6',
                    'Cep': 'sample string 7'
                    }
                ],
                "Images": [
                    "sample string 1", //aqui vão os guids
                    "sample string 2"
                ],
                'Phones': [
                    {
                    'Id': 1,
                    'DDD': '21',
                    'Number': '22222222'
                    }
                ]
                };


            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
            });
        }

        //TODO MainUtils.guid()
        // colocar nome das imagens id de usuario mais guid
        // remover imagens caso de troca

        function urlForImage(imageName) {

            var name = imageName.substr(imageName.lastIndexOf('/') + 1);
            var trueOrigin = cordova.file.dataDirectory + name;

            console.log("get correct path for image " + imageName);
            console.log("origin " + trueOrigin);
            return trueOrigin;
        }

        function addPhoto() {

            console.log('addPhoto')
            // 2
            var options = {
                destinationType : Camera.DestinationType.FILE_URI,
                sourceType : Camera.PictureSourceType.CAMERA, // Camera.PictureSourceType.PHOTOLIBRARY
                allowEdit : false,
                encodingType: Camera.EncodingType.JPEG,
                popoverOptions: CameraPopoverOptions,
            };

            // 3
            $cordovaCamera.getPicture(options).then(function(imageData) {

                console.log('cordovaCamera.getPicture')
                console.log(imageData)
                // 4
                onImageSuccess(imageData);

                function onImageSuccess(fileURI) {
                    createFileEntry(fileURI);
                }

                function createFileEntry(fileURI) {
                    window.resolveLocalFileSystemURL(fileURI, copyFile, fail);
                }

                // 5
                function copyFile(fileEntry) {
                    var newName = MainUtils.guid() + '.jpg'; //todo fazer tratamento pra nome jpg /png

                    window.resolveLocalFileSystemURL(cordova.file.dataDirectory, function(fileSystem2) {
                        fileEntry.copyTo(
                            fileSystem2,
                            newName,
                            onCopySuccess,
                            fail
                        );
                    },
                    fail);
                }

                // 6
                function onCopySuccess(entry) {
                    console.log('onCopySuccess ' );
                    console.log(entry.nativeURL);
                    vm.fotos.push(entry.nativeURL);


                    $scope.$apply(function () {
                        vm.images.push(entry.nativeURL);
                    });
                }

                function fail(error) {
                    console.log("fail: " + error.code);
                }

                function makeid() {
                    var text = "";
                    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

                    for (var i=0; i < 5; i++) {
                        text += possible.charAt(Math.floor(Math.random() * possible.length));
                    }
                    return text;
                }

            }, function(err) {
                console.log(err);
            });


        }


        ////////////////////////////
        function uploadGaleria(param) {
            var file = FileListUtil.get();
            uploadFile(file);
        };

        function testeData(){
            if(vm.fotos.length > 0)
            {
                startListUpload(vm.fotos);
            }
            else
            {
                alert('não tem foto tirada')
            }
        }

        function startListUpload(photos){

            $ionicLoading.show({
                template: 'Uploading...'
            });

            if(photos.length > 0)
            {
                var lastItemIndex = photos[photos.length - 1];
                uploadImagePath(lastItemIndex).then(function(result){
                    if(result)
                        continueListUpload(vm.fotos);

                });
            }
            else
            {
                $ionicLoading.hide();
            }
        }

        function continueListUpload(photos){
            photos.pop();
            startListUpload(vm.fotos);
        }

        function uploadImagePath(path){

            var q = $q.defer();

            var guidName = MainUtils.guid();

            MainUtils.pathToDataURI(path, function(dataUri) {

                var blob = MainUtils.dataURIToBlob(dataUri);
                blob.name = guidName.concat('.jpg');

                MainUtils.uploadFile(blob).then(function(result){
                    q.resolve(true);
                }).catch(function(result){
                    q.resolve(false);
                });
            });

            return q.promise;
        }

        function uploadFile(file){

            console.log('upload file')
            console.log(file)

            $ionicLoading.show({
                template: 'Carregando...'
            });

            var imageUploader = new ImageUploader();
            imageUploader.push(file)
            .then((data) => {
                console.debug('Upload complete. Data:', data);
                $ionicLoading.hide();
                $scope.$digest();
            })
            .catch((err) => {
                console.error(err);
                $ionicLoading.hide();
            });
        }

      window.location.href = "#/tab/customers";

        ////////////////////////////

    }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CheckoutCustomerModalController', CheckoutCustomerModalController);

    CheckoutCustomerModalController.inject = ['ViewModelUtilsService', 'PagarmeService'];
    function CheckoutCustomerModalController(ViewModelUtilsService, PagarmeService) {
        var vm = this;
        var customer = ViewModelUtilsService.modalData;
        vm.onTapCard = onTapCard;
        vm.onTapPagar = onTapPagar;
        vm.cancelarPagamento = etapaEscolhaCartao;        
        initCardList();
        etapaEscolhaCartao();

        function initCardList(){
            console.log(customer.id)
            PagarmeService.getCard(customer.id)
            .then(function(result){
                vm.cards = result;
                console.log(result)
            })
            .catch(function(error){
                console.log(error);
                vm.message = 'falha ao recuperar cartão';
            });

        }

        function onTapCard(card){

            vm.card = card;
            etapaQuantia();

        }

        function onTapPagar(){

            vm.message = 'Transação iniciada';
            var customer;

            if(!vm.customer.address || !vm.customer.phone || !vm.customer.email || !vm.customer.document_number || !vm.customer.name)
            {
                customer = {
                    'name' : vm.customer.name,
                    'document_number' : vm.customer.document_number,
                    'email' : vm.customer.email
                    ,
                    'address' : {
                        'street' : 'empty',
                        'street_number' : '10',
                        'neighborhood' : 'empty',
                        'zipcode' : '01452000'
                    },
                    'phone' : {
                        'ddd' : '00',
                        'number' : '000000000'
                    }
                }
                //vm.message = 'Usuário incompleto';
            }

            console.log('on tap pagar');
            console.log(vm.card.id);
            console.log(vm.customer);
            console.log(vm.amount);
            console.log(customer);

             PagarmeService.postTransactionExistentCard(vm.amount, vm.card.id, customer)
             .then(function(result){
                console.log('nova transac ' + result);
                vm.message = 'Transação efetuada';
                PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){

                        vm.message = 'Transação concluída';
                    })
                    .catch(function(error){
                        try{
                            vm.message = 'Erro na captura da transação' + error.status;
                        }
                        catch(erro){
                            vm.message = 'Erro na captura da transação'
                        }
                        console.log(error);

                    });
             })


            console.log(customer)


        }

        function etapaEscolhaCartao(){
            vm.etapaEscolhaCartao = true;
            vm.etapaQuantia = false;
            vm.amount = '';
        }

        function etapaQuantia(){
            vm.etapaEscolhaCartao = false;
            vm.etapaQuantia = true;
        }
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CustomerListController', CustomerListController);

    CustomerListController.inject = ['PagarmeService', '$ionicPopup', '$ionicModal', '$scope', 'ViewModelUtilsService'];
    function CustomerListController(PagarmeService, $ionicPopup, $ionicModal, $scope, ViewModelUtilsService) {
        var vm = this;
        vm.onTapCustomer = onTapCustomer;
        vm.showLoader = true;
        
        console.log('=== CustomerListController Controller ===');    

        PagarmeService.getCustomers()
        .then(function(result){
            console.log(result);
            vm.showLoader = false;
            vm.customers = result;            
        })
        .catch(function(error){
            console.log(error);
        });

        function onTapCustomer(customer){
            console.log('onTapCustomer')
            console.log(customer);
             ViewModelUtilsService.showModal(customer);
        }



        /**$ionicModal.fromTemplateUrl('templates/modal.html', {
    scope: $scope
  }).then(function(modal) {
    $scope.modal = modal;
  }); */

/*
        $ionicModal.fromTemplateUrl('modules/lista-customer/modal.html', {
            scope: $scope
        }).then(function(modal) {
            $scope.modal = modal;
        });*/







        /*

        //get cards ok
        PagarmeService.getCards()
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        //get customers ok
        PagarmeService.getCustomers()
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        //get card ok 145059
        PagarmeService.getCard(145059)
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        //post boleto
        PagarmeService.postBoleto(6000)
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        */




        /*
        var cardData = {
            cardHolderName:'Desenv C Teste',
            cardExpirationMonth:11,
            cardExpirationYear:17,
            cardNumber:'4716329201322757',
            cardCVV:'162'
        }

        PagarmeService.generateCardHash(cardData).then(function(cardHash){
            console.log(cardHash);
            /*
            PagarmeService.postTransactionCard(7000, cardHash)
            .then(function(result){
                console.log(result);
            })
            .catch(function(error){
                console.log(error);
        });


        })
        .catch(function(error){
            //mensagem erro ao inserir dados
            console.log(error);
        });
        */





/*
        PagarmeService.postTransactionCard(7000, cardHash)
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });
        */
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('MassChargingController', MassChargingController);

    MassChargingController.inject = ['$scope', 'FoneclubeService', 'PagarmeService', '$q', 'UtilsService', '$timeout', 'MainUtils'];

    function MassChargingController($scope, FoneclubeService, PagarmeService, $q, UtilsService, $timeout, MainUtils) {
        
        var vm = this;
        var prefixoMoetario = 'R$';
        const cartao = 1;
        const boleto = 2;
        vm.viewName = "Cobrança em massa";
 
        vm.plans = [];
        vm.year = new Date().getFullYear();
        vm.month = new Date().getMonth() + 1;
        vm.onSearchMassCharging = onSearchMassCharging;
        vm.loading = false;
        vm.onClickCobrar = onClickCobrar;
        vm.onChangeCheckboxSoma = onChangeCheckboxSoma;
        vm.onChangeCheckboxLastPayment = onChangeCheckboxLastPayment;
        vm.onChangeCheckboxCharged = onChangeCheckboxCharged;
        vm.paymentMethod = [
            { id:'boleto', description: 'Boleto' },
            { id:'cartao', description: 'Cartão de Crédito' }
        ]
        vm.showCharged = true;
        vm.getLinkBoleto = getLinkBoleto;

        function onSearchMassCharging(){

            vm.loading = true;
            FoneclubeService.getMassChargingFull(vm.month,vm.year).then(function (result) {
                // debugger;
                vm.massList = result.MassCharging;

                for(var i in result.MassCharging){

                    result.MassCharging[i].idTypeCharging = boleto;
                    result.MassCharging[i].typeCharging = 'boleto'

                    if(result.MassCharging[i].HasCard && result.MassCharging[i].LastCharging.PaymentType == cartao){
                        result.MassCharging[i].idTypeCharging = cartao;
                        result.MassCharging[i].typeCharging = 'cartao'
                    }

                    result.MassCharging[i].chargingAmmount = result.MassCharging[i].PrecoUnico;
                    result.MassCharging[i].enviarEmail = true;

                    if(result.MassCharging[i].ChargeDoMes != null){
                        if(result.MassCharging[i].ChargeDoMes.BoletoId > 0){
                            getLinkBoleto(result.MassCharging[i].ChargeDoMes.BoletoId)
                        }
                    }
                    
                    if(result.MassCharging[i].Charged)
                        setMessageInfoCharged(result.MassCharging[i], "Cliente Cobrado no mês vingente definido. " )

                    result.MassCharging[i].showed = true;

                    if(result.MassCharging[i].LastCharging){

                        var dataCriacao = new Date(result.MassCharging[i].LastCharging.CreateDate)
                        var dataCompare = new Date(result.MassCharging[i].LastCharging.CreateDate);
                        dataCompare.setDate(dataCompare.getDate() + 35);

                        if(dataCompare <= new Date()){
                            result.MassCharging[i].tempoLongoCobrado = true;
                        }
                    }
                }
            })

            FoneclubeService.getMassChargingData(vm.month,vm.year).then(function (result) {
                vm.lista = result;
                
                vm.lista.forEach(customer => {
                    
                    if(!customer.Charged)
                        customer.infoMessage = 'Cliente não cobrado no mês vingente definido.';

                    if(customer.LastCharge)
                    {
                        customer.lastPayment = true;
                        onChangeCheckboxLastPayment(customer, false)
                    }
                        
                    customer.defaultCharging = true;
                    customer.enviarEmail = true;
                });
                vm.loading = false;
            }).catch(function(error){
                alert('Aviso: o watcher pegou uma exceção, por favor, tire um print para companhamento: mcc5')
            })
        }


        function onClickCobrar(customer){

            // debugger
            setMessageInfo(customer, "Iniciando cobrança, validando campos preenchidos")
            var valorTotalCobrar = customer.chargingAmmount;
            valorTotalCobrar = parseInt(valorTotalCobrar.replace('.','').replace(prefixoMoetario, ''))
            
            if(customer.typeCharging == 'boleto'){
                customer.idTypeCharging = boleto
            }
            else{
                customer.idTypeCharging = cartao
            }

            if(!validationCharge(customer))
                return;

            if(!customer.requesting)
            {

                if(customer.LastChargingPaid == null)
                {
                    customer.LastChargingPaid = {};
                    customer.LastChargingPaid.Comment = undefined;
                }

                var customerSend = {
                    Id: customer.IdPerson,
                    Charging:{
                        Comment: customer.LastChargingPaid.Comment ,
                        CommentEmail:customer.emailComment,
                        CommentBoleto: customer.boletoComment, 
                        Ammount: valorTotalCobrar,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: customer.idTypeCharging,
                        AnoVingencia:vm.year,
                        MesVingencia: vm.month,
                        TransactionId: null
                    }
                }

                setMessageInfo(customer, "Iniciando envio de transação, aguarde, esperando retorno do gateway de pagamento")
                FoneclubeService.postGeraCobrancaIntegrada(customerSend).then(function (result) {
                    
                    // debugger
                    var linkBoleto = '';
                    if(customerSend.Charging.PaymentType == boleto)
                        linkBoleto = result.LinkBoleto

                    if(result.StatusPaid){
                        setMessageInfo(customer, "Cliente Cobrado no mês vingente definido, finalizando procedimentos. " + linkBoleto)
                    }
                    else{
                        setMessageInfo(customer, result.DescriptionMessage);
                        customer.requesting = false;
                        return
                    }
                    
                    // debugger
                    if(customer.typeCharging == "boleto")
                    {
                        if(customer.enviarEmail)
                        {
                            if(result.StatusPaid){

                                
                                var emailObject = {
                                    To: customer.Email,
                                    TargetName : customer.Name,
                                    TargetTextBlue: result.LinkBoleto,
                                    DiscountPrice: customer.chargingAmmount.replace('R$','').replace('.',','),
                                    TargetSecondaryText : customer.emailComment,
                                    TemplateType : 2
                                }
                                
                                // debugger
                                FoneclubeService.postSendEmail(emailObject).then(function(result){
                                    console.log('FoneclubeService.postHistoryPayment');
                                    console.log(result);

                                    customer.requesting = false;

                                    if(result){
                                        customer.Charged = true
                                    } 
                                    else{
                                        setMessageInfo(customer, "Cliente cobrado, histórico salvo, mas email não enviado, importante. " + linkBoleto)
                                    }
                                })
                                .catch(function(error){
                                    console.log('catch error');
                                    console.log(error);
                                    customer.requesting = false;
                                    setMessageInfo(customer, "Cliente cobrado, histórico salvo, mas email não enviado, importante. " + linkBoleto)
                                });
                                
                            }
                                
                        }
                        else{
                            console.log('Cobrado sem email concluído ' + linkBoleto)
                            setMessageInfo(customer, "Cliente Cobrado no mês vingente definido. " + linkBoleto)
                            customer.requesting = false;
                            customer.Charged = true
                        }
                    }
    
                    if(customer.typeCharging == "cartao")
                    {
                        console.log('cobrado cartao, enviar email');

                        var emailObject = {
                            'To': customer.Email, 
                            'TargetName' : customer.Name,
                            'TargetTextBlue' : customer.chargingAmmount.replace('R$','').replace('.',','),
                            // 'CustomerComment':vm.customerComment,
                            'TargetSecondaryText' : customer.emailComment,
                            'TemplateType' : 1
                        }

                        FoneclubeService.postSendEmail(emailObject).then(function(result){
                            console.log('FoneclubeService.postHistoryPayment');
                            console.log(result);
                            // debugger
                            customer.requesting = false;

                            if(result){
                                customer.Charged = true
                                setMessageInfo(customer, "Cliente Cobrado no mês vingente definido. " + linkBoleto)
                            } 
                            else{
                                setMessageInfo(customer, "Cliente cobrado, histórico salvo, mas email não enviado, importante. " +  linkBoleto)
                            }
                                
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);
                            customer.requesting = false;
                            setMessageInfo(customer, "Cliente cobrado, histórico salvo, mas email não enviado, importante.")
                        });
                    }

                    
                })  
            }

            customer.requesting = true;  
        }

        function validationCharge(customer){
            if(customer.typeCharging == undefined )
            {
                alert('Escolha um tipo de cobrança');
                return false;
            }

            if(customer.chargingAmmount == undefined )
            {
                alert('Escolha um valor de cobrança');
                return false;
            }

            if(customer.chargingAmmount < 100)
            {
                alert('Escolha um valor válido de cobrança');
                return false;
            }

            return true;
        }

        function onChangeCheckboxSoma(customer){
            console.log(`onChangeCheckboxSoma ` + customer.soma);

            customer.lastPayment = false;

            // if(!customer.soma)    
            customer.chargingAmmount =  prefixoMoetario + '0.00';

            if(customer.soma && customer.TotalAmountCustomer > 0)
            {
                customer.chargingAmmount = prefixoMoetario + (customer.TotalAmountCustomer / 100).toFixed(2);
                
            }
                
        }

        function onChangeCheckboxLastPayment(customer, ajusteCampoMonetario){
            console.log(`onChangeCheckboxLastPayment`)
            customer.soma = false

            // if(!customer.lastPayment)    
            customer.chargingAmmount =  prefixoMoetario + '0.00';

            if(customer.lastPayment && customer.LastCharge.Amount > 0)
            {
                customer.chargingAmmount = prefixoMoetario + (customer.LastCharge.Amount / 100).toFixed(2);
                
                customer.boletoComment = customer.LastCharge.CommentBoleto
                customer.emailComment = customer.LastCharge.CommentEmail
                customer.foneclubeComment = customer.LastCharge.CommentFoneclube

                if(customer.LastCharge.ChargeType == boleto)
                {
                    customer.typeCharging = 'boleto'
                    customer.idTypeCharging = boleto
                }
                if(customer.LastCharge.ChargeType == cartao)
                {
                    customer.typeCharging = 'cartao'
                    customer.idTypeCharging = cartao
                }
            }
                
            

        }

        function enviaEmailBoleto(customer){
            var emailObject = {
                'To': existentCustomer.email, //existentCustomer.email
                'TargetName' : existentCustomer.name,
                'TargetTextBlue': resultCapture.boleto_url,
                'TargetSecondaryText' : vm.commentBoleto,
                'TemplateType' : 2
            }

            FoneclubeService.postSendEmail(emailObject).then(function(result){
                console.log(result);
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
            });
        }

        function enviaEmailCartao(customer){
            var emailObject = {
                'To': vm.existentCustomer.email, //vm.existentCustomer
                'TargetName' : vm.existentCustomer.name,
                'TargetTextBlue' : $filter('currency')(vm.amount / 100, ""),
                // 'CustomerComment':vm.customerComment,
                'TargetSecondaryText' : vm.customerComment,
                'TemplateType' : 1
            }

            FoneclubeService.postSendEmail(emailObject).then(function(result){
                console.log(result);
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
            });
        }

        function setMessageInfo(customer, message){
            customer.infoMessage = message;
            customer.Charged = false;
        }

        function setMessageInfoCharged(customer, message){
            customer.infoMessage = message;
        }

        function onChangeCheckboxCharged(){
            console.log('teste');
            debugger
            for(var i in vm.massList){

                if(vm.showCharged){
                    vm.massList[i].showed = true; 
                }
                else{
                    if(vm.massList[i].Charged){
                        vm.massList[i].showed = false;
                    }
                }
                
                // vm.massList[i].showed = false;
                
            }
        }

        function getLinkBoleto(idBoleto){
            PagarmeService.getBoletoUrl(idBoleto, null, null).then(function (result) {
                console.log(result)
            })
        }

    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('LoginController', LoginController);

  LoginController.inject = ['FlowManagerService', 'MainComponents', '$scope', 'FireBaseManagerUtil', 'MainUtils', 'DialogFactory','localStorageService', 'FoneclubeService'];
  function LoginController(FlowManagerService, MainComponents, $scope, FireBaseManagerUtil, MainUtils, DialogFactory, localStorageService, FoneclubeService) {
        var vm = this;
        vm.login = login;
        vm.refresh = refresh;
        vm.version = MainComponents.getVersion();

        FoneclubeService.getReintegrateDatePagarme().then(function (result) {
            // debugger
            var registro = new Date(result);
            vm.dataClonePagarme = registro.toString().split('GMT')[0];
        }).catch(function(error){
            alert('Aviso: o watcher pegou uma exceção, por favor, tire um print para companhamento: lc24')
        })

        FoneclubeService.getStatusAPI().then(function(result){
                vm.statusBase = result;
                console.log(result)
        })

        function validaLogin(){

            var users = FireBaseManagerUtil.getUsers();

                      
            for(var i in users){
                var user = users[i];
                if(user.user == vm.user && user.password == vm.password)
                {
                    MainUtils.setAgent(user.user);
                    return true;
                }

            }

            return false;
        }

        function login(){
            if(validaLogin())
            {
              localStorageService.add("userid",'True')
              FlowManagerService.changeHomeView();


            }
            else
            {
                DialogFactory.showMessageDialog({mensagem: 'Usuário ou senha incorretos', titulo: 'Alerta'});
            }
        }

        
        function formatDate(date) {
            var monthNames = [
              "January", "February", "March",
              "April", "May", "June", "July",
              "August", "September", "October",
              "November", "December"
            ];
          
            var day = date.getDate();
            var monthIndex = date.getMonth();
            var year = date.getFullYear();
          
            return day + ' ' + monthNames[monthIndex] + ' ' + year;
        }

        function refresh(){
            // debugger
            FoneclubeService.getUpdatePagarme().then(function (result) {
                // debugger
                console.log('result ' + result);
            }).catch(function(error){
                alert('Aviso: o watcher pegou uma exceção, por favor, tire um print para companhamento: lc17')
            })
        }


    }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .service('FlowManagerService', FlowManagerService);

    FlowManagerService.inject = ['LocationService', 'FireBaseManagerUtil', '$window', 'localStorageService', '$rootScope', '$templateCache', 'UtilsService'];
    function FlowManagerService(LocationService, FireBaseManagerUtil, $window, localStorageService, $rootScope, $templateCache, UtilsService) {

        this.changeLoginView = changeLoginView;
        this.changeHomeView = changeHomeView;
        this.changeNewHomeView=changeNewHomeView;
        this.changeCheckoutView = changeCheckoutView;
        this.changeEdicaoView = changeEdicaoView;
        this.changeCustomersView = changeCustomersView;
        this.changeOrdemServicoView = changeOrdemServicoView;
        this.changeListCustomer = changeListCustomer;
        this.changeCadastro = changeCadastro;
        this.changeMassChargingView = changeMassChargingView;
        this.changeStatusChargingView = changeStatusChargingView;
        this.changeAllPhoneLinesView = changeAllPhoneLinesView;
        this.changeTemplateEdit = changeTemplateEdit;
        this.changeEstoqueView = changeEstoqueView;
      this.changeAllPhonesView = changeAllPhonesView;
      this.changePlanEditView = changePlanEditView;
      this.changeAllPhoneNewView = changeAllPhoneNewView;
        this.goBack = goBack;

        function changeLoginView(){
            LocationService.change('login');                        
        }

        function changeCheckoutView(){
            LocationService.change('tabs.checkout-view');
        }

        function changeHomeView(){
            localStorageService.set('menuItemActive', 'home');
            LocationService.change('tabs.home');
            $rootScope.$broadcast('changeMenuItem', 'home');
        }
        function changeNewHomeView(){
            localStorageService.set('menuItemActive', 'customers-new');
            LocationService.change('tabs.customers-new');
            $rootScope.$broadcast('changeMenuItem', 'customers-new');
        }
        
        function changeEdicaoView(param) {
            LocationService.change('tabs.edicao', param);
        }
        
        function changeCustomersView(){
            
            // $templateCache.put("lib/ng-table/pager.html",'<div class="ng-cloak ng-table-pager" ng-if=params.data.length> <div ng-if=params.settings().counts.length class="ng-table-counts btn-group pull-right"> <button ng-repeat="count in params.settings().counts" type=button ng-class="{\'active\':params.count() == count}" ng-click=params.count(count) class="btn btn-default"> <span ng-bind=count></span> </button> </div> <ul ng-if=pages.length class="pagination ng-table-pagination"> <li ng-class="{\'disabled\': !page.active && !page.current, \'active\': page.current}" ng-repeat="page in pages" ng-switch=page.type> <a ng-switch-when=prev ng-click=params.page(page.number) href="">&laquo;</a> <a ng-switch-when=first ng-click=params.page(page.number) href=""><span ng-bind=page.number></span></a> <a ng-switch-when=page ng-click=params.page(page.number) href=""><span ng-bind=page.number></span></a> <a ng-switch-when=more ng-click=params.page(page.number) href="">&#8230;</a> <a ng-switch-when=last ng-click=params.page(page.number) href=""><span ng-bind=page.number></span></a> <a ng-switch-when=next ng-click=params.page(page.number) href="">&raquo;</a> </li> </ul> </div> ');
            // $templateCache.put("lib/ng-table/header.html","<ng-table-group-row></ng-table-group-row> <ng-table-sorter-row></ng-table-sorter-row> <ng-table-filter-row></ng-table-filter-row> ");
            
            LocationService.change('tabs.customers');
            $rootScope.$broadcast('changeMenuItem', 'customers');
            // $window.location.reload();
        }
        
        function changeOrdemServicoView(param){
            LocationService.change('tabs.ordemservico', param);
        }

        function changeListCustomer(param) {
            LocationService.change('tabs.list-customer', param);
            $rootScope.$broadcast('changeMenuItem', 'list-customer');
        }

        function changeCadastro(param) {
            LocationService.change('tabs.cadastro', param);
            $rootScope.$broadcast('changeMenuItem', 'cadastro');
        }

        function changeMassChargingView(param) {
            LocationService.change('tabs.mass-charging', param);
            $rootScope.$broadcast('changeMenuItem', 'mass-charging');
        }

        function changeStatusChargingView(param){
            console.log('changeStatusChargingView')
            LocationService.change('tabs.status-charging', param);
            $rootScope.$broadcast('changeMenuItem', 'status-charging');
        }

        function changeAllPhoneLinesView(param){
            LocationService.change('tabs.allphone-lines', param);
            $rootScope.$broadcast('changeMenuItem', 'allphone-lines');
        }

        function changeTemplateEdit(param){
            LocationService.change('tabs.template-edit', param);
            $rootScope.$broadcast('changeMenuItem', 'template-edit');
        }

        function changeEstoqueView(param){
            LocationService.change('tabs.estoque', param);
            $rootScope.$broadcast('changeMenuItem', 'estoque');
        }

        function changePlanEditView(param) {
          LocationService.change('tabs.plan-edition', param);
          $rootScope.$broadcast('changeMenuItem', 'plan-edition');
        }

        function changeAllPhonesView(param){
            LocationService.change('tabs.all-phones', param);
            $rootScope.$broadcast('changeMenuItem', 'all-phones'); 
        }

        function changeReportComissionsView(param) {
          LocationService.change('tabs.report-comissions', param);
          $rootScope.$broadcast('changeMenuItem', 'report-comissions');
        }

        function changeAllPhoneNewView(param) {
          LocationService.change('tabs.all-phones-new', param);
          $rootScope.$broadcast('changeMenuItem', 'all-phones-new');
        }
        
        function goBack() {
            $window.history.back();
        }
    }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('MasterController', MasterController);

    MasterController.inject = ['FlowManagerService', 'MainUtils'];
    function MasterController(FlowManagerService, MainUtils) {
        var vm = this;
        console.log('--- Master controller --- ' + FlowManagerService);
        FlowManagerService.changeLoginView();

        // vm.viewName = 'Cadastro Foneclube';
        ////////
        //MainUtils.setAgent('Cardozo');
        //FlowManagerService.changeHomeView();
        ////////

    }

})();
(function() {
    'use strict';
    angular.module('foneClub')
    .controller('MenuController', menuController);

    menuController.$inject = ['$scope', 'MainComponents', '$window', '$state', 'localStorageService', 'FlowManagerService', '$rootScope'];

    function menuController($scope, MainComponents, $window, $state, localStorageService, FlowManagerService, $rootScope) {
        var vm = this;     
        vm.compress = false; 
        vm.compressMobile = false; 
        vm.mobile = false;              
        vm.menuItemActive = localStorageService.get('menuItemActive');
        vm.version = MainComponents.getVersion();
                
        function init() {
            vm.mobile = $window.innerWidth <= 767;
        }
        init();
        vm.menuCompress = function() {
            if ($window.innerWidth >= 767) {
                vm.compress = !vm.compress;                 
            } else if ($window.innerWidth <= 767) {
                vm.compressMobile = !vm.compressMobile;
            }
        }                   
        
        $rootScope.$on('changeMenuItem', function(event, args) {
            saveMenu(args);
        });

        $rootScope.$on('menu-hamburguer', function() {
            vm.menuCompress();
        })
/*-----------------------------------*/



        vm.setMenuItemActive = function(screen) {
            saveMenu(screen)
            
            
            if(screen == 'home') {
                FlowManagerService.changeHomeView();
            } else if (screen == 'cadastro') {
                FlowManagerService.changeCadastro();
            } else if (screen == 'list-customer') {
                FlowManagerService.changeListCustomer();
            } else if (screen == 'customers') {
                FlowManagerService.changeCustomersView();
            } else if (screen == 'mass-charging') {
                FlowManagerService.changeMassChargingView();
            } else if(screen =='status-charging'){
                FlowManagerService.changeStatusChargingView();
            } else if(screen == 'allphone-lines'){
                FlowManagerService.changeAllPhoneLinesView();
            } else if(screen == 'template-edit'){
                FlowManagerService.changeTemplateEdit();
            } else if(screen == 'estoque'){
                FlowManagerService.changeEstoqueView();
            }
            else if(screen == 'all-phones'){
                FlowManagerService.changeAllPhonesView();
            }
            else if (screen == 'all-phones-new') { 
              FlowManagerService.changeAllPhoneNewView();
            }
            else if (screen == 'customers-new') { 
                FlowManagerService.changeNewHomeView();
              }
            else {
                
            }
        }
        
        angular.element($window).bind('resize', function(){            
            if ($window.innerWidth <= 767 && !vm.mobile) {               
                vm.compress = false;
                vm.mobile = true;
                $scope.$apply();
            } else if ($window.innerWidth >= 767 && vm.mobile) { 
                vm.mobile = false;
                vm.compressmobile = false;
                $scope.$apply();
            }                                    
        });

        function saveMenu(screen) {
            vm.menuItemActive = screen;
            localStorageService.set('menuItemActive', screen);
        }
    }
})();

(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('PlanEditionController', PlanEditionController);
    
      PlanEditionController.inject = ['FlowManagerService', 'FoneclubeService', 'PagarmeService'];
      function PlanEditionController(FlowManagerService, FoneclubeService, PagarmeService) {
            var vm = this;
            vm.ativacao = [true,false];
            vm.planOperator = ['CLARO','VIVO']
            vm.onClickEditPlan = onClickEditPlan;
            vm.onClickEditService = onClickEditService;
            vm.onClickAddService = onClickAddService;
            vm.onClickAddPlan = onClickAddPlan;
            // vm.operator = [{id:1, operator:'CLARO'},{id:2, operator:'VIVO'}]
            
            console.log('-- Plan Edition --')

            FoneclubeService.getAllPlanOptios().then(function (result) {
                console.log('result')
                
                vm.allPlans = result;
                debugger;

                // vm.allPlans.push({
                //     'Active': true,
                //     'Cost': 0,
                //     'Description': "",
                //     'Id': -1,
                //     'IdOperator': 1,
                //     'Value': 0
                // })
                
                for(var i in vm.allPlans){
                    if(vm.allPlans[i].IdOperator == 1)
                        vm.allPlans[i].currentPlan = 'CLARO'
                    else
                        vm.allPlans[i].currentPlan = 'VIVO'
                    
                }

                console.log(result)
            })

            

            FoneclubeService.getAllServices().then(function (result) {
                console.log('result services')
                console.log(result)
                
                debugger
                for(var i in result){
                    if(result[i].Editavel == null){
                        result[i].Editavel = false;
                    }  
                }

                vm.services = result;

                // vm.services.push({
                //     'AmountFoneclube': '',
                //     'AmountOperadora': '',
                //     'Assinatura': false,
                //     'Descricao': '',
                //     'Editavel': false,
                //     'ExtraOption': false,
                //     'Id': -1
                // })
            })

            function onClickEditService(service){
                console.log('edit service:')
                console.log(service)
                debugger
                service.Assinatura = service.selectedAssinatura
                service.Editavel = service.selectedEditavel
                service.ExtraOption = service.selectedExtraOption

                FoneclubeService.postUpdateServiceFoneclube(service).then(function (result) {
                    console.log('result services postUpdateServiceFoneclube')
                    console.log(result)
                    if(result)
                        alert('Serviço atualizado')
                    else{
                        alert('Serviço não atualizado')
                    }    
                })
            }

            function onClickEditPlan(plan){
                
                plan.Active = plan.selectedActive;
                
                if(plan.selectedPlan == 'CLARO')
                    plan.IdOperator = 1
                else
                    plan.IdOperator = 2

                
                FoneclubeService.postUpdatePhonePlan(plan).then(function (result) {
                    console.log('result services postUpdatePhonePlan')
                    console.log(result)
                    if(result)
                        alert('Plano atualizado')
                    else{
                        alert('Plano não atualizado')
                    } 
                    
                })
            }

            function onClickAddService(service){
                debugger
            }

            function onClickAddPlan(plan){
                debugger
            }

        }
    })();
    
(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('ReportComissionController', ReportComissionController);
    
      ReportComissionController.inject = ['FlowManagerService', 'FoneclubeService', 'PagarmeService'];
      function ReportComissionController(FlowManagerService, FoneclubeService, PagarmeService) {

            var vm = this;            
            vm.onSearchHistory = onSearchHistory;
            vm.changeFilterComissionHistory = changeFilterComissionHistory;
            vm.changeFilterBonusHistory = changeFilterBonusHistory;
            vm.changeFilterLogBonus = changeFilterLogBonus;
            vm.exportToExcel = exportToExcel;
            vm.comissionHistory = true;
            
            console.log('-- report comission Edition --');

            function onSearchHistory(){

                vm.resultBonus = []
                vm.resultComission = []
                vm.resultBonusLog = []

                console.log('onSearchHistory');
                
                vm.loading = true;

                if(vm.total == undefined || vm.total == null){
                    vm.total = 1000;
                }

                debugger;
                if(vm.comissionHistory){
                    FoneclubeService.getComissionsOrderHistory(vm.total).then(function (result) {
                        console.log('getComissionsOrderHistory result');
                        console.log(result);

                        vm.resultComission = result;
                        vm.loading = false;
                    })
                }

                if(vm.bonusHistory){
                    FoneclubeService.getBonusOrderHistory(vm.total).then(function (result) {
                        console.log('getBonusOrderHistory result');
                        console.log(result);

                        vm.resultBonus = result;
                        vm.loading = false;
                    })
                }

                if(vm.logBonus){

                    FoneclubeService.getBonusLog().then(function (result) {
                        console.log('getBonusLog result');
                        console.log(result);

                        vm.resultBonusLog = result;
                        vm.loading = false;  
                    })

                }
            }

            function changeFilterComissionHistory(){
                vm.comissionHistory = true;
                vm.bonusHistory = false
                vm.logBonus = false
            }

            function changeFilterBonusHistory(){
                vm.comissionHistory = false;
                vm.bonusHistory = true
                vm.logBonus = false
            }

            function changeFilterLogBonus(){
                vm.comissionHistory = false;
                vm.bonusHistory = false
                vm.logBonus = true
            }

            function exportToExcel(){
                $('.k-grid-excel').trigger("click")
            }
        }
    })();
    




//angular.module('foneClub', ['kendo.directives']);
angular.module('foneClub').controller('StatusChargingController', StatusChargingController);



function StatusChargingController($scope, $interval, FoneclubeService, PagarmeService) {




  var vm = this;
  vm.month = new Date().getMonth() + 1;
  vm.year = new Date().getFullYear();
  vm.diffDays = diffDays;
  vm.statusType = {
    COBRADO: 1,
    NAO_COBRADO: 2,
    PAGO: 3,
    REFUNDED: 4,
    VENCIDO: 5
  };
  vm.PagamentosType = {
    BOLETO: 1,
    CARTAO: 2
  };
  vm.AtivoType = {
    ATIVA: 2,
    CANCELADA: 1
  }
  vm.tiposStatus = [
    { id: "", title: "" },
    { id: 1, title: 'COBRADO' },
    { id: 2, title: 'NÃO COBRADO' },
    { id: 3, title: 'PAGO' },
    { id: 4, title: 'REFUNDED' },
    { id: 5, title: 'VENCIDO' }
  ];
  vm.tiposPagamento = [
    { id: "", title: "" },
    { id: 1, title: 'BOLETO' },
    { id: 2, title: 'CARTÃO' }
  ];
  vm.tipoAtiva = [
    { id: "", title: "" },
    { id: 1, title: 'CANCELADA' },
    { id: 2, title: 'ATIVA' }
  ]
  vm.tipoAcao = [
    { id: "", title: "" },
    { id: 1, title: 'A' },
    { id: 2, title: 'C' }
  ]

  function convertToViewModel(sourceData) {
    var customerDataList = [];

    for (var i = 0; i < sourceData.length; i++) {
      var customer = sourceData[i];

      var RCobrado = customer.ammoutIntFormat;
      var customerSelectedCharge = '';
      var Tipo = '';
      var TipoLink = '';
      var Acao = '';
      var AcaoBool = false;
      var Vencimento = customer.boletoExpires;
      var Ultimopag = customer.LastPaidDate;
      var Dias2 = diffDays(customer.LastPaidDate);
      var RPago = 0;
      var CustomerName = customer.Name;
      var Status2 = '';
      var customerChargeId = '';
      var UltimaCob = '';
      var Dias = 0;
      var Status = '';//customer.descricaoStatus;

      if (isNaN(Dias2)) {
        Dias2 = 0;
      }
      ///////////////
      if (customer.ChargeAndServiceOrderHistory && customer.ChargeAndServiceOrderHistory.Charges) {
        var charge = customer.ChargeAndServiceOrderHistory.Charges;
        RPago = charge.Ammount;

        var dataCobranca = charge.CreationDate;
        var dataConvertida = new Date(dataCobranca).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
        var mes = dataConvertida.substring(5, 7);
        var ano = dataConvertida.substring(0, 4);

        customer.chargingDate = charge.CreationDate;
        customer.chargingDateDiffDays = diffDays(dataConvertida);
        Status= charge.PaymentStatusDescription;
      }

      var selecionado = new Date(vm.year.toString() + '/' + vm.month.toString()).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
      var mesSelecionado = selecionado.substring(5, 7);
      var anoSelecionado = selecionado.substring(0, 4);

      if (mesSelecionado == mes && anoSelecionado == ano) {
        customer.dataIgual = true;
      }
      customer.LastPaidDateDiffDays = diffDays(customer.LastPaidDate);
      UltimaCob = customer.chargingDate ? customer.chargingDate : "";
      ///////////////

      // if (customer.descricaoStatus == '2') { Status = 'NÃO COBRADO'; }
      // if (customer.descricaoStatus == '3') { Status = 'PAGO' };
      // if (customer.descricaoStatus == '4') { Status = 'REFUNDED' };
      // if (customer.descricaoStatus == '5') { Status = 'VENCIDO' };

      if (customer.ChargingValidity != undefined) {

        var lastChargingRec = (customer.ChargingValidity.length - 1);
        var customerChargingInfo = customer.ChargingValidity[lastChargingRec];

        customerSelectedCharge = customerChargingInfo;
        customerChargeId = customerChargingInfo.Id;
        if (customerChargingInfo.CreateDate != null && customerChargingInfo.CreateDate != undefined) {
          //UltimaCob = customerChargingInfo.CreateDate;
        }



        Status2 = customerChargingInfo.Canceled ? 'Cancelada' : 'Ativa'

        if (customerChargingInfo.PaymentType == 1) {
          Tipo = 'CARTÃO';
        }
        else {
          Tipo = 'BOLETO'
          TipoLink = customerChargingInfo.BoletoLink;
        }
        if (customerChargingInfo.Canceled) {
          Acao = 'A';
          AcaoBool = true;
        }
        if (!customerChargingInfo.Canceled) {
          Acao = 'C';
        }
      }

      if (UltimaCob != undefined && UltimaCob != null) { Dias = diffDays(UltimaCob); }

      if (customer.Name == 'Rodrigo Cardozo Pinto') {
        //debugger;

      }

      customerDataList.push({
        'UltimaCob': UltimaCob,
        'Dias': Dias,
        'RCobrado': RCobrado,
        'Tipo': Tipo,
        'TipoLink': TipoLink,
        'Status': Status,
        'StatusId': customer.descricaoStatus,
        'Status2': Status2,
        'Acao': Acao,
        'AcaoBool': AcaoBool,
        'customerSelectedCharge': customerSelectedCharge,
        'customerChargeId': customerChargeId,
        'Vencimento': Vencimento,
        'Ultimopag': Ultimopag,
        'Dias2': Dias2,
        'RPago': RPago,
        'CustomerName': CustomerName,
      });
    }
    return customerDataList;
  }

  $scope.onPageLoad = function () {

    $scope.onClickSearchCustomerData();
  }

  $scope.onClickSearchCustomerData = function () {
    $('#loadingDiv').show();
    vm.loading = true;
    vm.totalReceivedReady = false;
    hasUpdate = false;
    var ativos = vm.somenteAtivos ? 1 : 0;
    FoneclubeService.getStatusCharging(vm.month, vm.year, ativos).then(function (result) {

      vm.customers = result;
      for (var i in vm.customers) {

        vm.customers[i].allChargingsCanceled = false;

        for (var o in vm.customers[i].ChargingValidity) {
          vm.customers[i].ChargingValidity[o].display = true;
        }
      }
      handleData(vm.customers);
      // loadPaymentHistory();
      var gridData = vm.customers;
      initDataProperties(gridData);
    })
  }

  $scope.exportToExcel = function () {
    $('.k-grid-excel').trigger("click")
  }

  function initDataProperties(customerDatasource) {
    var customerData = convertToViewModel(customerDatasource);
    var totalRecords = customerData.length + 10;
    var pageHeight = $(window).height() - 110;

    $scope.customerDataSource = new kendo.data.DataSource({
      data: customerData,
      pageSize: totalRecords,
      schema: {
        model: {
          fields: {
            Dias: { type: "number" },
            AcaoBool: { type: "boolean" },
          }
        }
      },
    });
    $scope.customerGridOptions = {
      dataSource: $scope.customerDataSource,
      height: pageHeight,
      toolbar: ["excel"],
      excel: {
        allPages: true,
        fileName: "Customer Report.xlsx",
        template: "<a class='k-button k-button-icontext' onclick='customCommand();' href='\\#'></span>Cutom Command</a>"
      },
      sortable: true,
      scrollable: true,
      pageable: {
        refresh: true,
        alwaysVisible: false

      },
      reorderable: true,
      resizable: true,

      filterable: {
        mode: "row",
        extra: false,
        operators: {
          string: {
            contains: "Contains",
            startswith: "Starts with",
            eq: "Is equal to",
            neq: "Is not equal to"
          },
          number: {
            eq: "Equal to",
            neq: "Not equal to",
            gte: "Greater Than",
            lte: "Less Than"
          }
        }
      },
      columns: [
        {
          field: "CustomerName", title: "Name", width: "220px", headerTemplate: "<div class='break-word'>Name<div>"
          , filterable: { cell: { operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "UltimaCob", title: "Última Cob.", width: "130px",
          //template: "#if( UltimaCob != '1999/12/31') {# <div>#=kendo.toString(kendo.parseDate(UltimaCob, 'yyyy-MM-dd'), 'dd.MMM')#</div> #}else{# <div>-</div> #}#",
          template: "<div>#=kendo.toString(kendo.parseDate(UltimaCob, 'yyyy-MM-dd'), 'dd MMM, yyyy')#</div>",
          headerTemplate: "<div class='break-word'>Última Cob.<div>",
          filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Dias", title: "Dias", width: "150px"
          , headerTemplate: "<div class='break-word'>Dias<div>",
          filterable: { cell: { operator: "gte", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }

        },
        {
          field: "Status", title: "Status", width: "140px"
          , headerTemplate: "<div class='break-word'>Última Cob. <br>Status<div>"
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'COBRADO' }, { text: 'NÃO COBRADO' }, { text: 'PAGO' }, { text: 'REFUNDED' }, { text: 'VENCIDO' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },
        {
          field: "RCobrado", title: "R$ Cobrado", width: "110px"
          , headerTemplate: "<div class='break-word'>R$ <br>Cobrado<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Tipo", title: "Tipo", width: "110px"
          , headerTemplate: "<div class='break-word'>Tipo<div>"
          , template: " #if( Tipo != 'BOLETO') {#   <label>#:Tipo#</label>  #} else{#  <a href='#:TipoLink#' target='_blank'>#:Tipo#</a> #}# "
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'BOLETO' }, { text: 'CARTÃO' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },


        {
          field: "Status2", title: "Status", width: "130px"
          , headerTemplate: "<div class='break-word'>Ação <br>Status<div>"
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'ATIVA' }, { text: 'CANCELADA' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },

        {
          field: "Acao", title: "Ação", width: "80px", headerTemplate: "<div class='break-word'>Ação <div>"
          , template: " #if( Acao == 'C') {#   <button class= 'btnb btn-danger action-buttons' ng-click='vm.onDesativarBoleto(#:customerChargeId#)'>				C</button>  #} else{#  <button class='btnb btn-info action-buttons' ng-click='vm.onAtivarBoleto(#:customerChargeId#)'>A</button> #}# "
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'A' }, { text: 'C' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },



        {
          field: "Vencimento", title: "Vencimento", width: "110px", headerTemplate: "<div class='break-word'>Vencimento<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Ultimopag", title: "Última pag.", width: "110px", headerTemplate: "<div class='break-word'>Última pag.<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Dias2", title: "Dias", width: "110px", headerTemplate: "<div class='break-word'>Dias<div>"
          , template: " #if( Dias2 == 0 ) {# <div>-</div> #} else{#  <div>#:Dias2#</div>  #}# "
          , filterable: {
            cell: {
              showOperators: false, operator: "contains"
              , template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); },
            }
          }
        },
        {
          field: "RPago", title: "R$ Pago", width: "110px", headerTemplate: "<div class='break-word'>R$ Pago<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },

      ]
    }
    vm.loading = false;

    $('#loadingDiv').hide();
  }


  function handleData(customers) {
    vm.callbackCount = 0;
    vm.totalBoletoCharges = 0;
    vm.totalReceived = 0;
    vm.totalCharged = 0;
    vm.totalCustomers = customers.length;
    vm.totalCustomersCharged = customers.filter(v => v.Charged == true).length;
    vm.totalCustomersNotCharged = customers.filter(v => v.Charged == false).length;

    try {
      vm.totalBoletoCharges = customers[0].TotalBoletoCharges;
    }
    catch (erro) {
      //sem clientes
    }

    for (var index in customers) {

      var customer = customers[index];
      if (customer.Name == '1 Antonia Maria da Silva Barboza') {

      }
      try {
        customer.phone = customer.Phones[0].DDD + customer.Phones[0].Number;
        var operadora = customer.Phones[0].IdOperator == 1 ? 'Claro' : 'Vivo'
        customer.phoneDetail = operadora + ' - ' + customer.Phones[0].PlanDescription;
      }
      catch (erro) { }

      if (customer.Charged) {
        customer.statusType = vm.statusType.CARREGANDO;
        customer.registerPayd = false;
        for (var i in customer.ChargingValidity) {
          var charge = customer.ChargingValidity[i];
          try {
            customer.ChargingValidity[i].BoletoExpires = new Date(customer.ChargingValidity[i].BoletoExpires).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
            customer.boletoExpires = customer.ChargingValidity[i].BoletoExpires;
          }
          catch (erro) { }

          if (charge.PaymentType == 1 && charge.StatusDescription != 'Refunded') {
            customer.ChargingValidity[i].StatusDescription = 'PAGO';
            customer.descricaoStatus = vm.statusType.PAGO;
            customer.descricaoTipo = vm.PagamentosType.CARTAO;
            customer.ammoutIntPaid = parseFloat(customer.ChargingValidity[i].Ammount / 100);
            customer.ammoutPaidFormat = customer.ammoutIntPaid.toString().replace('.', ',');
          }

          if (charge.PaymentType == 2 && charge.BoletoId != 0) {
            customer.descricaoTipo = vm.PagamentosType.BOLETO;
            PagarmeService.getStatusBoletoRecursivo(charge.BoletoId, customer, vm, index, i).then(function (result) {

              //result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].descricaoTipo = vm.PagamentosType.BOLETO;
              result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'INVÁLIDO'



              if (result[0].status == "waiting_payment") {
                result[0].vm.customers[result[0].indexCustomer].ammoutIntPaid = 0;
                result[0].vm.customers[result[0].indexCustomer].descricaoStatus = 'PENDENTE';
                result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'PENDENTE'
                if (!result[0].elemento.registerPayd) {
                  result[0].elemento.status = result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription;
                }

                if (!result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Expired) {
                  result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.COBRADO;
                } else {
                  result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.VENCIDO;
                }
              }
              else if (result[0].status == "paid") {
                result[0].vm.customers[result[0].indexCustomer].ammoutIntPaid = parseFloat(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount / 100);
                result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.PAGO;
                result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'PAGO'
                try {

                }
                catch (erro) { }

                result[0].elemento.registerPayd = true;
                result[0].elemento.status = charge.StatusDescription;
                totalRecebidoBoleto += parseInt(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount, 10)
                result[0].vm.totalReceived += parseInt(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount, 10)
              }
              else {
                // ;
              }
              charge.StatusDescription = result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription;

              result[0].vm.callbackCount++;

              if (result[0].vm.callbackCount == result[0].vm.totalBoletoCharges) {
                result[0].vm.totalReceived = parseFloat(result[0].vm.totalReceived / 100).toString().replace('.', ',');
                vm.totalReceivedReady = true;
              }
            })
          }

          if (charge.PaymentType == 1 && charge.StatusDescription == 'Refunded') {
            customer.descricaoStatus = vm.statusType.REFUNDED;
            customer.ChargingValidity[i].StatusDescription = 'REFUNDED'
          }

          if (charge.BoletoId == 0 && charge.PaymentType == 2) {
            if (vm.customers[index].ChargingValidity[i].StatusDescription == 'CARREGANDO') {
              vm.customers[index].ChargingValidity[i].StatusDescription = 'INVÁLIDO';
              customer.descricaoStatus = 'INVÁLIDO';
            }

          }
        }

        vm.totalCharged += parseInt(customer.ChargingValidity[0].Ammount);

        if (customer.ChargingValidity[0].Payd == true) {
          vm.totalReceived += parseInt(customer.ChargingValidity[0].Ammount)
        }

        customer.ammout = parseFloat(parseInt(customer.ChargingValidity[0].Ammount) / 100);
        customer.ammoutFormat = customer.ammout.toString().replace('.', ',');
        customer.descricaoCharge = charge.Canceled ? vm.AtivoType.CANCELADA : vm.AtivoType.ATIVA;
        customer.descricaoAcao = charge.Canceled ? vm.AtivoType.CANCELADA : vm.AtivoType.ATIVA;
        customer.ammoutInt = parseFloat(customer.ammout);
        customer.ammoutIntFormat = customer.ammoutInt.toString().replace('.', ',');
      }
      else {
        customer.status = 'NÃO COBRADO';
        customer.descricaoStatus = vm.statusType.NAO_COBRADO;
        customer.ammoutInt = 0;
        customer.ammoutIntPaid = 0;
      }
    }
    vm.totalCharged = parseFloat(vm.totalCharged / 100).toString().replace('.', ',');

  }

  function loadPaymentHistory() {
    for (var index in vm.customers) {

      FoneclubeService.getChargeAndServiceOrderHistoryDinamic(vm.customers[index].Id, index).then(function (result) {

        if (result.length == 0) {
        }
        else {

          // TODO TEMPORARIO
          var dataCobranca;
          try {

            // dataCobranca = result[0].Charges.PaymentDate.substring(0,10).replace('-','/').replace('-','/');
            dataCobranca = result[0].Charges.CreationDate;
          }
          catch (erro) {

            // dataCobranca = result[0].CreatedDate.substring(0,10).replace('-','/').replace('-','/')
            dataCobranca = result[0].CreatedDate
          }

          var dataConvertida = new Date(dataCobranca).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
          var mes = dataConvertida.substring(5, 7);
          var ano = dataConvertida.substring(0, 4);

          var selecionado = new Date(vm.year.toString() + '/' + vm.month.toString()).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
          var mesSelecionado = selecionado.substring(5, 7);
          var anoSelecionado = selecionado.substring(0, 4);

          if (mesSelecionado == mes && anoSelecionado == ano) {
            vm.customers[result.indexLista].dataIgual = true;
          }

          vm.customers[result.indexLista].chargingDate = dataConvertida;
          vm.customers[result.indexLista].chargingDateDiffDays = diffDays(dataConvertida);
          vm.customers[result.indexLista].LastPaidDateDiffDays = diffDays(vm.customers[result.indexLista].LastPaidDate);
        }
      });
    }
    for (var index in vm.customers) {
      if (vm.customers[index].chargingDate == undefined || vm.customers[index].chargingDate == null) {
        vm.customers[index].chargingDate = new Date('2000/01/01').toISOString().split('T')[0].replace('-', '/').replace('-', '/');
        vm.customers[index].chargingDateDiffDays = diffDays(vm.customers[index].chargingDate);
      }
    }
  }



  var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds            
  var secondDate = new Date();

  function diffDays(date) {
    var firstDate = new Date(date);
    return Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
  }




  vm.onDesativarBoleto = onDesativarBoleto;
  vm.onAtivarBoleto = onAtivarBoleto;

  function onDesativarBoleto(chargeId) {
    DialogFactory.dialogConfirm({ mensagem: 'Tem certeza que seja cancelar essa cobrança?' })
      .then(function (value) {
        if (value) {
          FoneclubeService.postChargingUpdate(chargeId, true)
            .then(function (value) {
              if (value) {
                charge.Canceled = true;
              }
            })
        }
      })
  }

  function onAtivarBoleto(chargeId) {
    DialogFactory.dialogConfirm({ mensagem: 'Tem certeza que seja ativar essa cobrança?' })
      .then(function (value) {
        if (value) {
          FoneclubeService.postChargingUpdate(chargeId, false)
            .then(function (value) {
              if (value) {
                charge.Canceled = false;
              }
            })
        }
      })
  }
};


StatusChargingController.$inject = ['$scope', '$interval', 'FoneclubeService', 'PagarmeService']; 

(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('TemplateEditController', TemplateEditController);
    
      TemplateEditController.inject = ['FlowManagerService', 'FoneclubeService', 'PagarmeService'];
      function TemplateEditController(FlowManagerService, FoneclubeService, PagarmeService) {
            var vm = this;
            vm.onClickTemplate = onClickTemplate;
            vm.onClickConfirmChange = onClickConfirmChange;
            console.log('-- TemplateEditController --')

            FoneclubeService.getTemplates().then(function (result) {
                vm.templates = result;
                
            });


            function onClickTemplate(template){
                console.log(template)

                vm.currentTemplate = template
                
            }

            function onClickConfirmChange(){
                console.log('onClickConfirmChange');
                vm.confirmButton = true
                FoneclubeService.postUpdateTemplate(vm.currentTemplate).then(function (result) {
                    console.log(result)
                    vm.confirmButton = false
                    if(result)
                    {
                        alert('Conteúdo alterado com sucesso')
                    }
                    else{
                        alert('Conteúdo não foi alterado') 
                    }
                    
                });

            }
    
        }
    })();
    
(function () {
  'use strict';

  angular.module('foneClub').controller('WhatsappController', WhatsappController);

  WhatsappController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService', '$filter', '$interval', '$scope'];

  function WhatsappController(ViewModelUtilsService, PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService, $filter, $interval, $scope) {
    var vm = this;
    // debugger;
    vm.onSend = onSend;


    var customer = ViewModelUtilsService.modalData;
    vm.customer = customer;
    vm.name = vm.customer.Name;
    vm.text = '';
    vm.sendButtonText = 'Send';
    vm.messages = [];
    vm.currentUser = MainUtils.getAgent();
    init();

    function init() {
      FoneclubeService.getClientMessages(vm.customer.WClient.ClientId, false).then(function (result) {
        if (result) {
          vm.messages = result;
          if (vm.customer.WClient) {
            vm.customer.WClient.UnreadMessages = 0;
          }
        }
      });
    }

    function onSend() {
      if (!vm.text) {
        return;
      }
      debugger;
      var data = {
        ClientId: vm.customer.WClient.ClientId,
        Text: vm.text
      };

      if (vm.currentUser) {
        data.Text = vm.currentUser + ": " + data.Text;
        data.SendBy = vm.currentUser;
      }

      vm.sendButtonText = 'Sending..';
      FoneclubeService.postSendWhatsappMessage(data).then(function (result) {
        console.log(result);
        vm.sendButtonText = 'Send';
        if (result) {
          vm.text = "";
          init();
        } else {
          DialogFactory.showAlertDialog({ message: 'Message not sent' });
        }
      }); /* 
              .catch(function(error){
                  console.log('catch error');
                  console.log(error);
              }); */
    }

    var awaitingResponse = false;
    var stop = null;//$interval(loadClientMessages, 5000);
    function loadClientMessages() {
      if (!awaitingResponse) {
        awaitingResponse = true;
        FoneclubeService.getClientMessages(vm.customer.WClient.ClientId, true).then(function (result) {
          vm.messages = result;
          awaitingResponse = false;
          // console.log(result);
          if (result) {

          }
        });
      }
    }
    $scope.$on('$destroy', function () {
      // Make sure that the interval is destroyed too
      console.log("Scop destroyed");
      if (angular.isDefined(stop)) {
        $interval.cancel(stop);
        stop = undefined;
      }
    });
  }
})();

(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('BoletoModalController', BoletoModalController);
    
  
        BoletoModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService', '$filter'];
        function BoletoModalController(ViewModelUtilsService, PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService, $filter) {


            console.log('--- BoletoModalController ---');
            var vm = this;
            vm.date = new Date();
            var customer = ViewModelUtilsService.modalBoletoData;
            vm.customer = customer;
            var newCustomer;
            vm.etapaDados = true;
            vm.chargeDisabled = true;
            vm.cobrancaRealizada = false;
            vm.amount = vm.customer.CacheIn ? vm.customer.CacheIn : '';
            vm.comment = '';
            vm.onTapPagar = onTapPagar;
            vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
            vm.onTapCancel = onTapCancel;
            vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;
            vm.checkOne = checkOne;
            vm.enviaEmail = true;
            vm.enviaWhatsapp = true;
            vm.calculate = calculate;
            vm.years = [2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010];
            vm.months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

            vm.amount = 0;
            vm.amountTemp = 0;
            vm.amountTemp1 = 0;
            vm.bonus = 0;
            vm.totaisComissoes = {};
            vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente = 0;
            vm.expirationDateField = 3;
            vm.year = new Date().getFullYear().toString();
            vm.month = (new Date().getMonth() + 1).toString();
            
            var customerId = customer.Id;
            var existentCustomer = {
                        'name' : customer.Name,
                        'document_number' : customer.DocumentNumber,
                        'email' : customer.Email,
                        'address' : getAddress(customer),
                        'phone' : getContactPhone(customer)
    
            }

            vm.Padrão = false;
            vm.Excepcional = false;

            var CARTAO = 1;
            var BOLETO = 2;

            init();
            calculate();

          function init() {
            FoneclubeService.getHistoryPayment(customer.Id).then(function (result) {
              vm.histories = result;
              for (var i in vm.histories) {
                var history = vm.histories[i];
                history.descriptionType = (history.PaymentType == CARTAO) ? 'Cartão de crédito' : 'Boleto';
                if (i == 0) {
                  vm.commentBoleto
                  vm.comment = history.Comment;
                  vm.amount = history.Ammount / 100;

                  vm.amountTemp = vm.amount.toFixed(2);
                  vm.amountTemp1 = vm.amount.toFixed(2);
                }
                if (history.PaymentType == BOLETO) {
                  PagarmeService.getStatusBoleto(history.BoletoId).then(function (result) {
                    if (result.length > 0) {
                      history.StatusPayment = result[0].status;
                    }
                  })
                }
              }
              customer.histories = vm.histories;
            })
            .catch(function (error) {

            });

            FoneclubeService.getTotaisComissoes(customer.Id).then(function (result) {
              console.log('FoneclubeService.getTotaisComissoes')
              console.log(result)
              vm.totaisComissoes = result;

            })
            

            FoneclubeService.getCommision(customer.Id).then(function (result) {
              vm.bonus = parseFloat(result.Ammount / 100).toFixed(2);
              calculate();
            })
              .catch(function (error) {

              });
          }

          function checkOne(val) {
            //alert('xx');
            vm.chargeDisabled = false;
            if (val == '1') {
              vm.chargeStatusfirst = true;
              vm.chargeStatusSecond = false;
              vm.chargeStatus = 1;
            }
            if (val == '2') {
              vm.chargeStatusSecond = true;
              vm.chargeStatusfirst = false;
              vm.chargeStatus = 2;
            }
          }



          function calculate() {
            var amount = vm.amountTemp.toString().indexOf('.') > -1 ? parseFloat(vm.amountTemp) : parseFloat(vm.amountTemp) / 100;
            var bonus = vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente.toString().indexOf('.') > -1 ? parseFloat(vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente) : parseFloat(vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente) / 100;
            vm.amountTemp1 = vm.pagar ? parseFloat(amount - bonus) : amount;
            if (vm.pagar) {
              vm.amount = parseFloat(vm.amountTemp1).toFixed(2);
            }
            else {
              vm.amount = parseFloat(amount).toFixed(2);
            }

            if (isNaN(vm.amount)) {
              vm.amount = 0;
            }

            vm.amountTemp1 = vm.amount;
          }

          function onTapConfirmarPagamento() {
            //alert(vm.Excepcional);
            //if (!vm.claro) {
            //  vm.Excepcional
                if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                    return;
                }

                if (parseInt(vm.amount) < 1) {
                  DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Não é possível criar uma cobrança com valor inferior a R$1.00. Por favor corrija o valor ou opte por criar uma ordem de serviço com os detalhes desta cobrança.' });
                  return;
                }

                if (!vm.chargeStatus) {
                  vm.chargeStatusDiv = true;
                  vm.etapaDados = false;
                  vm.etapaConfirmacao = false;
                }
                else {
                  vm.etapaDados = false;
                  vm.etapaConfirmacao = true;
                  vm.chargeStatusDiv = false;
                }
            }
            
            function onTapCancel(number){
                vm.etapaDados = true;
                vm.etapaConfirmacao = false;
                vm.chargeStatusDiv = false;
                if (number == 1){
                    vm.amount = 0;
                    vm.comment = '';
                    vm.cobrancaRealizada = false;   
                }
            }
            
            function onTapPagar(){
    
                console.log('tap pagar boleto')
                console.log(parseInt(vm.amount))
              var em = vm.amount.toString().split(".");
              console.log(em[0]);
              if (em[1] != undefined) {
                vm.amount = vm.amount.toString().replace(".", "")
              }
    
                vm.disableTapPay = true;
                vm.message = 'Iniciando transação';
                vm.instructions = 'FoneClub - 2017'
                // debugger;
                // PagarmeService.postBoleto(vm.amount, vm.commentBoleto, existentCustomer)
                //  .then(function(result){
                //     console.log(result);

                if(!vm.expirationDateField)
                {
                    vm.expirationDateField = 5; 
                }
                else{
                   if(vm.expirationDateField <= 0)
                   {
                    vm.expirationDateField = 5; 
                   } 
                }

                     PagarmeService.postBoletoDirect(vm.amount, vm.commentBoleto, existentCustomer, addExpirationDays(vm.expirationDateField)).then(function(resultCapture){
    
                        
                        try{
                            var chargingLog = {
                                'customer': existentCustomer,
                                'ammount': vm.amount,
                                'pagarmeResponse': resultCapture,
                                'boletoComment':vm.commentBoleto,
                                'customerComment':vm.customerComment,
                                'foneclubeComment' : vm.comment
                            };
                            
                            // debugger
                            FoneclubeService.postChargingLog(JSON.stringify(chargingLog), customerId).then(function(result){
                                console.log(result);
                            })
                            .catch(function(error){
                                console.log('catch error');
                                console.log(error);
                                var teste1 = emailObject;
                                var teste2 = existentCustomer;
                                var teste3 = vm.amount;
                                alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                            });
                        }
                        catch(erro){
                            var teste1 = emailObject;
                            var teste2 = existentCustomer;
                            var teste3 = vm.amount;
                            alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                        }

                        // debugger;
                            if(vm.enviaEmail)
                            {
                                // debugger;
                                if(vm.customerComment == undefined)
                                    vm.customerComment = ''

                                var emailObject = {
                                    'To': existentCustomer.email, //existentCustomer.email
                                    'TargetName' : existentCustomer.name,
                                    'TargetTextBlue': resultCapture.boleto_url,
                                    'TargetSecondaryText' : vm.customerComment,
                                    // 'CustomerComment':vm.customerComment,
                                    'TemplateType' : 2
                                }
                                
                                vm.boleto_url = resultCapture.boleto_url;

                                // debugger;

                                if(vm.pagar && vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente != '0.00')
                                {
                                    emailObject.DiscountPrice = ($filter('currency')(vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente / 100, "")).replace('.',',')
                                }


                                FoneclubeService.postSendEmail(emailObject).then(function(result){
                                    console.log('FoneclubeService.postHistoryPayment');
                                    console.log(result);
                                })
                                .catch(function(error){
                                    console.log('catch error');
                                    console.log(error);
                                });
                            }

                            if(vm.enviaWhatsapp){
                                debugger;
                              //Send message to whatsapp
                              if(vm.customerComment == undefined)
                                    vm.customerComment = ''

                                var messageObject = {
                                    'ClientId': vm.customer.Id, //existentCustomer.email
                                    'ClientName' : vm.customer.Name,
                                    'CurrentYear': vm.year,
                                    'CurrentMonth' : vm.month,
                                    'CurrentDate' : vm.expirationDateField,
                                    'AmountTemp':vm.amountTemp,
                                    'ValorTotalLiberadoParaPagarCliente':vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente,
                                    'AmountTemp1':vm.amountTemp1,
                                    'CustomerComment':vm.customerComment,
                                    'CommentBoleto':vm.commentBoleto,
                                    'Comment':vm.comment
                                }
                                FoneclubeService.postSendChargeMessage(messageObject).then(function(result){
                                    console.log('Whatsapp Message sent');
                                    console.log(result);
                                })
                                .catch(function(error){
                                    console.log('Whats app message could not sent. See error log bellow:');
                                    console.log(error);
                                });
                            }
                            
    
                            try{
                              vm.TransactionId = resultCapture.tid;
                                PagarmeService.notifyCustomerBoleto(resultCapture.id, existentCustomer.email).then(function(resultNotify){
                                vm.message = 'Boleto gerado com sucesso'
                                vm.cobrancaRealizada = true;
                                vm.disableTapPay = false;
                                    })
                                    .catch(function(error){
                                    try{
                                        vm.message = 'Boleto gerado com sucesso. Sem envio de notificação'
                                        vm.cobrancaRealizada = true;
                                        vm.disableTapPay = false;                                    
                                    }
                                    catch(erro){
                                        vm.message = 'Boleto gerado com sucesso. Sem envio de notificação'
                                        vm.cobrancaRealizada = true;
                                        vm.disableTapPay = false;                                    
                                    }
                                    console.log(error);
    
                                });
    
                            }
                            catch(erro){
    
                            }
    
    
                        saveHistoryPayment(resultCapture.id, resultCapture.acquirer_id);
    
                            vm.message = 'Boleto gerado com sucesso'
                        })
                        .catch(function(error){
                            try{
                                DialogFactory.showMessageDialog({mensagem: 'Erro na captura da transação' + error.status});                             
                            }
                            catch(erro){
                                DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação'});                             
                            }
                            console.log(error);
                        });
                // }, function (error) {
                //     DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                //     vm.disableTapPay = false;
                // }).catch(function (error) {
                //     DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                //     vm.disableTapPay = false;
                // });
    
            }
    
            function saveHistoryPayment(idBoleto, acquirer_id){
              
                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:vm.comment,
                        CommentEmail:vm.customerComment,
                        CommentBoleto:vm.commentBoleto,
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: BOLETO,
                        BoletoId: idBoleto,
                        AcquireId: acquirer_id,
                        AnoVingencia:vm.year,
                        MesVingencia: vm.month,
                      ChargeStatus: vm.chargeStatus,
                      TransactionId: vm.TransactionId,
                      ComissionConceded: vm.pagar // need to see the property nameComissionConceded
                    }
                }
    
                FoneclubeService.postHistoryPayment(customerCharging).then(function (result) {

                    if(vm.pagar)
                    {
                        FoneclubeService.dispatchedCommision(vm.customer.Id).then(function (result) {

                          if(!result)
                            alert('Não foi possível dar baixa em comissão');
                            

                            // FoneclubeService.dispatchedBonus(vm.customer.Id).then(function (result) {
                              
                            //   debugger
                            //   if(!result)
                            //     alert('Não foi possível dar baixa em comissão');

                            // })
                            // .catch(function (error) {
                            //   alert('Não foi possível dar baixa em comissão');
                            // })

                        })
                        .catch(function (error) {
                          alert('Não foi possível dar baixa em comissão');
                        })
                    }
                   
                     
                    })
                    .catch(function(error){
                        // debugger
                        alert('Aviso em verificação secundária, printar tela -  ' 
                        + '_' + customerCharging.Id
                        + '_' + customerCharging.ChargeStatus
                        + '_' + customerCharging.TransactionId
                        + '_' + customerCharging.ComissionConceded
                        + '_' + customerCharging.Charging.Comment
                        + '_' + customerCharging.Charging.CommentEmail
                        + '_' + customerCharging.Charging.CommentBoleto
                        + '_' + customerCharging.Charging.Ammount
                        + '_' + customerCharging.Charging.CollectorName
                        + '_' + customerCharging.Charging.PaymentType
                        + '_' + customerCharging.Charging.BoletoId
                        + '_' + customerCharging.Charging.AcquireId
                        + '_' + customerCharging.Charging.AnoVingencia
                        + '_' + customerCharging.Charging.MesVingencia
                        + '  bc372'
                        )
                        console.log('catch error');
                        console.log(error);
                    });
        
        
                }
                function getContactPhone(customer){

                    try{
                        return {
                            'ddd' : customer.Phones[0].DDD.toString(),
                            'number' : customer.Phones[0].Number.toString()
                        }
                    }
                    catch(e){
                        return {
                            'ddd' : '21',
                            'number' : '997865645'
                        }
                    }
                    

                var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
                if (!contacts || contacts.length == 0  || contacts[0].DDD == '' || contacts[0].Number == '') {
                    // debugger
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                    return null;
                } else {
                    return {
                        'ddd' : contacts[0].DDD.toString(),
                        'number' : contacts[0].Number.toString()
                    }
                }
            }
            
            function getAddress(customer) {
                var address = customer.Adresses;
                if (!address || address.length == 0) {
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                    return null;
                } else {
                    return {
                        'street' : address[0].Street,
                        'street_number' : address[0].StreetNumber,
                        'neighborhood' : address[0].Neighborhood,
                        'zipcode' : address[0].Cep,
                        'city': address[0].City,
                        'uf': address[0].State
                    }
                }
            }
            
            function onTapPaymentHistoryDetail(history) {
                ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
            }

            
            function addExpirationDays(days) {
                var dat = new Date();
                dat.setDate(dat.getDate() + days);
                return dat.toISOString();
              }
    
        }
    })();

(function() {
  'use strict';

  angular.module('foneClub').controller('CommentController', CommentController);

  CommentController.inject = [
    'ViewModelUtilsService',
    'PagarmeService',
    'MainUtils',
    'FoneclubeService',
    'DialogFactory',
    'UtilsService'
  ];

  function CommentController(
    ViewModelUtilsService,
    PagarmeService,
    MainUtils,
    FoneclubeService,
    DialogFactory,
    UtilsService
  ) {
    var vm = this;
    // debugger;
    vm.onTapAddComment = onTapAddComment;
    var customer = ViewModelUtilsService.modalCommentData;

    vm.customer = customer;

    function onTapAddComment(data) {
      // debugger;
      data.intIdPerson = customer.Id;

      FoneclubeService.postCustomerComment(data).then(function(result) {
        // debugger;
        console.log(result);
        if (result) {
          DialogFactory.showAlertDialog({ message: 'Inserido com sucesso' });
        } else {
          DialogFactory.showAlertDialog({ message: 'Inserido falhou' });
        }
      }); /* 
            .catch(function(error){
                console.log('catch error');
                console.log(error);
            }); */
    }
  }
})();

(function () {
  'use strict';

  angular
    .module('foneClub')
    .controller('CustomerModalController', CustomerModalController);

  CustomerModalController.inject = [
    'ViewModelUtilsService',
    'PagarmeService',
    'FoneclubeService',
    'FlowManagerService',
    'DialogFactory'
  ];

  function CustomerModalController(
    ViewModelUtilsService,
    PagarmeService,
    FoneclubeService,
    FlowManagerService,
    DialogFactory
  ) {

    var vm = this;

    var customer = ViewModelUtilsService.modalCustomerData;

    var CARTAO = 1;
    var BOLETO = 2;
    vm.so_cnt = 0;
    vm.co_cnt = 0;

    var carregandoPagarme = false;
    vm.showCards = true;
    vm.showChargings = true;
    vm.showServiceOrders = true;
    vm.showSecundaryChargings = false;
    vm.showFlags = false;
    vm.flags = [];

    vm.month = new Date().getMonth() + 1;
    vm.year = new Date().getFullYear();
    vm.mensagemPagarme = 'Refresh DB';

    vm.onTapNewCardPayment = onTapNewCardPayment;
    vm.onTapBoleto = onTapBoleto;
    vm.onTapCard = onTapCard;
    vm.onTapEditar = onTapEditar;
    vm.onTapExcluir = onTapExcluir;
    vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;
    vm.onTapOrdemServico = onTapOrdemServico;
    vm.cancelarPagamento = etapaEscolhaCartao;
    vm.onTapComment = onTapComment;
    vm.onTapFlag = onTapFlag;
    vm.customer = customer;

    vm.onTapUpdatePagarme = onTapUpdatePagarme;
    vm.onResentEmail = onResentEmail;
    vm.onClickCardTitle = onClickCardTitle;
    vm.onClickChargingsTitle = onClickChargingsTitle;
    vm.onClickServiceOrdersTitle = onClickServiceOrdersTitle;
    vm.onClickSecundaryChargingsTitle = onClickSecundaryChargingsTitle;
    vm.onClickFlagsTitle = onClickFlagsTitle;
    vm.editPendingFlag = editPendingFlag;
    vm.formatDate = formatDate;
    vm.onTapDebito = onTapDebito;

    init();

    function init() {
      // debugger
      if (!customer.IdPagarme) {
        PagarmeService.getCustomer(customer.DocumentNumber)
          .then(function (result) {
            try {
              var pagarmeID = result[0].id;
              updatePagarmeId(pagarmeID);
              initCardList(pagarmeID);
              etapaEscolhaCartao();
            } catch (erro) {
              console.log(erro);
              etapaEscolhaCartao();
            }
          })
          .catch(function (error) {
            console.log(error);
            etapaEscolhaCartao();
          });
      } else {
        etapaEscolhaCartao();
        initCardList(customer.IdPagarme);
      }

      FoneclubeService.getPersonFlags(customer.Id).then(
        function (result) {
          var lista = result;
          lista.reverse();
          vm.flags = lista
        }
      );



      FoneclubeService.getStatusChargingOfCustomer(customer.Id, vm.month, vm.year).then(
        function (result) {
          vm.charged_status = result[0];
        }
      );

      FoneclubeService.getChargeAndServiceOrderHistory(customer.Id).then(function (result){
        
        debugger;
        vm.chargesAndOrders = result;
        vm.chargesArray = [];
        vm.osArray = [];
        vm.osDescArray = [];
        // debugger;

        for (var i in vm.chargesAndOrders) {
          // if (parseInt(i) >= 203) {
          //   // debugger
          // }

          var data = vm.chargesAndOrders[+i];

          if (data.IsCharge) {
            try {
              vm.chargesAndOrders[i].Charges.resentMessage = 'Reenviar email';
            } catch (e) { }

            
            data.Charges.descriptionType = data.Charges.PaymentType == CARTAO ? 'Cartão de crédito' : 'Boleto';

            var DEBITO = 3;
            if(data.Charges.PaymentType == DEBITO)
               data.Charges.descriptionType = "Débito";

            if (data.Charges) {
              if (data.Charges.BoletoExpires) {
                var expiryDate = new Date(data.Charges.ExpireDate);
                var expiryDateAfter4 = new Date(data.Charges.ExpireDate);
                expiryDateAfter4.setDate(expiryDateAfter4.getDate() + 3);

                var currentDate = new Date();
                if (data.Charges.PaymentStatusDescription == "Paid") {
                  data.Charges.statusColor = "Green";
                }
                else if (data.Charges.descriptionType == "Boleto" && data.Charges.PaymentStatusDescription == "WaitingPayment" && currentDate <= expiryDate) {
                  //  change status to "Aguardando Pagamento" = Green Icon
                  data.Charges.statusColor = "Green";
                }
                else if (data.Charges.descriptionType == "Boleto" && data.Charges.PaymentStatusDescription == "WaitingPayment" && currentDate < expiryDateAfter4) {
                  //change status to "Pendente Pagamento"   Yello Icon
                  data.Charges.statusColor = "Yellow";
                }
                else if (data.Charges.descriptionType == "Boleto" && data.Charges.PaymentStatusDescription == "WaitingPayment" && currentDate > expiryDateAfter4) {
                  // change status to "Pendente Pagamento"   RED Icon
                  data.Charges.statusColor = "Red";
                }
                else {
                  data.Charges.statusColor = "grey";
                }
              }
              else {
                if (data.Charges.PaymentStatusDescription == "Paid") {
                  data.Charges.statusColor = "Green";
                }
                else {
                  data.Charges.statusColor = "grey";
                }
              }
            }

            if (data.Charges.PaymentType == CARTAO && data.Charges.PaymentStatusDescription == 'Paid') {
              data.Charges.PaymentStatusDescription = 'Accepted';
            }
            vm.chargesArray.push(data); // na moral ning merece
          }
          if (data.IsServiceOrder) {
            // debugger
            vm.osArray.push(data);
          }
        }
        // debugger
        for (var i in vm.osArray) {
          vm.osDescArray.push(vm.osArray[vm.osArray.length - i]);
        }

        customer.chargesAndOrders = vm.chargesAndOrders;
      });

      FoneclubeService.getHistoryPayment(customer.Id)
        .then(function (result) {
          vm.histories = result;
          for (var i in vm.histories) {
            var history = vm.histories[i];
            history.descriptionType =
              history.PaymentType == CARTAO ? 'Cartão de crédito' : 'Boleto';

            if (history.PaymentType == BOLETO) {
            }
          }
          customer.histories = vm.histories;
        })
        .catch(function (error) {
          console.log('catch error');
          console.log(error);
        });

      FoneclubeService.getTblServiceOrders(customer.Id)
        .then(function (result) {
          console.log('FoneclubeService.getTblServiceOrders');
          console.log(result);
          vm.orders = result;
        })
        .catch(function (error) {
          console.log('catch error');
          console.log(error);
        });

      FoneclubeService.getChargingLog(customer.Id)
        .then(function (result) {
          console.log('getChargingLog');
          // debugger;
          vm.historyLog = [];
          for (var i in result) {
            vm.historyLog.push(JSON.parse(result[i]));
          }
          // debugger;
        })
        .catch(function (error) {
          console.log('catch error');
          console.log(error);
        });
    }

    function formatDate(date) {
      date = date.split(' ')[0];
      var dateOut = new Date(date);
      dateOut = dateOut.getDate() + "/" + getMonth(dateOut.getMonth()) + "/" + dateOut.getFullYear().toString().substring(2);
      return dateOut;
    }

    function getMonth(monthNumber) {
      var months = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"];
      return months[monthNumber];
    }

    function onTapUpdatePagarme() {
      if (!carregandoPagarme) {
        carregandoPagarme = true;
        vm.mensagemPagarme = 'Aguarde...';
        FoneclubeService.getUpdatePagarme().then(function (result) {
          if (result)
            alert('Lista pagarme atualizada, por favor recarregue a página sem cache.');
          else alert('Lista pagarme não atualizada');

          carregandoPagarme = false;
          vm.mensagemPagarme = 'Refresh DB';
        });
      }
    }

    function onTapExcluir() {
      var personCheckout = {
        DocumentNumber: customer.DocumentNumber
      };
      DialogFactory.dialogConfirm({
        mensagem:
          'Atenção essa ação irá excluir o cliente da base foneclube, após exclusão não terá volta, deseja proseguir?'
      }).then(function (value) {
        if (value) {
          FoneclubeService.postDeletePerson(personCheckout)
            .then(function (result) {
              console.log(result);
              if (result) {
                DialogFactory.showMessageDialog({
                  message:
                    'Usuário foi removido com sucesso, no próximo carregamento da lista ele não será mais exibido'
                });
                closeThisDialog(0);
              } else DialogFactory.showMessageDialog({ message: 'Usuário não foi removido, guarde o documento dele: ' + customer.DocumentNumber });
            })
            .catch(function (error) {
              console.log('catch error');
              console.log(error);
            });
        }
      });
    }

    function setStatusBoleto(history) {
      console.log('setStatusBoleto');
      console.log(history);
      PagarmeService.getStatusBoleto(history.BoletoId).then(function (result) {
        history.StatusPayment = result[0].status;
        boleto_url;
      });
    }

    function updatePagarmeId(pagarmeID) {
      var personCheckout = {
        DocumentNumber: customer.DocumentNumber,
        IdPagarme: pagarmeID
      };

      FoneclubeService.postUpdatePerson(personCheckout)
        .then(function (result) {
          console.log(result);
          initCardList(pagarmeID);
        })
        .catch(function (error) {
          console.log('catch error');
          console.log(error);
        });
    }

    function onTapNewCardPayment() {
      console.log('onTapNewCardPayment');
      ViewModelUtilsService.showModalNewCardPayment(customer);
    }

    function onTapComment() {
      ViewModelUtilsService.showModalComment(customer);
    }

    function onTapFlag() {
      ViewModelUtilsService.showModalFlag(customer);
    }

    function initCardList(customerId) {
      PagarmeService.getCard(customerId)
        .then(function (result) {
          vm.cards = result.sort(function (a, b) {
            return new Date(b.date_updated) > new Date(a.date_updated) ? 1 : -1;
          });
        })
        .catch(function (error) {
          console.log(error);
          vm.message = 'falha ao recuperar cartão';
        });
    }

    function onTapCard(card) {
      ViewModelUtilsService.showModalExistentCardPayment(customer, card);
    }

    function onTapBoleto(card) {
      ViewModelUtilsService.showModalBoleto(customer);
    }

    function onTapPagar() {
      vm.message = 'Transação iniciada';
      var customer;

      if (
        !vm.customer.address ||
        !vm.customer.phone ||
        !vm.customer.email ||
        !vm.customer.document_number ||
        !vm.customer.name
      ) {
        customer = {
          name: vm.customer.name,
          document_number: vm.customer.document_number,
          email: vm.customer.email,
          address: {
            street: 'empty',
            street_number: '10',
            neighborhood: 'empty',
            zipcode: '01452000'
          },
          phone: {
            ddd: '00',
            number: '000000000'
          }
        };
      }

      PagarmeService.postTransactionExistentCard(vm.amount, vm.card.id, customer).then(
        function (result) {
          vm.message = 'Transação efetuada';
          PagarmeService.postCaptureTransaction(result.token, vm.amount)
            .then(function (result) {
              vm.message = 'Transação concluída';
            })
            .catch(function (error) {
              try {
                vm.message = 'Erro na captura da transação' + error.status;
              } catch (erro) {
                vm.message = 'Erro na captura da transação';
              }
              console.log(error);
            });
        }
      );
    }

    function etapaEscolhaCartao() {
      vm.amount = '';
      vm.etapaEscolhaCartao = true;
      vm.etapaQuantia = false;
    }

    function etapaQuantia() {
      vm.etapaEscolhaCartao = false;
      vm.etapaQuantia = true;
    }

    function onTapEditar() {
      FlowManagerService.changeEdicaoView(customer);
    }

    function onTapPaymentHistoryDetail(history) {
      ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
    }

    function onTapOrdemServico() {
      FlowManagerService.changeOrdemServicoView(customer);
    }

    function onResentEmail(charge) {
      debugger;
      var DEBITO = 3;
      if(charge.PaymentType == DEBITO)
      {
       alert('ainda não é possível reenviar email de cobrança de débito');
       return; 
      }

      DialogFactory.dialogConfirm({
        mensagem: 'Tem certeza que deseja reenviar o email dessa cobrança?'
      }).then(function (value) {
        if (value) {
          if (charge.resentMessage != 'Enviando...') {
            charge.resentMessage = 'Enviando...';
            console.log(vm.customer);
            if (charge.PaymentType == BOLETO) {
              var boletoUrl = '';
              if (charge.boleto_url) boletoUrl = charge.boleto_url;

              var emailObject = {
                To: vm.customer.Email,
                TargetName: vm.customer.Name,
                TargetTextBlue: boletoUrl,
                TargetSecondaryText: charge.CommentEmail,
                TemplateType: BOLETO,
                DiscountPrice: (charge.Ammount / 100).toFixed(2).replace('.', ',')
              };

              // emailObject.DiscountPrice = ($filter('currency')(vm.bonus / 100, "")).replace('.',',');

              FoneclubeService.postSendEmail(emailObject)
                .then(function (result) {
                  console.log(result);
                  charge.resentMessage = 'Reenviar email';
                  DialogFactory.showMessageDialog({
                    mensagem: 'Email reenviado com sucesso',
                    titulo: 'Informação'
                  });
                })
                .catch(function (error) {
                  console.log('catch error');
                  console.log(error);
                  charge.resentMessage = 'Reenviar email';
                  DialogFactory.showMessageDialog({
                    mensagem: 'Email não reenviado ' + error.message,
                    titulo: 'Informação'
                  });
                });
            }

            if (charge.PaymentType == CARTAO) {
              var emailObject = {
                To: vm.customer.Email,
                TargetName: vm.customer.Name,
                TargetTextBlue: (charge.Ammount / 100).toFixed(2).replace('.', ','),
                TargetSecondaryText: charge.CommentEmail,
                TemplateType: CARTAO
              };

              FoneclubeService.postSendEmail(emailObject)
                .then(function (result) {
                  console.log(result);
                  charge.resentMessage = 'Reenviar email';
                  DialogFactory.showMessageDialog({
                    mensagem: 'Email reenviado com sucesso',
                    titulo: 'Informação'
                  });
                })
                .catch(function (error) {
                  console.log('catch error');
                  console.log(error);
                  charge.resentMessage = 'Reenviar email';
                  DialogFactory.showMessageDialog({
                    mensagem: 'Email não reenviado ' + error.message,
                    titulo: 'Informação'
                  });
                });
            }
          }
        }
      });
    }

    function onClickCardTitle() {
      console.log('teste')
      vm.showCards = !vm.showCards;
    }

    function onClickChargingsTitle() {
      vm.showChargings = !vm.showChargings;
    }

    function onClickServiceOrdersTitle() {
      vm.showServiceOrders = !vm.showServiceOrders;
    }

    function onClickSecundaryChargingsTitle() {
      vm.showSecundaryChargings = !vm.showSecundaryChargings;
    }

    function onClickFlagsTitle() {
      vm.showFlags = !vm.showFlags;
      console.log(vm.showFlags)
    }

    function onTapDebito(customer) {
      ViewModelUtilsService.showModalDebito(customer);
    }

    function editPendingFlag(flag) {
      // alert('Edição ainda não implementada')
      debugger;
      var tempFlag = {
        'Id': flag.Id,
        'PendingInteraction': !flag.PendingInteraction
      }

      FoneclubeService.postUpdateFlag(tempFlag).then(function (result) {
        debugger
        console.log(result);
        if (result) {
          flag.PendingInteraction = !flag.PendingInteraction
          DialogFactory.showAlertDialog({ message: 'Flag alterada com sucesso' });
        } else {
          DialogFactory.showAlertDialog({ message: 'Update de flag falhou' });
        }
      });
    }

    //clientes com flag em aberto aparece icone de bandeira preenchida, os que não tiverem, bandeira vazia
    // ao clicar na bandeira cheia abre modal com flags expandidas, caso contrário abrem colapsado
  }
})();

(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('DebitoModalController', DebitoModalController);
    
        DebitoModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService', '$filter'];
        function DebitoModalController(ViewModelUtilsService, PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService, $filter) {


            console.log('--- DebitoModalController ---');
            var vm = this;
            vm.date = new Date();
            var customer = ViewModelUtilsService.modalBoletoData;
            vm.customer = customer;
            var newCustomer;
            vm.etapaDados = true;
            vm.chargeDisabled = true;
            vm.cobrancaRealizada = false;
            vm.amount 
            try{
              vm.amount = vm.customer.CacheIn ? vm.customer.CacheIn : '';
            }
            catch(e){}
            vm.comment = '';
            vm.onTapPagar = onTapPagar;
            vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
            vm.onTapCancel = onTapCancel;
            vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;
            vm.checkOne = checkOne;
            vm.enviaEmail = true;
            vm.enviaWhatsapp = true;
            vm.calculate = calculate;
            vm.years = [2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010];
            vm.months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

            vm.amount = 0;
            vm.amountTemp = 0;
            vm.amountTemp1 = 0;
            vm.bonus = 0;
            vm.totaisComissoes = {};
            vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente = 0;
            vm.expirationDateField = 3;
            vm.year = new Date().getFullYear().toString();
            vm.month = (new Date().getMonth() + 1).toString();
            vm.hasDebitoCard = true;
            
            var customerId = customer.Id;
            var existentCustomer = {
                        'name' : customer.Name,
                        'document_number' : customer.DocumentNumber,
                        'email' : customer.Email,
                        'address' : getAddress(customer),
                        'phone' : getContactPhone(customer)
    
            }

            vm.Padrão = false;
            vm.Excepcional = false;

            var CARTAO = 1;
            var BOLETO = 2;
            var DEBITO = 3;

            init();
            calculate();

          function init() {
            FoneclubeService.getHistoryPayment(customer.Id).then(function (result) {
              vm.histories = result;
              for (var i in vm.histories) {
                var history = vm.histories[i];
                history.descriptionType = (history.PaymentType == CARTAO) ? 'Cartão de crédito' : 'Boleto';
                if (i == 0) {
                  vm.commentBoleto
                  vm.comment = history.Comment;
                  vm.amount = history.Ammount / 100;

                  vm.amountTemp = vm.amount.toFixed(2);
                  vm.amountTemp1 = vm.amount.toFixed(2);
                }
                if (history.PaymentType == BOLETO) {
                  PagarmeService.getStatusBoleto(history.BoletoId).then(function (result) {
                    if (result.length > 0) {
                      history.StatusPayment = result[0].status;
                    }
                  })
                }
              }
              customer.histories = vm.histories;
            })
            .catch(function (error) {

            });

            FoneclubeService.getTotaisComissoes(customer.Id).then(function (result) {
              console.log('FoneclubeService.getTotaisComissoes')
              console.log(result)
              vm.totaisComissoes = result;

            })
            

            FoneclubeService.getCommision(customer.Id).then(function (result) {
              vm.bonus = parseFloat(result.Ammount / 100).toFixed(2);
              calculate();
            })
              .catch(function (error) {

              });


              FoneclubeService.getStatusCardDebito(customer.Id).then(function (result) {
                console.log('cartao debito')
                console.log(result)
                vm.hasDebitoCard = result;
              })
              .catch(function (error) {

              });
          }

          function checkOne(val) {
            //alert('xx');
            vm.chargeDisabled = false;
            if (val == '1') {
              vm.chargeStatusfirst = true;
              vm.chargeStatusSecond = false;
              vm.chargeStatus = 1;
            }
            if (val == '2') {
              vm.chargeStatusSecond = true;
              vm.chargeStatusfirst = false;
              vm.chargeStatus = 2;
            }
          }



          function calculate() {
            var amount = vm.amountTemp.toString().indexOf('.') > -1 ? parseFloat(vm.amountTemp) : parseFloat(vm.amountTemp) / 100;
            var bonus = vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente.toString().indexOf('.') > -1 ? parseFloat(vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente) : parseFloat(vm.totaisComissoes.ValorTotalLiberadoParaPagarCliente) / 100;
            vm.amountTemp1 = vm.pagar ? parseFloat(amount - bonus) : amount;
            if (vm.pagar) {
              vm.amount = parseFloat(vm.amountTemp1).toFixed(2);
            }
            else {
              vm.amount = parseFloat(amount).toFixed(2);
            }

            if (isNaN(vm.amount)) {
              vm.amount = 0;
            }

            vm.amountTemp1 = vm.amount;
          }

          function onTapConfirmarPagamento() {
            debugger
            if(!vm.hasDebitoCard && !vm.newDebitCard)
            {
              alert('cliente sem cartão de débito')
              return;
            }

            var card = getCardData();

            if(!card && vm.newDebitCard){
              alert('pendente dados de cartão de débito')
               return;
            }

            if(vm.newDebitCard)
            {
              if((card.HolderName == '' || card.HolderName == undefined) ||
              (card.ExpirationMonth == '' || card.ExpirationMonth == undefined) ||
              (card.ExpirationYear == '' || card.ExpirationYear == undefined) ||
              (card.Number == '' || card.Number == undefined) ||
              (card.Cvv == '' || card.Cvv == undefined)){
               alert('pendente dados de cartão de débito')
               return;
              }
            }
            

            // HolderName: vm.cardHolderName.toUpperCase(),
            // ExpirationMonth: vm.cardExpirationMonth,
            // ExpirationYear: vm.cardExpirationYear,
            // Number: vm.cardNumber,
            // Cvv:vm.cardCVV

            //alert(vm.Excepcional);
            //if (!vm.claro) {
            //  vm.Excepcional
                // if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                //     return;
                // }

                if (parseInt(vm.amount) < 1) {
                  DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Não é possível criar uma cobrança com valor inferior a R$1.00. Por favor corrija o valor ou opte por criar uma ordem de serviço com os detalhes desta cobrança.' });
                  return;
                }

                if (!vm.chargeStatus) {
                  vm.chargeStatusDiv = true;
                  vm.etapaDados = false;
                  vm.etapaConfirmacao = false;
                }
                else {
                  vm.etapaDados = false;
                  vm.etapaConfirmacao = true;
                  vm.chargeStatusDiv = false;
                }
            }
            
            function onTapCancel(number){
                vm.etapaDados = true;
                vm.etapaConfirmacao = false;
                vm.chargeStatusDiv = false;
                if (number == 1){
                    vm.amount = 0;
                    vm.comment = '';
                    vm.cobrancaRealizada = false;   
                }
            }
            
            function onTapPagar(){
    
              console.log('tap pagar Debito');
              console.log(parseInt(vm.amount));

              var em = vm.amount.toString().split(".");
              if (em[1] != undefined) 
                vm.amount = vm.amount.toString().replace(".", "")
    
              vm.disableTapPay = true;
              vm.message = 'Iniciando transação';
              vm.instructions = 'FoneClub - 2017'

              if(!vm.expirationDateField)
                  vm.expirationDateField = 5; 
              else{
                  if(vm.expirationDateField <= 0)
                  vm.expirationDateField = 5; 
              }


              debugger;
              var customerCharging = {
                Id: vm.customer.Id,
                Charging:{
                    Comment:vm.comment,
                    CommentEmail:vm.customerComment,
                    CommentBoleto:vm.commentBoleto,
                    Ammount: vm.amount,
                    CollectorName: MainUtils.getAgent(),
                    PaymentType: DEBITO,
                    // BoletoId: idBoleto,
                    // AcquireId: acquirer_id,
                    AnoVingencia:vm.year,
                    MesVingencia: vm.month,
                  ChargeStatus: vm.chargeStatus,
                  TransactionId: vm.TransactionId,
                  ComissionConceded: vm.pagar // need to see the property nameComissionConceded
                },
                Card:getCardData()
            }

            debugger;
            FoneclubeService.postDebitoTransaction(customerCharging).then(function(result){
                console.log(result);
                debugger;
                if(result.Charged)
                {
                  vm.message = 'Cobrança por débito gerada'
                  vm.cobrancaRealizada = true;
                  vm.disableTapPay = false;
                }
                else{
                  vm.message = 'Cobrança com falha'
                  vm.cobrancaRealizada = false;
                  vm.disableTapPay = false;
                }

            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                var teste1 = emailObject;
                var teste2 = existentCustomer;
                var teste3 = vm.amount;
                alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
            });
                    
            }
    
            function saveHistoryPayment(idBoleto, acquirer_id){
              
                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:vm.comment,
                        CommentEmail:vm.customerComment,
                        CommentBoleto:vm.commentBoleto,
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: BOLETO,
                        BoletoId: idBoleto,
                        AcquireId: acquirer_id,
                        AnoVingencia:vm.year,
                        MesVingencia: vm.month,
                      ChargeStatus: vm.chargeStatus,
                      TransactionId: vm.TransactionId,
                      ComissionConceded: vm.pagar // need to see the property nameComissionConceded
                    }
                }
    
                FoneclubeService.postHistoryPayment(customerCharging).then(function (result) {

                    if(vm.pagar)
                    {
                        FoneclubeService.dispatchedCommision(vm.customer.Id).then(function (result) {

                          if(!result)
                            alert('Não foi possível dar baixa em comissão');
                            

                        })
                        .catch(function (error) {
                          alert('Não foi possível dar baixa em comissão');
                        })
                    }
                   
                     
                    })
                    .catch(function(error){
                        // debugger
                        alert('Aviso em verificação secundária, printar tela -  ' 
                        + '_' + customerCharging.Id
                        + '_' + customerCharging.ChargeStatus
                        + '_' + customerCharging.TransactionId
                        + '_' + customerCharging.ComissionConceded
                        + '_' + customerCharging.Charging.Comment
                        + '_' + customerCharging.Charging.CommentEmail
                        + '_' + customerCharging.Charging.CommentBoleto
                        + '_' + customerCharging.Charging.Ammount
                        + '_' + customerCharging.Charging.CollectorName
                        + '_' + customerCharging.Charging.PaymentType
                        + '_' + customerCharging.Charging.BoletoId
                        + '_' + customerCharging.Charging.AcquireId
                        + '_' + customerCharging.Charging.AnoVingencia
                        + '_' + customerCharging.Charging.MesVingencia
                        + '  bc372'
                        )
                        console.log('catch error');
                        console.log(error);
                    });
        
        
                }
                function getContactPhone(customer){

                    try{
                        return {
                            'ddd' : customer.Phones[0].DDD.toString(),
                            'number' : customer.Phones[0].Number.toString()
                        }
                    }
                    catch(e){
                        return {
                            'ddd' : '21',
                            'number' : '997865645'
                        }
                    }
                    

                var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
                if (!contacts || contacts.length == 0  || contacts[0].DDD == '' || contacts[0].Number == '') {
                    // debugger
                    // DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                    // return null;
                } else {
                    return {
                        'ddd' : contacts[0].DDD.toString(),
                        'number' : contacts[0].Number.toString()
                    }
                }
            }
            
            function getAddress(customer) {
                var address = customer.Adresses;
                if (!address || address.length == 0) {
                    // DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                    // return null;
                } else {
                    return {
                        'street' : address[0].Street,
                        'street_number' : address[0].StreetNumber,
                        'neighborhood' : address[0].Neighborhood,
                        'zipcode' : address[0].Cep,
                        'city': address[0].City,
                        'uf': address[0].State
                    }
                }
            }
            
            function onTapPaymentHistoryDetail(history) {
                ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
            }

            
            function addExpirationDays(days) {
                var dat = new Date();
                dat.setDate(dat.getDate() + days);
                return dat.toISOString();
            }

            function getCardData(){  
              try{
                return {
                  HolderName: vm.cardHolderName.toUpperCase(),
                  ExpirationMonth: vm.cardExpirationMonth,
                  ExpirationYear: vm.cardExpirationYear,
                  Number: vm.cardNumber,
                  Cvv:vm.cardCVV,
                  Flag:vm.cardFlag
              }
              }
              catch(e){
                return false;
              }
          }
    
        }
    })();

(function () {
  'use strict';

  angular
    .module('foneClub')
    .controller('EdicaoController', EdicaoController)
    .directive('ngPrism', function () {
      return {
        restrict: 'A',
        link: function (scope, element, attrs) {
          element.ready(function () {
            Prism.highlightElement(element[0]);
          });
        }
      };
    });


  EdicaoController.inject = ['$scope', 'DataFactory', 'ViewModelUtilsService', 'FoneclubeService', 'MainUtils', '$stateParams', 'FlowManagerService', '$timeout', 'HubDevService', '$q', '$ionicScrollDelegate', 'UtilsService', 'DialogFactory', 'ngDialog', '$http', '$sce', '$rootScope', 'localStorageService', '$templateCache'];
  function EdicaoController($scope, DataFactory, ViewModelUtilsService, FoneclubeService, MainUtils, $stateParams, FlowManagerService, $timeout, HubDevService, $q, $ionicScrollDelegate, UtilsService, DialogFactory, ngDialog, $http, $sce, $rootScope,localStorageService, $templateCache) {

    var checkvalidate = localStorageService.get("userid");
    if (checkvalidate == null) {
      FlowManagerService.changeLoginView();
    }
    var vm = this;
    vm.showLoader = false;
    vm.data = DataFactory;
    vm.onTapSendUser = onTapSendUser;
    vm.onTapSendUserAllCheck = onTapSendUserAllCheck;
    vm.onTapRemoveNewNumber = onTapRemoveNewNumber;
    vm.onTapNewPhoneNumber = onTapNewPhoneNumber;
    vm.validarCEP = validarCEP;
    vm.validarCPF = validarCPF;
    vm.validatePhoneNumber = validatePhoneNumber;
    vm.changeCustomerAtivity = changeCustomerAtivity;
    vm.showAddNewPhone = showAddNewPhone;
    vm.goBack = goBack;
    vm.cpf = $stateParams.data ? $stateParams.data.DocumentNumber : '';
    var index = $stateParams.data ? $stateParams.data.index : '';
    vm.singlePriceLocal = 0;
    vm.allOperatorOptions = MainUtils.operatorOptions();
    vm.requesting = true;
    vm.onCheckCNPJ = onCheckCNPJ
    vm.CNPJField = false;
    vm.CPFField = true;
    vm.opemEmailpopup = opemEmailpopup;
    vm.onTapAtualizaPai = onTapAtualizaPai;
    vm.changeExtraService = changeExtraService;
    vm.changeSelectedService = changeSelectedService;
    vm.onClickFlag = onClickFlag;
    vm.onedit = onedit;

    vm.search = "";
    vm.showall = false;
    vm.linhaAtiva = false;
    vm.claro = true;
    vm.vivo = true;
    vm.history = [];
    vm.sp = 1;

    function changeExtraService(index, serviceId, phoneNumber, service){
      
      if(serviceId != null)
      {
        for(var i in phoneNumber.Servicos){
          if(phoneNumber.Servicos[i].Id == serviceId){
            DialogFactory.showMessageDialog({ mensagem: 'Serviço não pôde ser adicionado pois já faz parte da linha' });
            service.Id = 1;
            return;
          }
        }

        if(phoneNumber.Servicos.length > 0){
          DialogFactory.showMessageDialog({ mensagem: 'Linha já tem serviço' });
          return;
        }

        var selectedService;
        for(var i in vm.extraServices)
        {
          if(vm.extraServices[i].Id == serviceId){
            selectedService = vm.extraServices[i];
          }
        }

        DialogFactory.dialogConfirm({ title: 'Adicionar serviço', mensagem: 'Tem certeza que deseja adicionar o serviço '+ selectedService.Descricao +' ?:', btn1: 'não', btn2: 'sim' })
        .then(function (result) {
          
          if (result == 1) {
            console.log('clicou em sim')
            //todo validar falta de id de phone ou de serivço
            var servico = {
              Id:phoneNumber.Id,
              Servicos:[{
                Id: serviceId
              }]
            }
            FoneclubeService.postIsertServiceActive(servico).then(function (result) {
              if(result)
              {
                DialogFactory.showMessageDialog({ mensagem: 'Serviço adicionado' });
                for(var i in vm.customer.Phones){
          
                  var currentPhone = vm.customer.Phones[i];
        
                  if(currentPhone.Id == phoneNumber.Id){
                      vm.customer.Phones[i].Price += selectedService.AmountFoneclube;
                      vm.pricelist[i] = 'R$'+ (vm.customer.Phones[i].Price / 100).toFixed(2);
                  }
                }

                service.Id = 1;
                phoneNumber.Servicos.push(selectedService)
              }
              else{
                DialogFactory.showMessageDialog({ mensagem: 'Serviço não pôde ser adicionado' });
                service.Id = 1;
              }
            })
          } else {
            console.log('clicou em não')
            service.Id = 1;
          }
        })
      }

    }

    var changingSelectedService = false;
    function changeSelectedService(index,serviceId, phoneNumber, fromUser, service){
      debugger;
      if(serviceId != null)
      {
        if(!changingSelectedService)
        {
          changingSelectedService = true;
          var currentService;
          for(var i in vm.extraServices)
          {
            if(vm.extraServices[i].Id == serviceId){
              currentService = vm.extraServices[i];
            }
          }


          DialogFactory.dialogConfirm({ title: 'Remover serviço', mensagem: 'Tem certeza que deseja remover o serviço '+ currentService.Descricao +' ?:', btn1: 'não', btn2: 'sim' })
          .then(function (result) {
            if (result == 1) {
              console.log('clicou em sim')
              //todo validar falta de id de phone ou de serivço
              var servico = {
                Id:phoneNumber.Id,
                Servicos:[{
                  Id: serviceId
                }]
              }

              FoneclubeService.postIsertServiceDeactive(servico).then(function (result) {
                if(result)
                {
                  for(var i in phoneNumber.Servicos){
                    if(phoneNumber.Servicos[i].Id == serviceId){
                      phoneNumber.Servicos.splice(i,1)
                    }
                  }
                  DialogFactory.showMessageDialog({ mensagem: 'Serviço removido' });

                  for(var i in vm.customer.Phones){
          
                    var currentPhone = vm.customer.Phones[i];
          
                    if(currentPhone.Id == phoneNumber.Id){
                        vm.customer.Phones[i].Price -= currentService.AmountFoneclube;
                        vm.pricelist[i] = 'R$'+ (vm.customer.Phones[i].Price / 100).toFixed(2);
                    }
                  }

                  service.Id = 1;
                  $timeout(function () {
                    changingSelectedService = false;
                  }, 1000)
                  
                }
                else{
                  service.Id = 1;
                  DialogFactory.showMessageDialog({ mensagem: 'Serviço não pôde ser removido' });
                  changingSelectedService = false;
                }
              })
              
            } else {
              console.log('clicou em não');
              service.Id = 1;
              changingSelectedService = false;
            }
          })
        }
      }
    }

    function opemEmailpopup(emailstatus, phone, email, operator) {
      if (emailstatus != "") {
        ViewModelUtilsService.showModalEmailDetail(emailstatus, phone, email, operator);
      }
    }

    function onTapAtualizaPai(selectedPai){
      
      debugger;
      if(selectedPai == undefined)
      {
        alert('Sem nenhum pai selecionado.');
        return;
      }

      if(vm.customer.Id == selectedPai.Id){
        alert('Cliente não pode ser pai dele mesmo.');
        return;
      }
     
      var customObj = {
        Id:vm.customer.Id,
        Pai:{
          Id:selectedPai.Id,
          Name:selectedPai.Name
        }
      }

      

      FoneclubeService.postCustomerUpdateParent(customObj).then(function (result) {
        if(result){
          alert('Pai alterado com sucesso')

          vm.nomePai = selectedPai.Name;
          vm.telefonePai = '';

          FoneclubeService.getCustomerById(selectedPai.Id).then(function (result) {
            
            vm.nomePai = selectedPai.Name;

            for(var i in result.Phones){
              if(result.Phones[i].IsFoneclube != true){
                vm.telefonePai = result.Phones[i].DDD + result.Phones[i].Number;
              }
            }

          })
          
        }
        else{
          alert('Não foi possível alterar o Pai nesse cliente')
        }
      })
      //postCustomerUpdateParent

      //faz o post
      //vc não pode selecionar um pai como o próprio cliente
      //no sucesso atualiza
      //vm.telefonePai = "2187554657"
      //vm.nomePai = "Nome do pai"
    }

    function onCheckCNPJ() {
      console.log("andando " + vm.checkboxCNPJ)

      if (vm.checkboxCNPJ) {
        onShowCNPJField();
      }
      else {
        onShowCPFField();
      }

    }

    function onShowCPFField() {
      vm.CNPJField = false;
      vm.CPFField = true;
    }

    function onShowCNPJField() {
      vm.CNPJField = true;
      vm.CPFField = false;
    }

    init();


    function init() {

      debugger
      FoneclubeService.getServices().then(function (result) {
        debugger
        vm.extraServices = result;
      })

      $templateCache.removeAll();

      if (!vm.cpf) {
        FlowManagerService.changeCustomersView();
        return;
      }
      var showDialog = DialogFactory.showLoader('Carregando dados...');

      var documentnum = UtilsService.clearDocumentNumber(vm.cpf);

      FoneclubeService.getActiveCustomers().then(function (result) {
        vm.testeResult = result;
        
      })

      



      FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function (result) {
        
        vm.DocumentNumberFreeze = angular.copy(result.DocumentNumber);
        debugger
        vm.customer = result;

        if(vm.customer.DocumentNumber.length > 11)
          onShowCNPJField()

        vm.customerAtivo = !vm.customer.Desativo;
        
        if(vm.customer.Pai != null)
        {
          vm.telefonePai = vm.customer.Pai.ContatoPai;
          vm.nomePai = vm.customer.Pai.Name;
        }
        


        if(result.Id == 4158)
        {
          vm.hideColunaLinhaAtiva = true;
          vm.hideColunaPrecoVip = true;
          vm.hideColunaPrecoFC = true;
          vm.hideColunaPerfil = true;
          vm.hideColunaApelido = true;
        }
          
        //desusar
        getPersonParent(vm.customer.IdParent);

        vm.singlePriceLocal = result.SinglePrice > 0  ? 'R$'+ (vm.customer.SinglePrice / 100).toFixed(2) : 0; //single place formatado;
        if (vm.customer.Adresses) {
          for (var i = 0; i < vm.customer.Adresses.length; i++) {
            vm.customer.Adresses[i].StreetNumber = parseInt(vm.customer.Adresses[i].StreetNumber); //deve ser int por causa da mascara
          }
        }

        FoneclubeService.getStatusTelefonesOperadora().then(function (result) {
          
          // debugger
          for(var i in vm.customer.Phones)
          {
            var telefone = vm.customer.Phones[i].DDD + vm.customer.Phones[i].Number;
            vm.customer.Phones[i].usoLinha = -1;
            vm.customer.Phones[i].divergente = -1;
            for(var r in result){
              if(telefone == result[r].phone){
                
                var operadora; 
                if(result[r].operadora == 1)
                {
                  operadora = 'CLARO'
                } 
                else if(result[r].operadora == 2)
                {
                  operadora = 'VIVO'
                }
                  

                vm.customer.Phones[i].plano = operadora + " " + result[r].plano;
                vm.customer.Phones[i].usoLinha = result[r].usoLinha ? 1 : 0;
                if(parseInt(vm.customer.Phones[i].IdOperator) == result[r].operadora)
                {
                  vm.customer.Phones[i].divergente = 0
                }
                else if(parseInt(vm.customer.Phones[i].IdOperator) != result[r].operadora)
                {
                  vm.customer.Phones[i].divergente = 1
                }
              }
            }
            // debugger;
          }

          // vm.concluiuVerificacaoStatus = 'S';
          // debugger;

          vm.tempPhones = angular.copy(vm.customer.Phones);
          for (var number in vm.customer.Phones) {
            // debugger
            // FoneclubeService.getPhoneServices(vm.customer.Phones[number].Id, index).then(function (result) {
            //   debugger
            //   vm.customer.Phones[result.index].Servicos = result.Servicos;
            // })
            var contactPhone = !vm.customer.Phones[number].IsFoneclube;

            if(contactPhone){
              vm.actual_phone = vm.customer.Phones[number].DDD + vm.customer.Phones[number].Number;
            }

          }

          });

          FoneclubeService.getPlans().then(function (result) {


            FoneclubeService.getCustomerWithPhoneStatus(UtilsService.clearDocumentNumber(vm.cpf)).then(function (result) {
              
              // se der divergencia fazer foreach
              // vm.tempPhones = angular.copy(result.Phones);
              
            })


            vm.plans = result;
            
            var listaPlanosUsados = [];

            for (var number in vm.customer.Phones) {
              vm.customer.Phones[number].key = Math.random();

              vm.customer.Phones[number].StatusOperator = { 'background-color': 'grey' }
              vm.customer.Phones[number].StatusDescription = 'C'

              if (vm.customer.Phones[number].Portability) {
                vm.customer.Phones[number].Portability = 'true';
              } 
              else {
                vm.customer.Phones[number].Portability = 'false';
              }

              vm.customer.Phones[number].NovoFormatoNumero = getNumberString(vm.customer.Phones[number]); //popula o novo campo vm.<telefone>

              for (var plan in vm.plans) {

                listaPlanosUsados.push(vm.customer.Phones[number].IdPlanOption);

                if (vm.plans[plan].Id == vm.customer.Phones[number].IdPlanOption) {
                  if (vm.plans[plan].Description.endsWith('VIVO')) {
                    vm.customer.Phones[number].operadora = '1'; //seta a operadora local
                  } 
                  else {
                    vm.customer.Phones[number].operadora = '2'; //seta a operadora local

                    FoneclubeService.getStatusLinhaClaro(vm.customer.Phones[number].DDD, vm.customer.Phones[number].Number, number).then(function (result) {
                      
                      console.log('-- retorno ' + vm.customer.Phones[result.index].DDD + ' ' + vm.customer.Phones[result.index].Number)
                      console.log(result)

                      
                      vm.tempPhones = angular.copy(vm.customer.Phones);
                      

                    });

                  }
                }

              }

            }

            listaPlanosUsados = listaPlanosUsados.filter(vm.onlyUnique)
            for (var i in listaPlanosUsados) {
              var teste = listaPlanosUsados[i];
            }

            console.info(vm.customer);

            populaPai(vm.customer)
            showDialog.close();
            // Fix caso não exista numero de telefone -- É necessário manter esse fix por causa de clientes que tenham esse array vazio
            var dontHaveContact = vm.customer.Phones.filter(function (element, index, array) {
              return element.IsFoneclube == null || element.IsFoneclube == false;
            });
            if (dontHaveContact.length == 0) {
              vm.actual_phone = '(11) 11111-1111'
            }

            // Fix caso não exista endereço -- É necessário manter esse fix por causa de clientes que tenham esse array vazio
            if (vm.customer.Adresses.length == 0) {
              vm.customer.Adresses.push({
                Cep: '',
                Street: '',
                StreetNumber: '',
                Complement: '',
                Neighborhood: '',
                City: '',
                State: ''
              });
            }

            $timeout(function () {
              vm.requesting = false;
            }, 2000)

            $timeout(function () {
              document.getElementById('cpf').focus();
            }, 200);

            vm.pricelist = [];
            debugger;
            for (var i = 0; i < vm.customer.Phones.length; i++) {

              var phoneNumber = vm.customer.Phones[i];
              var totalServicos = 0;

              if(phoneNumber.Servicos.length > 0 ){
                for(var o in phoneNumber.Servicos){
                  totalServicos += phoneNumber.Servicos[o].AmountFoneclube;
                }
              }
              
              debugger;

              if (phoneNumber.IdPlanOption == '') {
                vm.pricelist.push(0);
                // customer.Phones[i].PriceFoneclube = 0;
              } 
              else {
                var valorPlano = 0;
                try{
                  valorPlano = vm.plans.find(x => x.Id == phoneNumber.IdPlanOption).Value;
                }
                catch(e){}
                
                vm.pricelist.push(valorPlano + totalServicos);
                vm.customer.Phones[i]['Price'] = valorPlano + totalServicos;
                // customer.Phones[i].PriceFoneclube = valorPlano + totalServicos;
              }

            }
              
            for (var i = 0; i < vm.customer.Phones.length; i++) {
                var phoneNumber = vm.customer.Phones[i];
                if(phoneNumber.IdPlanOption == 0){
                  vm.actual_phone = phoneNumber.NovoFormatoNumero;
                  vm.actual_id = i;
                  break
                }

            }
            if(!vm.actual_phone){
                for (var i = 0; i < vm.customer.Phones.length; i++) {
                    var phoneNumber = vm.customer.Phones[i];
                    if(phoneNumber.LinhaAtiva == false){
                        vm.actual_phone = phoneNumber.NovoFormatoNumero;
                        vm.actual_id = i;
                        break
                    }
                }
            }

            vm.tempPhones = angular.copy(vm.customer.Phones);

            vm.sp = 1;
            // // 
            addHistory();
          });

        

      });
    };


    vm.loading = false;
    vm.autoCompleteOptions = {
      minimumChars: 1,
      //selectedTextAttr: 'PhoneParent',
      data: function (searchTerm) {
        return FoneclubeService.getAllParents()
          .then(function (response) {
            vm.loading = true;
            console.log(response);
            // ideally filtering should be done on server
            searchTerm = searchTerm.toUpperCase();


            return _.filter(response, function (info) {
              if (info.NameParent != null)
                //return info.NameParent.startsWith(searchTerm);
                return removeAccents(info.NameParent.toString().toLowerCase()).indexOf(removeAccents(searchTerm.toLowerCase())) > -1;
            });

          }).catch(function (error) {
            console.log('error: ' + error);
          });
      },
      renderItem: function (item) {
        return {
          value: item.NameParent,
          label: $sce.trustAsHtml(
            "<p class='auto-complete' style='margin-bottom:0px;'>"
            + item.NameParent +
            "</p>")
        };
      },
      itemSelected: function (e) {
    
        var contactNo = "(" + e.item.DDDParent + ") " + e.item.PhoneParent.toString().substring(0, 5) + "-" + e.item.PhoneParent.toString().substring(5, 9);
        vm.contactParent = contactNo;
      }
    }

    vm.getParentDataByPhone = getParentDataByPhone;

    function getParentDataByPhone(phoneparent, personid) {
  
      if (phoneparent && personid) {
        phoneparent = phoneparent.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(2, 11);
        FoneclubeService.getCustomerParentByPhone(phoneparent, personid).then(function (result) {
          console.log(result);
          vm.customer.NameContactParent = result.NameParent;
        }).catch(function (error) {
          console.log('error: ' + error);
        });
      }
    };



    function populaPai(customer) {

      vm.customer.NameContactParent = customer.NameParent;

      if (customer.PhoneDDDParent != null && customer.PhoneNumberParent != null)
        vm.contactParent = customer.PhoneDDDParent + customer.PhoneNumberParent;

    }

    function getPersonParent(id) {
      // debugger
      if (id) {
        FoneclubeService.getCustomerById(id).then(function (result) {

          vm.customerPai = result;
          console.log('parent - ')
          console.log(result)

          if (result.Phones.length > 0) {
            vm.contactParent = result.Phones[0].DDD.concat(result.Phones[0].Number);
          }
        }).catch(function (error) {
          console.log('error: ' + error);
        });
      }
    }

    function getFormatedDate(param) {
      var date = new Date(param);
      var day = date.getDate();
      var month = date.getMonth() + 1;
      var year = date.getFullYear();
      if (day < 10) { day = "0" + day; }
      if (month < 10) { month = "0" + month; }
      return day + '/' + month + '/' + year;
    }

    function onTapSendUser(customer) {
       
      // debugger;

      if (vm.requesting == true)
        return;

      vm.requesting = true;

      var dontHaveContact = vm.tempPhones.filter(function (element, index, array) {
        return element.IsFoneclube == null || element.IsFoneclube == false;
      });

      if(dontHaveContact.length == 0)
      {
        // debugger;
        var contactPhone = {
          "DDD":UtilsService.getPhoneNumberFromStringToJson(vm.actual_phone).DDD,
          "Number":UtilsService.getPhoneNumberFromStringToJson(vm.actual_phone).Number,
          "IsFoneclube": false
        }

        vm.tempPhones.push(contactPhone);
      }

      // update phones of input
      for (var i in vm.tempPhones) {
        vm.tempPhones[i].DDD = UtilsService.getPhoneNumberFromStringToJson(vm.tempPhones[i].NovoFormatoNumero).DDD;
        vm.tempPhones[i].Number = UtilsService.getPhoneNumberFromStringToJson(vm.tempPhones[i].NovoFormatoNumero).Number;


        if(vm.tempPhones[i].IsFoneclube != true)
        {
          vm.tempPhones[i].IsFoneclube = false;
          vm.tempPhones[i].DDD = UtilsService.getPhoneNumberFromStringToJson(vm.actual_phone).DDD;
          vm.tempPhones[i].Number = UtilsService.getPhoneNumberFromStringToJson(vm.actual_phone).Number;
        }
        
      }
      
      // debugger;
      var customerSend = {
        "Id": customer.Id,
        "DocumentNumber": UtilsService.clearDocumentNumber(customer.DocumentNumber),
        "Register": customer.Register,
        "Name": customer.Name,
        "NickName": customer.NickName,
        "Email": customer.Email,
        "Born": customer.Born,
        "Gender": customer.Gender,
        "IdPlanOption": customer.IdPlanOption,
        "IdPagarme": customer.IdPagarme,
        "IdRole": customer.IdRole,
        "Adresses": customer.Adresses,
        "Phones": vm.tempPhones,
        "Photos": customer.Photos,
        "IdParent": customer.IdParent,
        "NameContactParent": customer.NameContactParent,
        "IdCommissionLevel": customer.IdCommissionLevel,
        "SinglePrice": vm.singlePriceLocal,
        "DescriptionSinglePrice": customer.DescriptionSinglePrice
      }

      try{
        customerSend.SinglePrice = customerSend.SinglePrice.replace('R','').replace('$','').replace('.','').replace(',','');
      }
      catch(erro){}

      var newFoneclubeDocument = false;
      FoneclubeService.getStatusDocument(customerSend.DocumentNumber).then(function (result) {
        newFoneclubeDocument = result;

      var totalPriceValidade = 0;
      for (var i in vm.customer.Phones) {
        vm.plans.find(function (element, index, array) {
          if (element.Id == vm.customer.Phones[i].IdPlanOption) {
            totalPriceValidade = totalPriceValidade + element.Value / 100;
          }
        });
      }

      if (vm.singlePriceLocal) {
        if ((vm.singlePriceLocal / 100) > totalPriceValidade) {
          DialogFactory.showMessageDialog({ mensagem: 'Preço único não pode ser maior do que o preço de todos os planos somados.' });
          vm.requesting = false;
          return;
        }
      }

      var digitosMinimosTelefone = 11
      
      //Regra: o telefone não pode ser incompleto, mass pode estar em branco, se for de contato foge da regra
      for (var item in customerSend.Phones) {

        customerSend.Phones[item].NovoFormatoNumero = customerSend.Phones[item].DDD + customerSend.Phones[item].Number
        if (customerSend.Phones[item].NovoFormatoNumero.length < digitosMinimosTelefone && customerSend.Phones[item].NovoFormatoNumero.length > 0 && customerSend.Phones[item].IsFoneclube) {
          // debugger;
          DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'O telefone: '.concat(customerSend.Phones[item].NovoFormatoNumero).concat(', não pode ficar incompleto, mas pode ficar em branco.') });
          vm.requesting = false;
          return;
        }

      }
      
      var arrayFiltered = customerSend.Phones.filter(function (number) {
        return number.IsFoneclube == true && number.DDD.length == 2 && number.Number.length >= 8 && number.Delete == null && number.LinhaAtiva;
      });

      for (var i in customerSend.Adresses) {
        if (customerSend.Adresses[i].Cep == '')
          customerSend.Adresses.splice(i, 1);
      }
      var showLoader = DialogFactory.showLoader('Enviando Dados...');

      if (arrayFiltered.length == 0) {
        runPostUpdateCustomer(customerSend);
      } 
      else {

        validadeNumbers(arrayFiltered).then(function (result) {
          var right = true;
          for (var item in result) {
            if (result[item].DocumentNumber && result[item].DocumentNumber != UtilsService.clearDocumentNumber(vm.customer.DocumentNumber) && !newFoneclubeDocument) {

              var msg = 'Você não pode cadastrar o mesmo telefone para dois clientes.</br>O número <strong>'
                .concat(arrayFiltered[item].NovoFormatoNumero).concat('</strong>, pertence ao cliente ')
                .concat(result[item].DocumentNumber).concat(', ').concat(result[item].Name).concat('.');
              DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: msg });
              right = false;
              vm.requesting = false;
              showLoader.close();
            }
          }
          for (var x in arrayFiltered) {
            //nao deixa add o mesmo numero duas vezes para o mesmo cliente;
            var twiceNumber = arrayFiltered.filter(function (element, index, array) {
              return element.DDD == arrayFiltered[x].DDD && element.Number == arrayFiltered[x].Number;
            });
            if (twiceNumber.length > 1) {
              DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Você não pode cadastrar o mesmo telefone duas vezes para o cliente.' });
              right = false;
              vm.requesting = false;
              showLoader.close();
              break;
            }
          }
          // // 
          if (right) {
            runPostUpdateCustomer(customerSend);
          }
        });
      }

      function runPostUpdateCustomer(customerSend) {
        
        
        // valida preenchimento de telefones
        for(var i in customerSend.Phones)
        {
          var ddd = customerSend.Phones[i].DDD;
          var number = customerSend.Phones[i].Number;

          var dddIsNum = /^\d+$/.test(ddd);
          var numberIsNum = /^\d+$/.test(number);

          if(!dddIsNum || !numberIsNum || ddd.length == 0 || number.length == 0)
          {
            alert("Os telefones devem estar preenchidos com DDD e Número. Ajuste e refaça o envio.");
            vm.requesting = false;
            showLoader.close();
            return;
          }
        }

        UtilsService.sendImageToUpload(vm.imageSelf, vm.imageFrente, vm.imageVerso).then(function (result) {
          for (var i in result) {
            customerSend.Photos = customerSend.Photos.filter(function (element) {
              return element.Tipo != result[i].tipo;
            });
          
            customerSend.Photos.push({ Name: result[i].filename, Tipo: result[i].tipo });
          }

          var parentDDD = "";
          var parentNumber = "";
          if (vm.contactParent != undefined)
          {
            var parentDDD = vm.contactParent.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(0, 2);
            var parentNumber = vm.contactParent.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(2, 11);
          }

          var parentName = vm.customer.NameContactParent;

          var customerObj = {
            'NameParent': vm.customer.NameContactParent,
            'Id': customerSend.Id,
            'PhoneDDDParent': parentDDD,
            'PhoneNumberParent': parentNumber
          }
          
          FoneclubeService.postCustomerParent(customerObj).then(function (result) {
            if (result)
              FoneclubeService.postUpdateCustomer(customerSend).then(postUpdateCustomerSucess).catch(postUpdateCustomerError);
            else {
              DialogFactory.dialogConfirm({ title: 'Andamento editar', mensagem: '1 Não foi possível atualizar dados do pai da linha, deseja salvaro restante ( reomendável que sim ):', btn1: 'sim', btn2: 'não' })
                .then(function (result) {
                  if (result) {
                    FoneclubeService.postUpdateCustomer(customerSend).then(postUpdateCustomerSucess).catch(postUpdateCustomerError);
                  } else {
                    return;
                  }
                })
            }
          }).catch(function (erro) {

            DialogFactory.dialogConfirm({ title: 'Andamento editar', mensagem: '2 Não foi possível atualizar dados do pai da linha, deseja salvaro restante ( reomendável que sim ):', btn1: 'sim', btn2: 'não' })
              .then(function (result) {
                if (result) {
                  FoneclubeService.postUpdateCustomer(customerSend).then(postUpdateCustomerSucess).catch(postUpdateCustomerError);
                } else {
                  return;
                }
              })

          });

        })

      }

      function postUpdateCustomerSucess(result) {
        if (result) {
          DialogFactory.dialogConfirm({ title: 'Edição Realizada', mensagem: 'Todos os dados pessoais enviados, edição Foneclube feita com sucesso.', btn1: 'Ir para Home', btn2: 'Visualizar Cliente' })
            .then(function (result) {
              if (result) {
                FlowManagerService.changeCustomersView();
                FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function (result) {
                  vm.data.customers.splice(index, 1, result);
                  ViewModelUtilsService.showModalCustomer(result);
                });
              } else {
                FlowManagerService.changeHomeView();
              }
            })
        }
        vm.requesting = false;
        showLoader.close();
      }

      function postUpdateCustomerError(error) {
        DialogFactory.showMessageDialog({ mensagem: error.statusText });
        vm.requesting = false;
        showLoader.close();
      }

      });
      // aqui
    };


    function onTapSendUserAllCheck(customer) {


      if (vm.requesting == true) return;
      vm.requesting = true;

      for (var i = 0; i < vm.tempPhones.length; i++) {
        vm.customer.Phones[i] = angular.copy(vm.tempPhones[i]);

      }

      // customer.Photos = vm.customer.Phones;

      //TODO
      //colocar breakpoint nos metodos localhost API, validar se novos atributos chegam--Putting breakpoint the methods localhost API, validate the new assets come.
      //revisar todos nomes entidade .net apos refact de nomes atributos -- Revisar of names or. net apos refact of attributes.
      var customerSend = {
        "Id": customer.Id,
        "DocumentNumber": UtilsService.clearDocumentNumber(customer.DocumentNumber),
        "Register": customer.Register,
        "Name": customer.Name,
        "NickName": customer.NickName,
        "Email": customer.Email,
        "Born": customer.Born,
        "Gender": customer.Gender,
        "IdPlanOption": customer.IdPlanOption,
        "IdPagarme": customer.IdPagarme,
        "IdRole": customer.IdRole,
        "Adresses": customer.Adresses,
        "Phones": customer.Phones,
        "Photos": customer.Photos,
        "IdParent": customer.IdParent,
        "NameContactParent": customer.NameContactParent,
        "IdCommissionLevel": customer.IdCommissionLevel,
        "SinglePrice": vm.singlePriceLocal,
        "DescriptionSinglePrice": customer.DescriptionSinglePrice
      }
      var totalPriceValidade = 0;
      for (var i in vm.customer.Phones) {
        vm.plans.find(function (element, index, array) {
          if (element.Id == vm.customer.Phones[i].IdPlanOption) {
            totalPriceValidade = totalPriceValidade + element.Value / 100;
          }
        });
      }
      if (vm.singlePriceLocal) {
        if ((vm.singlePriceLocal / 100) > totalPriceValidade) {
          DialogFactory.showMessageDialog({ mensagem: 'Preço único não pode ser maior do que o preço de todos os planos somados.' });
          //showLoader.close();
          vm.requesting = false;
          return;
        }
      }


      var digitosMinimosTelefone = 11
      //Regra: o telefone não pode ser incompleto, mass pode estar em branco
      for (var item in customerSend.Phones) {
        if (customerSend.Phones[item].NovoFormatoNumero.length < digitosMinimosTelefone && customerSend.Phones[item].NovoFormatoNumero.length > 0) {
          // // ;
          DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'O telefone: '.concat(customerSend.Phones[item].NovoFormatoNumero).concat(', não pode ficar incompleto, mas pode ficar em branco.') });
          //showLoader.close();
          vm.requesting = false;
          return;
        } else {

          customerSend.Phones[item].DDD = UtilsService.getPhoneNumberFromStringToJson(customerSend.Phones[item].NovoFormatoNumero).DDD;
          customerSend.Phones[item].Number = UtilsService.getPhoneNumberFromStringToJson(customerSend.Phones[item].NovoFormatoNumero).Number;
        }
      }

      var arrayFiltered = customerSend.Phones.filter(function (number) {
        return number.IsFoneclube == true && number.DDD.length == 2 && number.Number.length >= 8 && number.Delete == null && number.LinhaAtiva;
      });

      //Fix se o usuario não add CEP o array deve estar vazio;
      for (var i in customerSend.Adresses) {
        if (customerSend.Adresses[i].Cep == '')
          customerSend.Adresses.splice(i, 1);
      }
      var showLoader = DialogFactory.showLoader('Enviando Dados...');
      if (arrayFiltered.length == 0) {
        runPostUpdateCustomer(customerSend);
      } else {

        // // ;
        validadeNumbers(arrayFiltered).then(function (result) {
          var right = true;
          for (var item in result) {
            if (result[item].DocumentNumber && result[item].DocumentNumber != UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)) {

              // // ;
              var msg = 'Você não pode cadastrar o mesmo telefone para dois clientes.</br>O número <strong>'
                .concat(arrayFiltered[item].NovoFormatoNumero).concat('</strong>, pertence ao cliente ')
                .concat(result[item].DocumentNumber).concat(', ').concat(result[item].Name).concat('.');
              DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: msg });
              right = false;
              vm.requesting = false;
              showLoader.close();
            }
          }
          for (var x in arrayFiltered) {
            //nao deixa add o mesmo numero duas vezes para o mesmo cliente;
            var twiceNumber = arrayFiltered.filter(function (element, index, array) {
              return element.DDD == arrayFiltered[x].DDD && element.Number == arrayFiltered[x].Number;
            });
            if (twiceNumber.length > 1) {
              DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Você não pode cadastrar o mesmo telefone duas vezes para o cliente.' });
              right = false;
              vm.requesting = false;
              showLoader.close();
              break;
            }
          }
          if (right) {
            runPostUpdateCustomer(customerSend);
          }
        });
      }

      function runPostUpdateCustomer(customerSend) {

        UtilsService.sendImageToUpload(vm.imageSelf, vm.imageFrente, vm.imageVerso).then(function (result) {
          for (var i in result) {
            customerSend.Photos = customerSend.Photos.filter(function (element) {
              return element.Tipo != result[i].tipo;
            });
            // for (var x in customerSend.Photos) {
            //     if (result[i].tipo == customerSend.Photos[x].Tipo) {
            // //         ;
            //         customerSend.Photos.splice(x, 1);
            //     }
            // }
            customerSend.Photos.push({ Name: result[i].filename, Tipo: result[i].tipo });
          }

          var parentDDD = "";
          var parentNumber = "";
          if (vm.contactParent != undefined) {
            var parentDDD = vm.contactParent.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(0, 2);
            var parentNumber = vm.contactParent.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(2, 11);
          }

          var parentName = vm.customer.NameContactParent;
          // // ;


          var customerObj = {
            'NameParent': vm.customer.NameContactParent,
            'Id': customerSend.Id,
            'PhoneDDDParent': parentDDD,
            'PhoneNumberParent': parentNumber
          }

          FoneclubeService.postCustomerParent(customerObj).then(function (result) {
            
            if (result)
              FoneclubeService.postUpdateCustomer(customerSend).then(postUpdateCustomerSucesscheck).catch(postUpdateCustomerError);
            else {
              DialogFactory.dialogConfirm({ title: 'Andamento editar', mensagem: '3 Não foi possível atualizar dados do pai da linha, deseja salvaro restante ( reomendável que sim ):', btn1: 'sim', btn2: 'não' })
                .then(function (result) {
                  if (result) {
                    return;
                   // FoneclubeService.postUpdateCustomer(customerSend).then(postUpdateCustomerSucesscheck).catch(postUpdateCustomerError);
                  } else {
                    return;
                  }
                })
            }
          }).catch(function (erro) {

            debugger
            FoneclubeService.postUpdateCustomer(customerSend).then(postUpdateCustomerSucesscheck).catch(postUpdateCustomerError);

          });






        })

      }

      

      function postUpdateCustomerSucess(result) {
        if (result) {
          DialogFactory.dialogConfirm({ title: 'Edição Realizada', mensagem: 'Todos os dados pessoais enviados, edição Foneclube feita com sucesso.', btn1: 'Ir para Home', btn2: 'Visualizar Cliente' })
            .then(function (result) {
              if (result) {
                FlowManagerService.changeCustomersView();
                FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function (result) {
                  vm.data.customers.splice(index, 1, result);
                  ViewModelUtilsService.showModalCustomer(result);
                });
              } else {
                FlowManagerService.changeHomeView();
              }
            })
        }
        vm.requesting = false;
        showLoader.close();
      }

      function postUpdateCustomerSucesscheck(result) {

        vm.requesting = false;
        showLoader.close();
      }

      function postUpdateCustomerError(error) {
        DialogFactory.showMessageDialog({ mensagem: error.statusText });
        vm.requesting = false;
        showLoader.close();
      }
    };

    function setPlansList(operadora) {
      vm.selectedPlansList = [];
      for (var item in vm.plans) {
        if (operadora == 1 && vm.plans[item].Description.endsWith('VIVO')) {
          vm.selectedPlansList.push(vm.plans[item]);
        } else if (operadora == 2 && vm.plans[item].Description.endsWith('CLARO')) {
          vm.selectedPlansList.push(vm.plans[item]);
        }
      }
    }

    function validarCEP(index) {
      if (vm.customer.Adresses[index].Cep.length < 9) return;
      var showLoader = DialogFactory.showLoader('Tentando preencher dados...');
      HubDevService.validaCEP(vm.customer.Adresses[index].Cep.replace(/[-.]/g, '')).then(function (result) {
        if (!result.erro) {
          vm.customer.Adresses[index].Street = result.logradouro;
          vm.customer.Adresses[index].Neighborhood = result.bairro;
          vm.customer.Adresses[index].City = result.localidade;
          vm.customer.Adresses[index].State = result.uf;
        } else {
          DialogFactory.showMessageDialog({ mensagem: "CEP incorreto." });
        }
        showLoader.close();
      }, function (error) {
        showLoader.close();
      });
    }

    function validarCPF() {

      debugger;

      if (vm.customer.DocumentNumber.length < 11) { 
        return 
      }
      FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)).then(function (existentClient) {
        if (existentClient.Id == 0) {
          HubDevService.validaCPF(UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)).then(function (result) {
            if (result.status) {
              vm.name = result.nome;
            }
          }, function (error) { });
        } else if (existentClient.DocumentNumber != vm.DocumentNumberFreeze) {
          DialogFactory.showMessageConfirm({ titulo: 'CPF já cadastrado', mensagem: 'Você não pode cadastrar um cpf repetido.' })
            .then(function (param) {
              var cpf = angular.copy(vm.DocumentNumberFreeze);
              // vm.customer.DocumentNumber = cpf.substr(0, 3) + '.' + cpf.substr(3, 3) + '.' + cpf.substr(6, 3) + '-' + cpf.substr(9)
            })
        }
      }, function (result) {
        FlowManagerService.changeHomeView();
      }).catch(function (error) {
        FlowManagerService.changeHomeView();
      });
    }

    function onTapNewPhoneNumber() {
      // 
      vm.customer.Phones.push(
        {
          'Id': null,
          'DDD': '',
          'Number': '',
          'IsFoneclube': true,
          'IdOperator': 0,
          'Portability': 'false',
          'NickName': '',
          'IdPlanOption': 0,
          'Inative': false,
          'Delete': null,
          'NovoFormatoNumero': '',
          'operadora': '1',
          'key': Math.random(),
          'LinhaAtiva': true
        }
      );

      vm.tempPhones = angular.copy(vm.customer.Phones);
      resizeScroll();
    }

    function onTapRemoveNewNumber(position) {
      // // 
      DialogFactory.dialogConfirm({ titulo: 'Excluir Número', mensagem: 'Deseja realmente remover este número?' })
        .then(function (res) {
          if (res) {
            if (vm.customer.Phones[position].Id !== null) {
              vm.customer.Phones[position].Delete = true;
            } else {
              vm.customer.Phones.splice(position, 1);
            }

          }
        })
    }

    function validadeNumbers(numbers) {
      var promises = numbers.map(function (number) {
        return FoneclubeService.getCustomerByPhoneNumber({
          ddd: clearPhoneNumber(number.DDD),
          numero: clearPhoneNumber(number.Number)
        });
      });
      return $q.all(promises);
    }

    function validatePhoneNumber(position) {

      // // ;

      if (vm.requesting || vm.customer.Phones[position].NovoFormatoNumero.length < 14) return;
      var number = {
        ddd: UtilsService.getPhoneNumberFromStringToJson(vm.customer.Phones[position].NovoFormatoNumero).DDD,
        numero: UtilsService.getPhoneNumberFromStringToJson(vm.customer.Phones[position].NovoFormatoNumero).Number
      }
      //nao deixa add o mesmo numero duas vezes para o mesmo cliente;
      var twiceNumber = vm.customer.Phones.filter(function (element, index, array) {
        return element.NovoFormatoNumero == vm.customer.Phones[position].NovoFormatoNumero
          && element.IsFoneclube == true
          && element.Delete == null;
      });
      if (twiceNumber.length > 1) {
        DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Você não pode cadastrar o mesmo telefone duas vezes para o cliente.' });
        return;
      }
      FoneclubeService.getCustomerByPhoneNumber(number).then(function (res) {
        if (res.DocumentNumber && res.DocumentNumber != UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)) {
          DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Este telefone já pertence a um cliente.' });
        }
      });
    }

    function getNumberString(param) {
      return param.DDD.concat(param.Number);
    }

    function clearPhoneNumber(number) {
      return number ? number.replace('-', '').replace(' ', '').replace('(', '').replace(')', '') : '';
    }

    function showAddNewPhone() {
      function filterPhones(number) {
        return number.IsFoneclube == true;
      }
      return vm.customer.Phones.filter(filterPhones);
    }

    function goBack() {
      FlowManagerService.goBack();
      FoneclubeService.getCustomerByCPF(vm.cpf).then(function (result) {
        ViewModelUtilsService.showModalCustomer(result);
      });
    }

    function resizeScroll() {
      $ionicScrollDelegate.resize();
    }

    vm.imageSelf;
    vm.base64Self;
    vm.imageFrente;
    vm.base64Frente;
    vm.imageVerso;
    vm.base64Verso;
    vm.uploadImg = uploadImg;
    vm.viewImg = viewImg;
    
    function viewImg(img) {
      ngDialog.open({
        template: '<div class="popup-lista-imagens ngdialog-close"><img ng-src="{{img}}"/></div>',
        controller: ['$scope', 'DataFactory', function ($scope, DataFactory) {
          $scope.img = $scope.ngDialogData.img;
        }],
        className: 'ngDialog-custom-width popup-lista-imagens',
        plain: true,
        closeByDocument: true,
        data: {
          img: img
        }
      });
    }
    function uploadImg(param) {
      document.getElementById(param).click();
    }
    vm.getImageOftype = getImageOftype;
    function getImageOftype(type) {
      function base64img(tipo) {
        if (tipo == 1) {
          return vm.base64Self;
        } else if (tipo == 2) {
          return vm.base64Frente;
        } else if (tipo == 3) {
          return vm.base64Verso;
        }
        return null;
      }
      if (base64img(type)) {
        return base64img(type);
      }
      var img = vm.customer.Photos.filter(function (element) {
        return element.Tipo == type;
      });
      if (img[0]) {
        return 'https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/' + img[0].Name;
      }
      return '../../content/img/upload-cloud.png';
    }

    vm.onlyUnique = onlyUnique;

    function onlyUnique(value, index, self) {
      return self.indexOf(value) === index;
    }

    vm.getPrice = getPrice;
    function getPrice(id) {
      console.log(id);
      if (id == '')
        return 0;
      return vm.plans.find(x => x.Id == id).Value / 100;
    }

    vm.changedPlano = changedPlano;
    function changedPlano(position, id) {

      if (id == '' || id == null)
        vm.pricelist[position] = 0;
      else
        vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
      addHistory();
      autmaticSum();
    }

    vm.onfocusPreco = onfocusPreco;
    function onfocusPreco(position){
        vm.tempPrice = vm.pricelist[position];
    }

    vm.onBlurPreco = onBlurPreco;
    function onBlurPreco(position){
        if(vm.tempPrice != vm.pricelist[position]){
            addHistory();
        }
    }

    vm.onunchecked = onunchecked;
    function onunchecked(position) {

      var phone =
      {
        "Id": vm.tempPhones[position].Id,
      };

      if(phone.Id == null)
      {
        vm.tempPhones[position].Delete = true;
        vm.tempPhones.splice(position, 1);
        return;
      }
        

      var r = confirm("Deseja fazer um soft delete nessa linha?");
      if (r == true) {
          FoneclubeService.postSoftDeletePhone(phone).then(function(result){
              ;
              if(result){
                vm.tempPhones[position].Delete = true;
                vm.tempPhones.splice(position, 1);
              }
                
          })
      } 
      else {
          txt = "You pressed Cancel!";
      }

    }

    // TODO ajustar ou remover
    vm.onallunchecked = onallunchecked;
    function onallunchecked() {
      vm.tempPhones = angular.copy(vm.customer.Phones);
      for (var position = 0; position < vm.tempPhones.length; position++) {
        var id = vm.tempPhones[position].IdPlanOption;
        if (id == '' || id == null)
          vm.pricelist[position] = 0;
        else{
          vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value;
          vm.tempPhones[position]['Price'] = vm.plans.find(x => x.Id == id).Value;
        }
          
      }
    }

    function onedit() {
      ViewModelUtilsService.showModalCustomer(vm.customer, -1);
    }

    vm.ignoreAccents = function (item) {
      if (vm.showall) {
        return true;
      } else {

        try{

        var text = removeAccents(item.NovoFormatoNumero.toLowerCase());
        //alert(text);
        var search_text = removeAccents(vm.search.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~]/g, ''));
        var flag1 = text.indexOf(search_text) > -1;
        var flag2 = true;
        if (vm.linhaAtiva && !item.LinhaAtiva) {
          flag2 = false;
        }
        var flag3 = true;
        if (!vm.claro) {
          var itm = vm.plans.find(x => x.Id == item.IdPlanOption);
          if (!itm) {
            flag3 = false;
          } else {
            text = removeAccents(itm.Description.toLowerCase());
            flag3 = !(text.indexOf('claro') > -1);
          }
        }
        var flag4 = true;
        if (!vm.vivo) {
          var itm = vm.plans.find(x => x.Id == item.IdPlanOption);
          if (!itm) {
            flag4 = false;
          } else {
            text = removeAccents(itm.Description.toLowerCase());
            flag4 = !(text.indexOf('vivo') > -1);
          }
        }

        return flag1 && flag2 && flag3 && flag4;

        
      }
      catch(e){
        console.log('Erro lowercase');
        // console.log(e);
      }

      }
    };

    vm.changedFilterAll = changedFilterAll;
    function changedFilterAll() {
      if (vm.showall) {
        vm.search = "";
        vm.linhaAtiva = false;
        vm.claro = true;
        vm.vivo = true;
      }
    }

    vm.onUndo = onUndo;
    function onUndo() {
      vm.sp--;
      var tmp = angular.copy(vm.history[vm.sp - 1]);
      vm.tempPhones = tmp.phones;
      vm.pricelist = tmp.pricelist;
      for (var position = 0; position < vm.tempPhones.length; position++) {
        var id = vm.tempPhones[position].IdPlanOption;
      }
    }

    vm.onRedo = onRedo;
    function onRedo() {
      vm.sp++;
      var tmp = angular.copy(vm.history[vm.sp - 1]);
      vm.tempPhones = tmp.phones;
      vm.pricelist = tmp.pricelist;
      for (var position = 0; position < vm.tempPhones.length; position++) {
        var id = vm.tempPhones[position].IdPlanOption;
      }
    }

    vm.addHistory = addHistory;
    function addHistory() {
      if (vm.history.length > vm.sp) {
        vm.history.splice(vm.sp, vm.history.length - vm.sp);
      }
      var tmpPhones = angular.copy(vm.tempPhones);
      var tmpPricelist = angular.copy(vm.pricelist);
      vm.history.push({ 'phones': tmpPhones, 'pricelist': tmpPricelist });
      vm.sp = vm.history.length;
    }

    vm.telephonechanged = telephonechanged;
    function telephonechanged($index, phone) {
      try{
        var ddd = phone.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(0, 2)
        var phone = phone.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(2, 11)
  
        vm.customer.Phones[$index].DDD = ddd;
        vm.customer.Phones[$index].Number = phone;
        vm.customer.Phones[$index].NovoFormatoNumero = ddd + phone;
  
        vm.tempPhones[$index].DDD = ddd;
        vm.tempPhones[$index].Number = phone;
        vm.tempPhones[$index].NovoFormatoNumero = ddd + phone;
      }
      catch(e){}
      
    }

    vm.activechanged = activechanged;
    function activechanged($index) {
      // debugger
      addHistory();
    }


    vm.pricechanged = pricechanged;
    function pricechanged($index) {
      autmaticSum();
    }
    vm.pricechangedVIP = pricechangedVIP;
    function pricechangedVIP($index) {

        autmaticSum();
    }
    vm.nicknamechanged = nicknamechanged;
    function nicknamechanged($index) {
      addHistory();
    }

     vm.changedAutoSum = changedAutoSum;
    function changedAutoSum() {
      if (vm.autoSum) {
        autmaticSum();
      }
    }

    function autmaticSum() {

      if (vm.autoSum) {
        vm.singlePriceLocal = 0;
        for (var i = 0; i < vm.pricelist.length; i++) {
          if(vm.tempPhones[i].LinhaAtiva){
              if(vm.tempPhones[i].AmmountPrecoVip > 0){
                  vm.singlePriceLocal += vm.tempPhones[i].AmmountPrecoVip ;
              }
              else {
                  vm.singlePriceLocal += vm.pricelist[i] ;
              }
          }

        }
        vm.singlePriceLocal = vm.singlePriceLocal / 100;
        vm.singlePriceLocal = 'R$'+vm.singlePriceLocal.toFixed(2);
      }
    }

    function changeCustomerAtivity(id, status){
      console.log(' --- changeCustomerAtivity');
      // debugger

      var customer = {
        'Id':id,
        'Desativo': !status
      }
      // debugger;
      FoneclubeService.postPersonAtivity(customer).then(function(result){
        // debugger;
      })
    }

    function onClickFlag(phoneNumber){
      console.log('onClickFlag');
      console.log(phoneNumber);
      
      var cliente = vm.customer;
      cliente.flagPhone = true;
      cliente.selectedPhone = phoneNumber
      // debugger
      ViewModelUtilsService.showModalFlag(cliente);

    }
    

  }
})();

(function () {
  'use strict';

  angular
    .module('foneClub')
    .controller('EmailDetailController', EmailDetailController)
    .directive('ngFiles', ['$parse', function ($parse) {

      function fn_link(scope, element, attrs) {
        var onChange = $parse(attrs.ngFiles);
        element.on('change', function (event) {
          onChange(scope, { $files: event.target.files });
        });
      };

      return {
        link: fn_link
      }
    }]);

  EmailDetailController.inject = ['ViewModelUtilsService', 'MainUtils', '$scope', 'FoneclubeService'];
  function EmailDetailController(ViewModelUtilsService, MainUtils, $scope, FoneclubeService) {
    // debugger;
    var vm = this;
    vm.sendemail = sendemail;
    vm.saveemail = saveemail;
    vm.emailstatus = ViewModelUtilsService.modalEmailDetailemailstatus;
    vm.phone = ViewModelUtilsService.modalEmailDetailphone;
    vm.operator = ViewModelUtilsService.modalEmailDetailoperator;
    vm.oper = ViewModelUtilsService.modalEmailDetailoperator;
    vm.getEmailDetails = getEmailDetails;
    vm.from = 'marcio.franco@gmail.com';
    vm.bcc = "";
    vm.attachment1 = "";
    vm.attachment2 = "";
    vm.attachment3 = "";
    getEmailDetails(vm);
    var formdata = new FormData();

    $scope.getTheFiles = function ($files) {
      // debugger;
      //formData.append("model", angular.toJson(vm));
      angular.forEach($files, function (value, key) {
        //formData.append("file" + key, value);
        formdata.append(key, value);
      });
    };

    function saveemail(vm) {
      console.log(vm);
      FoneclubeService.saveemail(vm).then(function (result) {
        alert('Template Updated successfully');

      })
        .catch(function (error) {
          console.log('catch error');
          console.log(error);
        });
    }

    function sendemail(vm) {
      vm.emailData = { email: vm.email, from: vm.from, subject: vm.subject, body: vm.body, cc: vm.cc, bcc: vm.bcc };
      formdata.append("model", angular.toJson(vm.emailData));
      console.log(vm);
      FoneclubeService.SendEmailStatus(formdata).then(function (result) {
        alert('Email sent successfully');

      })
        .catch(function (error) {
          console.log('catch error');
          console.log(error);
        });
    }

    function getEmailDetails(vm) {
      if (vm.operator == "8" || vm.operator == "9" || vm.operator == "10" || vm.operator == "11" || vm.operator == "12" || vm.operator == "13" || vm.operator == "14") {
        vm.oper = "VIVO";

      }
      else {

        vm.oper = 'CLARO';
        vm.emailstatus = parseInt(vm.emailstatus) + 6;
       
      }
      FoneclubeService.getEmailDetails(vm).then(function (result) {
        
        vm.subject = result.Subject;
        vm.body = result.Body.replace(/#DDDeTELEFONE/g, vm.Phone);
        vm.cc = result.Cc;
        vm.bcc = result.Bcc;
        vm.email = result.Email;
        vm.from = result.From;

        if (vm.oper =="VIVO") {
          if (vm.emailstatus == "3" || vm.emailstatus == "4") {
            if (vm.email == null) {

              vm.email = ViewModelUtilsService.modalEmailDetailemail + ',relacionamentoPJ1_LD2.br@telefonica.com'
            }
            if (vm.cc == null) {

              vm.cc = 'suporte@foneclube.com.br';
            }
            
            
           
          }
          else if (vm.emailstatus == "6") {

            if (vm.email == null) {

              vm.email = ViewModelUtilsService.modalEmailDetailemail + ',relacionamentoPJ1_LD2.br@telefonica.com'
            }
            if (vm.cc == null) {

              vm.cc = 'suporte@foneclube.com.br';
            }
            
            
          }

          else if (vm.emailstatus == "5") {
            if (vm.email == null) {

              vm.email = ViewModelUtilsService.modalEmailDetailemail + ',relacionamentoPJ1_LD2.br@telefonica.com'
            }
            if (vm.cc == "") {

              vm.cc = 'suporte@foneclube.com.br';
            }
          }

          else if (vm.emailstatus == "7") {
            if (vm.email == null) {

              vm.email = ViewModelUtilsService.modalEmailDetailemail + ',relacionamentoPJ1_LD2.br@telefonica.com'
            }
            if (vm.cc == null) {

              vm.cc = 'suporte@foneclube.com.br';
            }
          }

          else if (vm.emailstatus == "8") {
            if (vm.email == "") {

              vm.email = ViewModelUtilsService.modalEmailDetailemail + ',relacionamentoPJ1_LD2.br@telefonica.com'
            }
            if (vm.cc == null) {

              vm.cc = 'suporte@foneclube.com.br';
            }
          }
          else {
            vm.subject = '';
            vm.cc = '';
            vm.body = '';
            vm.bcc = '';

          }

        }
        else {

          if (vm.emailstatus == "9" || vm.emailstatus == "10") {
            if (vm.email == null) {

              vm.email = ViewModelUtilsService.modalEmailDetailemail + ',GSINC@claro.com.br';
            }
            if (vm.cc == null) {

              vm.cc = 'suporte@foneclube.com.br';
            }
          }
          else if (vm.emailstatus == "12") {
            if (vm.email == null) {

              vm.email = ViewModelUtilsService.modalEmailDetailemail + ',GSINC@claro.com.br';
            }
            if (vm.cc == null) {

              vm.cc = 'suporte@foneclube.com.br';
            }
          }

          else if (vm.emailstatus == "11") {
            if (vm.email == null) {

              vm.email = ViewModelUtilsService.modalEmailDetailemail + ',GSINC@claro.com.br';
            }
            if (vm.cc == null) {

              vm.cc = 'suporte@foneclube.com.br';
            }
          }

          else if (vm.emailstatus == "13") {
            if (vm.email == null) {

              vm.email = ViewModelUtilsService.modalEmailDetailemail + ',GSINC@claro.com.br';
            }
            if (vm.cc == null) {

              vm.cc = 'suporte@foneclube.com.br';
            }
          }

          else if (vm.emailstatus == "14") {
            if (vm.email == null) {

              vm.email = ViewModelUtilsService.modalEmailDetailemail + ',GSINC@claro.com.br';
            }
            if (vm.cc == null) {

              vm.cc = 'suporte@foneclube.com.br';
            }
          }
          else {
            vm.subject = '';
            vm.cc = '';
            vm.body = '';
            vm.bcc = '';

          }
        }

      })
        .catch(function (error) {
          console.log('catch error');
          console.log(error);
        });
    }

  }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('ExistentCardPaymentModalController', ExistentCardPaymentModalController);

    ExistentCardPaymentModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainComponents', 'FoneclubeService', 'MainUtils', 'UtilsService', '$scope', 'DialogFactory', '$filter'];
    function ExistentCardPaymentModalController(ViewModelUtilsService, PagarmeService, MainComponents, FoneclubeService, MainUtils, UtilsService, $scope, DialogFactory, $filter) {

        console.log('ExistentCardPaymentModalController');
        var vm = this;
        var newCustomer;
        var cardData;
        var CARTAO = 1;
        var customer = ViewModelUtilsService.modalExistentCardPaymentData;
        var card = ViewModelUtilsService.modalExistentCardData;

        vm.etapaDados = true;
        vm.customer = customer;
        vm.card = card;
        vm.amount = '';
        vm.comment = '';
        vm.cobrancaRealizada = false;
        vm.chargeDisabled = true;
        vm.checkOne = checkOne;
        vm.onTapPagar = onTapPagar;
        vm.onTapConfirmarPagamento = onTapConfirmarPagamento;

        vm.onDate = onDate;
        vm.onTime = onTime;
        vm.date_selected = false;
        vm.time_selected = false;

        vm.date = "";
        vm.time = "";

        vm.onTapAddComment = onTapAddComment;
        vm.onTapCancel = onTapCancel;
        vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;

        vm.years = [2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010];
        vm.months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

        vm.year = new Date().getFullYear().toString();
        vm.month = (new Date().getMonth() + 1).toString();
        
        vm.date_time = new Date().getFullYear().toString();
        vm.calculate = calculate;

        vm.amount = 0;
        vm.amountTemp = 0;
        vm.amountTemp1 = 0;
        vm.bonus = 0;

        if (vm.customer.CacheIn) {
          vm.amount = vm.customer.CacheIn;
          vm.amountTemp = vm.amount.toFixed(2);
          vm.amountTemp1 = vm.amount.toFixed(2);
        }
        
        // debugger;
        var customerId = customer.Id;
        var existentCustomer = {
            'name' : customer.Name,
            'document_number' : customer.DocumentNumber,
            'email' : customer.Email,
            'address' : getAddress(customer),
            'phone' : getContactPhone(customer)
        }

        init();

        function init() {
        FoneclubeService.getTotaisComissoes(customer.Id).then(function (result) {
            console.log('FoneclubeService.getTotaisComissoes')
            console.log(result)
            debugger
            vm.bonus = parseFloat(result.ValorTotalLiberadoParaPagarCliente/ 100).toFixed(2);

          })

            
            FoneclubeService.getLastPersonCharging(customer.Id).then(function (result) {
                // debugger
                vm.comment = result.txtComment;
            })
        }

        vm.Padrão = false;
        vm.Excepcional = false;
        vm.existentCustomer = existentCustomer;

        // listener when clicking Schedule button
        function onTapAddComment(data){
            // debugger;
            data.intIdPerson=customer.Id;
            data.txtDescription = "Cartao nao passou R$" + data.amount +" on " + vm.date.toString();
            // data.dteRegister = ""
            data.bitPendingInteraction = true;

            // alert(data.txtDescription)

            FoneclubeService.postCustomerComment(data).then(function(result){
                // debugger;
                console.log(result);
                if(result){
                    DialogFactory.showAlertDialog({message: 'Inserido com sucesso'});
                }
                else
                    DialogFactory.showAlertDialog({message: 'Inserido falhou'});
            })
                .catch(function(error){
                    console.log('catch error');
                    console.log(error);
                });

        }
        // listener when selecting date for scheduling
        function onDate(date) {
            // debugger
            if(date){
                vm.date_selected = true;
                vm.date = date;
            }
        }

        // listener when selecting time for scheduling
        function onTime(time) {
            // debugger
            if(time){
                vm.time_selected = true;
                vm.time = time;
                // alert(vm.time)
            }
        }
        function checkOne(val) {
          //alert('xx');
          vm.chargeDisabled = false;
          if (val == '1') {
            vm.chargeStatusfirst = true;
            vm.chargeStatusSecond = false;
            vm.chargeStatus = 1;
          }
          if (val == '2') {
            vm.chargeStatusSecond = true;
            vm.chargeStatusfirst = false;
            vm.chargeStatus = 2;
          }
        }

        function calculate() {
            // debugger
          var amount = vm.amountTemp.toString().indexOf('.') > -1 ? parseFloat(vm.amountTemp) : parseFloat(vm.amountTemp) / 100;
          var bonus = vm.bonus.toString().indexOf('.') > -1 ? parseFloat(vm.bonus) : parseFloat(vm.bonus) / 100;
          vm.amountTemp1 = vm.pagar ? parseFloat(amount - bonus) : amount;
          if (vm.pagar) {
            vm.amount = parseFloat(vm.amountTemp1).toFixed(2);
          }
          else {
            vm.amount = parseFloat(amount).toFixed(2);
          }

          if (isNaN(vm.amount)) {
            vm.amount = 0;
          }

          vm.amountTemp1 = vm.amount;
        }

        function onTapConfirmarPagamento() {
            // debugger;
            if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                return;
            }

            if (parseInt(vm.amount) < 1) {
              DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Não é possível criar uma cobrança com valor inferior a R$1.00. Por favor corrija o valor ou opte por criar uma ordem de serviço com os detalhes desta cobrança.' });
              return;
            }
            if (!vm.chargeStatus) {
              vm.chargeStatusDiv = true;
              vm.etapaDados = false;
              vm.etapaConfirmacao = false;
            }
            else {
              vm.etapaDados = false;
              vm.etapaConfirmacao = true;
              vm.chargeStatusDiv = false;
            }
        }
        
        function onTapCancel(number){
            // debugger;
            vm.etapaDados = true;
            vm.etapaConfirmacao = false;
            vm.chargeStatusDiv = false;
            if (number == 1){
                vm.amount = 0;
                vm.comment = '';
                vm.cobrancaRealizada = false;   
            }
        }

        function onTapPagar(){
            // debugger;
            console.log('tap pagar existente')
            console.log(parseInt(vm.amount))
            console.log(card.id)
            var em = vm.amount.toString().split(".");
            if (em[1] != undefined) {
              vm.amount = vm.amount.toString().replace(".", "")

            }

            vm.disableTapPay = true;
            vm.message = 'Iniciando transação';
            PagarmeService.postTransactionExistentCard(vm.amount, card.id, existentCustomer).then(function(result){
                vm.message = 'Transação efetuada';
                // debugger;
                PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){
                        
                        vm.message = 'Transação concluída';
                        vm.TransactionId = result.tid;

                        if(vm.customerComment == undefined)
                            vm.customerComment = ''

                        var emailObject = {
                            'To': vm.existentCustomer.email, //vm.existentCustomer
                            'TargetName' : vm.existentCustomer.name,
                            'TargetTextBlue' : $filter('currency')(vm.amount / 100, ""),
                            // 'CustomerComment':vm.customerComment,
                            'TargetSecondaryText' : vm.customerComment,
                            'TemplateType' : 1
                        }

                        
                        if(vm.pagar && vm.bonus != '0.00')
                        {
                            emailObject.DiscountPrice = ($filter('currency')(vm.bonus / 100, "")).replace('.',',')
                        }

                        try{
                            var chargingLog = {
                                'customer': existentCustomer,
                                'ammount': vm.amount,
                                'pagarmeResponse': result,
                                'customerComment':vm.customerComment,
                                'foneclubeComment' : vm.comment
                            };

                            // debugger
                            FoneclubeService.postChargingLog(JSON.stringify(chargingLog), customerId).then(function(result){
                                console.log(result);
                            })
                            .catch(function(error){
                                console.log('catch error');
                                console.log(error);
                                var teste1 = emailObject;
                                var teste2 = existentCustomer;
                                var teste3 = vm.amount;
                                alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                            });
                        }
                        catch(erro){
                            var teste1 = emailObject;
                            var teste2 = existentCustomer;
                            var teste3 = vm.amount;
                            alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                        }


                        FoneclubeService.postSendEmail(emailObject).then(function(result){
                            console.log('FoneclubeService.postHistoryPayment');
                            console.log(result);
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);
                        });

                        saveHistoryPayment();
                        vm.disableTapPay = false;
                        vm.cobrancaRealizada = true;                        
                    })
                    .catch(function(error){
                        vm.disableTapPay = false;
                        try{
                            vm.message = 'Erro na captura da transação' + error.status;
                        }
                        catch(erro){
                            vm.message = 'Erro na captura da transação'
                        }
                        console.log(error);
                    });
             }, function(error) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                vm.disableTapPay = false;
            }).catch(function (error) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                vm.disableTapPay = false;
            });
        }

        function saveHistoryPayment(){
            
            var customerCharging = {
                Id: vm.customer.Id,
                Charging:{
                    Comment:vm.comment,
                    CommentEmail:vm.customerComment,
                    Ammount: vm.amount,
                    CollectorName: MainUtils.getAgent(),
                    PaymentType: CARTAO,
                    AnoVingencia:vm.year,
                    MesVingencia: vm.month,
                    ChargeStatus: vm.chargeStatus,
                    TransactionId: vm.TransactionId
                }
            }
            FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                
                if(vm.pagar)
                {   FoneclubeService.dispatchedCommision(vm.customer.Id).then(function (result) {
                    //alert('success!!');
                  })
                    .catch(function (error) {

                    })
                }

            })
            .catch(function(error){
                alert('Aviso em verificação secundária, printar tela - ' 
                        + '_' + customerCharging.Id
                        + '_' + customerCharging.ChargeStatus
                        + '_' + customerCharging.TransactionId
                        + '_' + customerCharging.ComissionConceded
                        + '_' + customerCharging.Charging.Comment
                        + '_' + customerCharging.Charging.CommentEmail
                        + '_' + customerCharging.Charging.CommentBoleto
                        + '_' + customerCharging.Charging.Ammount
                        + '_' + customerCharging.Charging.CollectorName
                        + '_' + customerCharging.Charging.PaymentType
                        + '_' + customerCharging.Charging.BoletoId
                        + '_' + customerCharging.Charging.AcquireId
                        + '_' + customerCharging.Charging.AnoVingencia
                        + '_' + customerCharging.Charging.MesVingencia
                        + ' ecc333'
                        )
                console.log('catch error');
                console.log(error);
            });

        }

        function getContactPhone(customer){
            // debugger;
            try{
                return {
                    'ddd' : customer.Phones[0].DDD.toString(),
                    'number' : customer.Phones[0].Number.toString()
                }
            }
            catch(e){
                return {
                    'ddd' : '21',
                    'number' : '997865645'
                }
            }
            
            var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
            if (!contacts || contacts.length == 0 || contacts[0].DDD == '' || contacts[0].Number == '') {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                return null;
            } else {
                return {
                    'ddd' : contacts[0].DDD.toString(),
                    'number' : contacts[0].Number.toString()
                }
            }
        }
        
        function getAddress(customer) {
            // debugger;
            var address = customer.Adresses;
            if (!address || address.length == 0) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                return null;
            } else {
                return {
                    'street' : address[0].Street,
                    'street_number' : address[0].StreetNumber,
                    'neighborhood' : address[0].Neighborhood,
                    'zipcode' : address[0].Cep,
                    'city': address[0].City,
                    'uf': address[0].State
                }
            }
        }
        
        function onTapPaymentHistoryDetail(history) {
            ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
        }

    }
})();

(function() {
  'use strict';

  function ActiveCustomersFilter() {
    return function(customers) {
      return customers.filter(customers, _isActive);
    };
  }

  function _isActive(c) {
    return !c.Desativo;
  }

  angular.module('foneClub').filter('activeCustomers', ActiveCustomersFilter);
})();

(function() {
  'use strict';

  function CustomerByFilter() {
    return function(customers, type) {
      switch (type) {
        case 'active':
          return customers.filter(_isActive);
        case 'inactive':
          return customers.filter(_isInactive);
        case 'regerror':
          return customers.filter(_hasRegerror);
        default:
          return customers;
      }
    };
  }

  function _isActive(c) {
    return !c.Desativo;
  }

  function _isInactive(c) {
    return c.Desativo;
  }

  function _hasRegerror(c) {
    return c.Orphan;
  }

  angular.module('foneClub').filter('customerBy', CustomerByFilter);
})();

(function() {
  'use strict';

  function ActiveCustomersFilter() {
    return function(customers) {
      return customers.filter(customers, _isActive);
    };
  }

  function _isActive(c) {
    return !c.Desativo;
  }

  angular.module('foneClub').filter('activeCustomers', ActiveCustomersFilter);
})();

(function() {
  'use strict';

  angular.module('foneClub').controller('FlagController', FlagController);

  FlagController.inject = [
    'ViewModelUtilsService',
    'PagarmeService',
    'MainUtils',
    'FoneclubeService',
    'DialogFactory',
    'UtilsService'
  ];

  function FlagController(
    ViewModelUtilsService,
    PagarmeService,
    MainUtils,
    FoneclubeService,
    DialogFactory,
    UtilsService
  ) {

    console.log('--- FlagController ---')
    var vm = this;
    vm.onTapAddComment = onTapAddComment;
    vm.changeFlag = changeFlag;
    vm.changeSelectedPhone = changeSelectedPhone;

    var customer = ViewModelUtilsService.modalFlagData;
    vm.customer = customer;

    vm.customerPhones = null;
    vm.flagsTypes = null;
    vm.txtDescription = '';
    vm.showPhones = true;
    vm.changePlan = changePlan;

    if(customer.flagPhone)
      vm.showPhones = false;

    if(customer.selectedPhone != null){
      debugger
      vm.selectedPhone = customer.selectedPhone.Id
    }
        

    FoneclubeService.getFlagsTypes(!vm.showPhones).then(function(result){
      vm.flagsTypes = result;
    })

    FoneclubeService.getPlans().then(function(result){
      vm.allPlans = result;
    })

    FoneclubeService.getPersonPhones(customer.Id).then(function(result){
      vm.customerPhones = result;
    })

    function changeSelectedPhone(phone){
      console.log('changeSelectedPhone = ')
      vm.selectedPhone = phone.PersonPhoneId;
    }

    function changeFlag(flag){
      
      vm.hasEmailTosend = false;
      var selectedFlag;
      vm.selectedFlag = flag;

      for(var i in vm.flagsTypes){
        if(flag.IdType == vm.flagsTypes[i].IdType)
        {
          selectedFlag = vm.flagsTypes[i]
        }
      }

      vm.hasEmailTosend = (selectedFlag.FullEmail.Title != "")
      

      debugger
      
      vm.email = selectedFlag.FullEmail.To
      vm.body = selectedFlag.FullEmail.Body
      vm.subject = selectedFlag.FullEmail.Title
      vm.cc = selectedFlag.FullEmail.Cc
      vm.bcc = selectedFlag.FullEmail.Bcc

      if(vm.selectedFlag.IdType == 1 || vm.selectedFlag.IdType == 2)
        vm.showPlanList = true;
      else
        vm.showPlanList = false;

    }

    function onTapAddComment(data, closeThisDialog) {

      debugger;
      if(vm.selectedFlag == null){
        alert('Não é possível atribuir flag sem selecionar qual')
        return;
      }
      else if((vm.selectedplan == null || vm.selectedplan == undefined) && (vm.selectedFlag.IdType == 1 || vm.selectedFlag.IdType == 2)){
        alert('Não é possível atribuir flag desse tipo sem selecionar qual plano')
        return;
      }
      else if(vm.hasEmailTosend && (vm.selectedPhone == null || vm.selectedPhone == undefined)){
        alert('Não é possível atribuir flag e enviar email sem selecionar telefone')
        return;
      }
      else {

        closeThisDialog(0)
        var showLoader = DialogFactory.showLoader('Fazendo envio...');

        var fullEmail = { 
          To: vm.email,
          Title: vm.subject, 
          Body: vm.body, 
          Cc: vm.cc, 
          Bcc: vm.bcc 
        };
          
        var flag;
  
        if(vm.selectedPhone == null){
          flag = {
            'IdFlagType' : vm.selectedFlag.IdType,
            'Description': vm.txtDescription,
            'PendingInteraction': vm.bitPendingInteraction == true,
            'IdPerson': customer.Id,
            'FullEmail':fullEmail
          };
        }
        else{
          flag = {
            'IdFlagType' : vm.selectedFlag.IdType,
            'Description': vm.txtDescription,
            'PendingInteraction': vm.bitPendingInteraction == true,
            'IdPhone': vm.selectedPhone,
            'FullEmail':fullEmail
          };
          
        }
  
        if(vm.showPlanList){
          flag.PlanId = vm.selectedplan.Id
        }

        FoneclubeService.postPersonFlag(flag).then(function(result) {
          debugger
          console.log(result);
          if(result.EmailSuccess &&  result.FlagSuccess)
          {
            DialogFactory.showAlertDialog({ message: 'Flag inserida com sucesso e email enviado' });
          }
          else if(result.EmailSuccess && !result.FlagSuccess){
            DialogFactory.showAlertDialog({ message: 'Inserção de flag falhou' });
          }
          else if(!result.EmailSuccess && result.FlagSuccess){
            DialogFactory.showAlertDialog({ message: 'Flag inserida com sucesso' });
          }
  
          showLoader.close();
  
        }); 
      }


    }

    function changePlan(plan){
      console.log('changePlan')
      console.log(plan)
      debugger
      vm.selectedplan = plan
    }

  }
})();


angular.module('foneClub').controller('CustomersControllerNew', CustomersControllerNew);

function CustomersControllerNew($interval, FoneclubeService, PagarmeService, FlowManagerService, $filter, ViewModelUtilsService) {

    var vm = this;
    var CARTAO = 1;
    var BOLETO = 2;

    vm.month = new Date().getMonth() + 1;
    vm.year = new Date().getFullYear();
    vm.diffDays = diffDays;
    vm.statusType = {
        COBRADO: 1,
        NAO_COBRADO: 2,
        PAGO: 3,
        REFUNDED: 4,
        VENCIDO: 5
    };
    vm.PagamentosType = {
        BOLETO: 1,
        CARTAO: 2
    };
    vm.AtivoType = {
        ATIVA: 2,
        CANCELADA: 1
    }
    vm.tiposStatus = [
        { id: "", title: "" },
        { id: 1, title: 'COBRADO' },
        { id: 2, title: 'NÃO COBRADO' },
        { id: 3, title: 'PAGO' },
        { id: 4, title: 'REFUNDED' },
        { id: 5, title: 'VENCIDO' }
    ];
    vm.tiposPagamento = [
        { id: "", title: "" },
        { id: 1, title: 'BOLETO' },
        { id: 2, title: 'CARTÃO' }
    ];
    vm.tipoAtiva = [
        { id: "", title: "" },
        { id: 1, title: 'CANCELADA' },
        { id: 2, title: 'ATIVA' }
    ]
    vm.tipoAcao = [
        { id: "", title: "" },
        { id: 1, title: 'A' },
        { id: 2, title: 'C' }
    ]
    vm.includeActive = false;
    vm.includeInActive = false;
    vm.excludeProblema = false;
    vm.loading = false;
    vm.excludeFather = false;
    vm.excludeAddress = false;
    vm.excludeWhatsappUsers = false;
    vm.includeWhatsappUsers = false;
    vm.includeStatusGreen = false;
    vm.includeStatusYellow = false;
    vm.includeStatusRed = false;
    vm.filterTextInAllCols = false;
    vm.filterTextInNameOnly = false;
    vm.searchText = "";
    vm.customerDataSource;
    vm.customerViewModel;
    vm.customerGridOptions;

    vm.filterClients = filterClients;
    vm.onTapCustomer = onTapCustomer;
    vm.onTapCustomerEdit = onTapCustomerEdit;
    vm.onTapMessage = onTapMessage;
    vm.onTapFlag = onTapFlag;
    vm.onTapComment = onTapComment;
    vm.onTapBoletoPayment = onTapBoletoPayment;
    vm.onDeleteCustomer = onDeleteCustomer;
    vm.onPageLoad = onPageLoad;
    vm.exportToExcel = exportToExcel;
    vm.filterText = filterText;
    vm.gridOptions = {
        columnDefs: setColumnDefs(),
        rowData: [],
        defaultColDef: {
            sortable: true,
            filter: true,
            resize: true
        },
        rowHeight: 50,
        angularCompileRows: true
    };
    vm.gridHeight = $(window).height() - 150;

    //BEGIN: New Functions
    //BEGIN: AG-Grid
    function setColumnDefs() {
        var columnDefs = [
            { hide: true, field: 'CustomerId' },
            { hide: true, field: 'TipoLink' },
            { hide: true, field: 'StatusId' },
            { hide: true, field: 'Status2' },
            { hide: true, field: 'Acao' },
            { hide: true, field: 'AcaoBool' },
            { hide: true, field: 'customerSelectedCharge' },
            { hide: true, field: 'customerChargeId' },
            {
                headerName: 'Payment Status', field: 'PaymentStatusColor',width:150,
                cellRenderer: function (params) {
                    return "<div class='payment-status-color'><span style='background-color:" + params.value + "'></span></div>";
                }
            },
            {
                headerName: '', field: 'WhatsappImage',width:50, cellRenderer: function (params) {
                    return "<a ng-click='vm.onTapMessage(" + params.node.data.CustomerId + ")'><img class='imgWhatsapp link' src=" + params.value + " /></a>";
                }
            },
            { headerName: 'Name', field: 'CustomerName' },
            {
                headerName: '', field: '', width: 300, cellRenderer: function (params) {
                    var cellHtml = '<button ng-click="vm.onTapCustomer(' + params.node.data.CustomerId + ')" title="Service Order" class="btn btn-primary"><i class="glyphicon glyphicon-usd" aria-hidden="true"></i></button>';
                    cellHtml += "&nbsp;<button ng-click='vm.onTapFlag(" + params.node.data.CustomerId + ")' title='Flag' class='btn btn - primary btn - flag'>⚐<i aria-hidden='true'></i></button>";
                    cellHtml += '&nbsp;<button ng-click="vm.onTapComment(' + params.node.data.CustomerId + ')" title="Service Order" class="btn btn-primary"><i class="glyphicon glyphicon-list-alt" aria-hidden="true"></i></button>';
                    cellHtml += '&nbsp;<button ng-click="vm.onTapBoletoPayment(' + params.node.data.CustomerId + ')" title="Boleto" class="btn btn-primary"><i class="glyphicon glyphicon-retweet"></i></button>';
                    cellHtml += '&nbsp;<button ng-click="vm.onTapCustomer(' + params.node.data.CustomerId + ')" title="Credit Card" class="btn btn-primary"><i class="glyphicon glyphicon-credit-card"></i></button>';
                    cellHtml += '&nbsp;<button title="Soft delete" class="btn btn-primary" ng-click="vm.onDeleteCustomer(' + params.node.data.CustomerId + ')"><i class="glyphicon glyphicon-remove-circle uncheckcircle"></i></button>';
                    return cellHtml;
                }
            },
            { headerName: 'Ultima Cob.', field: 'Dias' },
            { headerName: 'Ultima Cobrança', field: 'UltimaCob' },
            { headerName: 'Ult. Cob. Valor<br> R$', field: 'RCobrado' },
            { headerName: 'Status Cob.', field: 'Status' },
            {
                headerName: 'Tipo', field: 'Tipo', cellRenderer: function (params) {
                    if (params.value != 'BOLETO') {
                        return "<label>" + params.value + "</label>";
                    } else {
                        return "<a href=" + params.node.data.TipoLink + " target='_blank'>" + params.value + "</a>";
                    }
                }
            },
            {
                headerName: 'Vencimento', field: 'Vencimento', cellRenderer: function (params) {
                    if (params.value == '-' || !params.value) {
                        return "";
                    } else {
                        return "<div>" + params.value + "</div>";
                    }
                }
            },
            { headerName: 'Vigencia', field: 'Vigencia' },
            {
                headerName: 'Ult. Pag. Dias', field: 'Dias2', cellRenderer: function (params) {
                    if (params.value == 0) {
                        return "<div>-</div>";
                    } else {
                        return "<div>" + params.value + "</div>";
                    }
                }
            },
            { headerName: 'Ult. Pag Data', field: 'Ultimopag' },
            { headerName: 'Ult. Pag R$', field: 'RPago' }
        ];

        return columnDefs;
    }
    function bindAgGrid(data) {
        var rowData = convertToViewModel(data);
        vm.gridOptions.api.setRowData(rowData);
        vm.loading = false;
    }

    function testLoading() { }
    function filterClients() {
        vm.loading = true;
        filterClientsData();
    }
    function filterText() {
        if (vm.searchText) {
            filterClientsData();
        }
    }
    function filterClientsData() {
        vm.loading = true;
        var filteredData = $filter('filter')(vm.customers, function (data) {
            if (data.fullData) {
                return ((excludeAllFilters()) ||
                    (filterByText(data)) &&
                    ((!vm.includeActive && !vm.includeInActive) ||
                        (vm.includeActive ? data.fullData.Desativo == false : false) ||
                        (vm.includeInActive ? data.fullData.Desativo == true : false)) &&

                    (vm.excludeFather ? !data.fullData.NameParent : true) &&
                    (vm.excludeAddress ? !data.fullData.Adresses.length : true) &&

                    ((!vm.excludeWhatsappUsers && !vm.includeWhatsappUsers) ||
                        (vm.excludeWhatsappUsers ? (!data.fullData.WClient || !data.fullData.WClient.IsRegisteredWithChat2Desk) : false) ||
                        (vm.includeWhatsappUsers ? (data.fullData.WClient && data.fullData.WClient.IsRegisteredWithChat2Desk) : false)) &&

                    ((!vm.includeStatusGreen && !vm.includeStatusYellow && !vm.includeStatusRed) ||
                        (vm.includeStatusGreen ? filterStatusColor(data, "green") : false) ||
                        (vm.includeStatusYellow ? filterStatusColor(data, "yellow") : false) ||
                        (vm.includeStatusRed ? filterStatusColor(data, "red") : false))
                );
            }
            else {
                return false;
            }
        });
        //refreshGrid(filteredData);
        bindAgGrid(filteredData);
        vm.loading = false;
    }

    function filterByText(data) {
        if (vm.searchText) {
            vm.searchText = vm.searchText.toLowerCase();

            if (vm.filterTextInAllCols && !vm.filterTextInNameOnly) {
                return data.Id.toString().toLowerCase().indexOf(vm.searchText) > -1 ||
                    data.Name.toLowerCase().indexOf(vm.searchText) > -1 ||
                    data.Email.toLowerCase().indexOf(vm.searchText) > -1 ||
                    matchPhone(data.Phones, vm.searchText);
            } else {
                return data.Name.toLowerCase().indexOf(vm.searchText) > -1;
            }
        } else {
            return true;
        }
    }

    function filterStatusColor(data, color) {
        return (data.ChargeAndServiceOrderHistory &&
            data.ChargeAndServiceOrderHistory.Charges &&
            data.ChargeAndServiceOrderHistory.Charges.PaymentStatusColor == color)
    }

    function excludeAllFilters() {
        return !vm.includeActive
            && !vm.includeInActive
            && !vm.excludeFather
            && !vm.excludeAddress
            && !vm.excludeWhatsappUsers
            && !vm.includeWhatsappUsers
            && !vm.includeStatusGreen
            && !vm.includeStatusYellow
            && !vm.includeStatusRed
            && !vm.searchText;
    }

    function matchPhone(phones, numberToCompare) {
        numberToCompare = numberToCompare.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~' 'éá]/g, '');
        if (phones && phones.length > 0) {
            if (phones[0] == null) {
                return false;
            } else {
                var phone = $filter('filter')(phones, function (data) {
                    return (data.Number ? ("55" + data.DDD + data.Number.toString()).indexOf(numberToCompare) > -1 : false);
                });

                return phone.length > 0;
            }
        }

        return false;
    }

    function onTapCustomerEdit(id) {
        var customer = findCustomerById(id);
        FlowManagerService.changeEdicaoView(customer.fullData);
    }
    function onTapMessage(id) {
        var customer = findCustomerById(id);
        ViewModelUtilsService.showModalWhatsapp(customer);
    }
    function onTapFlag(id) {
        var customer = findCustomerById(id);
        ViewModelUtilsService.showModalFlag(customer);
    }
    function onTapComment(id) {
        var customer = findCustomerById(id);
        ViewModelUtilsService.showModalComment(customer);
    }
    function onTapBoletoPayment(id) {
        var customer = findCustomerById(id);
        ViewModelUtilsService.showModalBoletoPayment(customer);
    }
    function onTapCustomer(id, index) {
        var customer = findCustomerById(id);
        ViewModelUtilsService.showModalCustomer(customer, index);
    }
    function onDeleteCustomer(id) {
        var r = confirm('Deseja fazer um soft delete nesse cliente?');
        if (r == true) {
            var customer = findCustomerById(id);//// 
            FoneclubeService.postSoftDeleteCustomer(customer).then(function (result) {
                if (result) {
                    alert('Cliente deletado');
                    var index = vm.customers.indexOf(vm.customers.filter(v => v.Id == id)[0]);
                    if (index >= 0) {
                        vm.customers.splice(index, 1);
                        refreshGrid(vm.customers);
                    }
                }
            });
        } else {
        }
    }

    function refreshGrid(data) {
        var customerData = convertToViewModel(data);
        var totalRecords = customerData.length + 10;
        vm.customerDataSource = new kendo.data.DataSource({
            data: customerData,
            pageSize: totalRecords,
            schema: {
                model: {
                    fields: {
                        Dias: { type: "number" },
                        AcaoBool: { type: "boolean" },
                        RCobrado: { type: "number" },
                        Dias2: { type: "number" },
                        RPago: { type: "number" },
                        Ultimopag: { type: "date" }
                    }
                }
            },
        });
    }
    //END: New Functions

    function convertToViewModel(sourceData) {
        var customerDataList = [];

        for (var i = 0; i < sourceData.length; i++) {
            var customer = sourceData[i];
            var RCobrado = customer.ammoutIntFormat;
            var customerSelectedCharge = '';
            var Tipo = '';
            var TipoLink = '';
            var Acao = '';
            var AcaoBool = false;
            var Vencimento = '-'
            var Vigencia = customer.boletoExpires;
            var Ultimopag = customer.LastPaidDate;
            var Dias2 = diffDays(customer.LastPaidDate);
            var RPago = 0;
            var CustomerName = customer.Name;
            var Status2 = '';
            var customerChargeId = '';
            var UltimaCob = '';
            var Dias = 0;
            var Status = '';//customer.descricaoStatus;
            var PaymentStatusColor = '';
            var WhatsappImage = '../../content/img/message-red.png';

            if (isNaN(Dias2)) {
                Dias2 = 0;
            }
            ///////////////
            if (customer.fullData.WClient && customer.fullData.WClient.IsRegisteredWithChat2Desk) {
                if (customer.fullData.WClient.ProfilePicUrl) {
                    WhatsappImage = customer.fullData.WClient.ProfilePicUrl;
                }
                else {
                    WhatsappImage = '../../content/img/message-green.png';
                }
            }

            if (customer.ChargeAndServiceOrderHistory && customer.ChargeAndServiceOrderHistory.Charges) {
                var charge = customer.ChargeAndServiceOrderHistory.Charges;
                RPago = charge.Ammount;

                var dataCobranca = charge.CreationDate;
                var dataConvertida = new Date(dataCobranca).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
                var mes = dataConvertida.substring(5, 7);
                var ano = dataConvertida.substring(0, 4);

                customer.chargingDate = charge.CreationDate;
                customer.chargingDateDiffDays = diffDays(dataConvertida);
                Status = charge.PaymentStatusDescription;
                Vencimento = charge.TransactionLastUpdate

                //BEGIN: Set status color                
                var charges = customer.ChargeAndServiceOrderHistory.Charges;
                charges.descriptionType = charges.PaymentType == CARTAO ? 'Cartão de crédito' : 'Boleto';
                if (charges.BoletoExpires) {
                    var expiryDate = new Date(charges.ExpireDate);
                    var expiryDateAfter3 = new Date(charges.ExpireDate);
                    expiryDateAfter3.setDate(expiryDateAfter3.getDate() + 3);

                    var currentDate = new Date();
                    if (charges.PaymentStatusDescription == "Paid") {
                        PaymentStatusColor = "green";
                    }
                    else if (charges.descriptionType == "Boleto" && charges.PaymentStatusDescription == "WaitingPayment" && currentDate <= expiryDate) {
                        PaymentStatusColor = "green";
                    }
                    else if (charges.descriptionType == "Boleto" && charges.PaymentStatusDescription == "WaitingPayment" && currentDate < expiryDateAfter3) {
                        PaymentStatusColor = "yellow";
                    }
                    else if (charges.descriptionType == "Boleto" && charges.PaymentStatusDescription == "WaitingPayment" && currentDate > expiryDateAfter3) {
                        PaymentStatusColor = "red";
                    }
                    else {
                        PaymentStatusColor = "grey";
                    }

                } else {
                    if (charges.PaymentStatusDescription == "Paid") {
                        PaymentStatusColor = "green";
                    }
                    else {
                        PaymentStatusColor = "grey";
                    }
                }

                charges.PaymentStatusColor = PaymentStatusColor;
                //END
            }

            var selecionado = new Date(vm.year.toString() + '/' + vm.month.toString()).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
            var mesSelecionado = selecionado.substring(5, 7);
            var anoSelecionado = selecionado.substring(0, 4);

            if (mesSelecionado == mes && anoSelecionado == ano) {
                customer.dataIgual = true;
            }
            customer.LastPaidDateDiffDays = diffDays(customer.LastPaidDate);
            UltimaCob = customer.chargingDate ? customer.chargingDate : "";
            ///////////////

            // if (customer.descricaoStatus == '2') { Status = 'NÃO COBRADO'; }
            // if (customer.descricaoStatus == '3') { Status = 'PAGO' };
            // if (customer.descricaoStatus == '4') { Status = 'REFUNDED' };
            // if (customer.descricaoStatus == '5') { Status = 'VENCIDO' };

            if (customer.ChargingValidity != undefined) {

                var lastChargingRec = (customer.ChargingValidity.length - 1);
                var customerChargingInfo = customer.ChargingValidity[lastChargingRec];

                customerSelectedCharge = customerChargingInfo;
                customerChargeId = customerChargingInfo.Id;
                if (customerChargingInfo.CreateDate != null && customerChargingInfo.CreateDate != undefined) {
                    //UltimaCob = customerChargingInfo.CreateDate;
                }



                Status2 = customerChargingInfo.Canceled ? 'Cancelada' : 'Ativa'

                if (customerChargingInfo.PaymentType == 1) {
                    Tipo = 'CARTÃO';
                }
                else {
                    Tipo = 'BOLETO'
                    TipoLink = customerChargingInfo.BoletoLink;
                }
                if (customerChargingInfo.Canceled) {
                    Acao = 'A';
                    AcaoBool = true;
                }
                if (!customerChargingInfo.Canceled) {
                    Acao = 'C';
                }
            }

            if (UltimaCob != undefined && UltimaCob != null) { Dias = diffDays(UltimaCob); }

            if (customer.Name == 'Rodrigo Cardozo Pinto') {
                //debugger;

            }
            if (RPago) {
                RPago = parseFloat(RPago / 100);//.toString().replace('.', ',');
            }

            customerDataList.push({
                'PaymentStatusColor': PaymentStatusColor,
                'WhatsappImage': WhatsappImage,
                'CustomerName': CustomerName,
                'CustomerId': customer.Id,
                'UltimaCob': UltimaCob,
                'Dias': Dias,
                'RCobrado': RCobrado,
                'Tipo': Tipo,
                'TipoLink': TipoLink,
                'Status': Status,
                'StatusId': customer.descricaoStatus,
                'Status2': Status2,
                'Acao': Acao,
                'AcaoBool': AcaoBool,
                'customerSelectedCharge': customerSelectedCharge,
                'customerChargeId': customerChargeId,
                'Vencimento': Vencimento,
                'Ultimopag': Ultimopag,
                'Dias2': Dias2,
                'RPago': RPago,
                'Vigencia': Vigencia
            });
        }

        vm.customerViewModel = customerDataList;
        return customerDataList;
    }

    function onPageLoad() {
        loadCustomers();
    }

    function loadCustomers() {
        vm.loading = true;
        vm.totalReceivedReady = false;
        hasUpdate = false;
        var ativos = vm.somenteAtivos ? 1 : 0;
        getAllCustomers(function (data) {
            FoneclubeService.getStatusCharging(vm.month, vm.year, ativos).then(function (result) {

                vm.customers = result;
                for (var i in vm.customers) {
                    for (var customer in data) {
                        if (data[customer].Id == vm.customers[i].Id) {
                            vm.customers[i].fullData = data[customer];
                        }
                    }

                    vm.customers[i].allChargingsCanceled = false;

                    for (var o in vm.customers[i].ChargingValidity) {
                        vm.customers[i].ChargingValidity[o].display = true;
                    }
                }
                handleData(vm.customers);
                //var gridData = vm.customers;
                //initDataProperties(gridData);
                bindAgGrid(vm.customers);
            });
        });
    }

    function exportToExcel() {
        $('.k-grid-excel').trigger("click")
    }

    function findCustomerById(id) {
        for (var customer in vm.customers) {
            if (vm.customers[customer].Id == id) {
                return vm.customers[customer].fullData;
            }
        }
    }

    function getAllCustomers(callback) {
        FoneclubeService.getAllCustomers(false).then(function (result) {
            var customers = result.map(function (user) {
                user.Phones = user.Phones.map(function (phone) {
                    if (phone) {
                        phone.phoneFull = phone.DDD.concat(phone.Number);
                    }
                    return phone;
                });
                return user;
            });
            var customersSemSoftDelete = [];
            for (var i in customers) {
                var customer = customers[i];
                if (!customer.SoftDelete) {
                    customer.PhoneDDDParent = null;
                    customer.PhoneNumberParent = null;
                    for (var i in customer.Phones) {
                        if (customer.Phones[i]) {
                            if (!customer.Phones[i].IsFoneclube) {
                                customer.Phones.splice(i, 1);
                            }
                        }
                    }

                    customersSemSoftDelete.push(customer);
                }
            }

            callback(customers);
        });
    }


    function initDataProperties(customerDatasource) {
        var customerData = convertToViewModel(customerDatasource);
        var totalRecords = customerData.length + 10;
        var pageHeight = $(window).height() - 150;

        vm.customerDataSource = new kendo.data.DataSource({
            data: customerData,
            pageSize: totalRecords,
            schema: {
                model: {
                    fields: {
                        Dias: { type: "number" },
                        AcaoBool: { type: "boolean" },
                        RCobrado: { type: "number" },
                        Dias2: { type: "number" },
                        RPago: { type: "number" }
                    }
                }
            },
        });
        vm.customerGridOptions = {
            dataSource: vm.customerDataSource,
            height: pageHeight,
            toolbar: ["excel"],
            excel: {
                allPages: true,
                fileName: "Customer Report.xlsx",
                template: "<a class='k-button k-button-icontext' onclick='customCommand();' href='\\#'></span>Cutom Command</a>"
            },
            sortable: true,
            scrollable: true,
            pageable: {
                refresh: true,
                alwaysVisible: false

            },
            reorderable: true,
            resizable: true,

            filterable: {
                mode: "row",
                extra: false,
                operators: {
                    string: {
                        contains: "Contains",
                        startswith: "Starts with",
                        eq: "Is equal to",
                        neq: "Is not equal to"
                    },
                    number: {
                        eq: "Equal to",
                        neq: "Not equal to",
                        gte: "Greater Than",
                        lte: "Less Than"
                    },
                    date: {
                        eq: "Equal to",
                        neq: "Not equal to",
                        gte: "Greater Than",
                        lte: "Less Than"
                    }
                }
            },
            columns: [
                {
                    field: "PaymentStatusColor",
                    title: "Payment Status",
                    width: "120px",
                    headerTemplate: "<div class='break-word'>Payment Status<div>",
                    template: "<div class='payment-status-color'><span style='background-color:#:PaymentStatusColor#'></span></div>",
                    filterable: {
                        cell: {
                            showOperators: false,
                            template: function (args) {
                                args.element.kendoDropDownList({
                                    dataTextField: "text",
                                    dataValueField: "text",
                                    dataSource: new kendo.data.DataSource({ data: [{ text: 'Red' }, { text: 'Yellow' }, { text: 'Green' }] }),
                                    index: 0,
                                    optionLabel: { text: "", value: "" },
                                    valuePrimitive: true
                                })
                            }
                        }
                    }
                },
                {
                    field: "",
                    title: "",
                    width: "50px",
                    headerTemplate: "<img src='../../content/img/message-red.png' />",
                    template: "<div><img ng-click='vm.onTapMessage(#:CustomerId#)' class='imgWhatsapp link' src='#:WhatsappImage#' /></div>",
                    filterable: false
                },
                {
                    field: "CustomerName", title: "Name",
                    width: "200px",
                    headerTemplate: "<div class='break-word'>Name<div>",
                    template: '<a ng-click="vm.onTapCustomerEdit(#:CustomerId#)" class="link">#:CustomerName#</a>',
                    filterable: {
                        cell: {
                            operator: "contains",
                            template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); },
                        }
                    }
                },

                {
                    field: "", headerTemplate: '',
                    width: "50px",
                    template: '<button ng-click="vm.onTapCustomer(#:CustomerId#)" title="Service Order" class="btn btn-primary"><i class="glyphicon glyphicon-usd" aria-hidden="true"></i></button>',
                },
                {
                    field: "", headerTemplate: '',
                    width: "50px",
                    template: "<button ng-click='vm.onTapFlag(#:CustomerId#)' title='Flag' class='btn btn-primary btn-flag'>⚐<i aria-hidden='true'></i></button>",
                },
                {
                    field: "", headerTemplate: '',
                    width: "50px",
                    template: '<button ng-click="vm.onTapComment(#:CustomerId#)" title="Service Order" class="btn btn-primary"><i class="glyphicon glyphicon-list-alt" aria-hidden="true"></i></button>',
                },
                {
                    field: "", headerTemplate: '',
                    width: "50px",
                    template: '<button ng-click="vm.onTapBoletoPayment(#:CustomerId#)" title="Boleto" class="btn btn-primary"><i class="glyphicon glyphicon-retweet"></i></button>',
                },
                {
                    field: "", headerTemplate: '',
                    width: "50px",
                    template: '<button ng-click="vm.onTapCustomer(#:CustomerId#)" title="Credit Card" class="btn btn-primary"><i class="glyphicon glyphicon-credit-card"></i></button>',
                },
                {
                    field: "", headerTemplate: '',
                    width: "50px",
                    template: '<button title="Soft delete" class="btn btn-primary" ng-click="vm.onDeleteCustomer(#:CustomerId#)"><i class="glyphicon glyphicon-remove-circle uncheckcircle"></i></button>',
                    filterable: false
                },
                {
                    field: "Dias", title: "Ultima Cob.", width: "150px"
                    , headerTemplate: "<div class='break-word'>Ultima Cob.<div>",
                    template: "<div class='text-center'>#:Dias#<div>",
                    filterable: {
                        cell: {
                            operator: "gte",
                            template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); },
                        }
                    }
                },
                {
                    field: "UltimaCob",
                    width: "130px",
                    headerTemplate: "<div class='break-word'>Ultima Cobrança<div>",
                    template: "<div>#=kendo.toString(kendo.parseDate(UltimaCob, 'yyyy-MM-dd'), 'dd MMM, yyyy')#</div>",
                    filterable: {
                        cell: {
                            showOperators: false, operator: "contains",
                            template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); },
                        }
                    }
                },
                {
                    field: "RCobrado", title: "Ult. Cob. Valor R$", width: "150px",
                    headerTemplate: "<div class='break-word'>Ult. Cob. Valor<br> R$<div>",
                    filterable: {
                        cell: {
                            operator: "gte",
                            template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); },
                        }
                    }
                },
                {
                    field: "Status",
                    title: "Status Cob.",
                    width: "140px",
                    headerTemplate: "<div class='break-word'>Status Cob.<div>",
                    filterable: {
                        cell: {
                            showOperators: false,
                            template: function (args) {
                                args.element.kendoDropDownList({
                                    dataTextField: "text",
                                    dataValueField: "text",
                                    dataSource: new kendo.data.DataSource({ data: [{ text: 'Paid' }, { text: 'WaitingPayment' }, { text: 'Refunded' }] }),
                                    index: 0,
                                    optionLabel: { text: "", value: "" },
                                    valuePrimitive: true
                                })
                            }
                        }
                    }
                },
                {
                    field: "Tipo", title: "Tipo", width: "110px"
                    , headerTemplate: "<div class='break-word'>Tipo<div>"
                    , template: " #if( Tipo != 'BOLETO') {#   <label>#:Tipo#</label>  #} else{#  <a href='#:TipoLink#' target='_blank'>#:Tipo#</a> #}# "
                    , filterable: {
                        cell: {
                            showOperators: false,
                            template: function (args) {
                                args.element.kendoDropDownList({
                                    dataTextField: "text",
                                    dataValueField: "text",
                                    dataSource: new kendo.data.DataSource({ data: [{ text: 'BOLETO' }, { text: 'CARTÃO' }] }),
                                    index: 0,
                                    optionLabel: { text: "", value: "" },
                                    valuePrimitive: true
                                })
                            }
                        }
                    }
                },
                {
                    field: "Vencimento",
                    title: "Vencimento",
                    width: "110px",
                    headerTemplate: "<div class='break-word'>Vencimento<div>",
                    template: "#if( Vencimento != '-') {# <div>#=kendo.toString(kendo.parseDate(Vencimento, 'yyyy-MM-dd'), 'dd MMM, yyyy')#</div>#}#",
                    filterable: {
                        cell: {
                            showOperators: false, operator: "contains",
                            template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); },
                        }
                    }
                },
                {
                    field: "Vigencia",
                    title: "Vigencia",
                    width: "150px",
                    headerTemplate: "<div class='break-word'>Vigencia<div>",
                },

                {
                    field: "Dias2", title: "Ult. Pag. Dias", width: "150px", headerTemplate: "<div class='break-word'>Ult. Pag. Dias<div>"
                    , template: " #if( Dias2 == 0 ) {# <div>-</div> #} else{#  <div>#:Dias2#</div>  #}# "
                    , filterable: {
                        cell: {
                            operator: "gte",
                            template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); },
                        }
                    }
                },

                {
                    field: "Ultimopag",
                    title: "Ult. Pag Data",
                    width: "150px",
                    headerTemplate: "<div class='break-word'>Ult. Pag Data<div>",
                    // template: "<div>#=kendo.toString(kendo.parseDate(Ultimopag, 'yyyy-MM-dd'), 'dd MMM, yyyy')#</div>",
                    filterable: {
                        cell: {
                            operator: "gte",
                            template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); },
                        }
                    }
                },
                {
                    field: "RPago",
                    title: "Ult. Pag R$",
                    width: "150px",
                    headerTemplate: "<div class='break-word'>Ult. Pag R$<div>",
                    filterable: {
                        cell: {
                            operator: "gte",
                            template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); },
                        }
                    }
                },
            ]
        }
        vm.loading = false;
    }


    function handleData(customers) {
        vm.callbackCount = 0;
        vm.totalBoletoCharges = 0;
        vm.totalReceived = 0;
        vm.totalCharged = 0;
        vm.totalCustomers = customers.length;
        vm.totalCustomersCharged = customers.filter(v => v.Charged == true).length;
        vm.totalCustomersNotCharged = customers.filter(v => v.Charged == false).length;

        try {
            vm.totalBoletoCharges = customers[0].TotalBoletoCharges;
        }
        catch (erro) {
            //sem clientes
        }

        for (var index in customers) {

            var customer = customers[index];
            if (customer.Name == '1 Antonia Maria da Silva Barboza') {

            }
            try {
                customer.phone = customer.Phones[0].DDD + customer.Phones[0].Number;
                var operadora = customer.Phones[0].IdOperator == 1 ? 'Claro' : 'Vivo'
                customer.phoneDetail = operadora + ' - ' + customer.Phones[0].PlanDescription;
            }
            catch (erro) { }

            if (customer.Charged) {
                customer.statusType = vm.statusType.CARREGANDO;
                customer.registerPayd = false;
                for (var i in customer.ChargingValidity) {
                    var charge = customer.ChargingValidity[i];
                    try {
                        customer.ChargingValidity[i].BoletoExpires = new Date(customer.ChargingValidity[i].BoletoExpires).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
                        customer.boletoExpires = customer.ChargingValidity[i].BoletoExpires;
                    }
                    catch (erro) { }

                    if (charge.PaymentType == 1 && charge.StatusDescription != 'Refunded') {
                        customer.ChargingValidity[i].StatusDescription = 'PAGO';
                        customer.descricaoStatus = vm.statusType.PAGO;
                        customer.descricaoTipo = vm.PagamentosType.CARTAO;
                        customer.ammoutIntPaid = parseFloat(customer.ChargingValidity[i].Ammount / 100);
                        customer.ammoutPaidFormat = customer.ammoutIntPaid.toString().replace('.', ',');
                    }

                    if (charge.PaymentType == 2 && charge.BoletoId != 0) {
                        customer.descricaoTipo = vm.PagamentosType.BOLETO;
                        PagarmeService.getStatusBoletoRecursivo(charge.BoletoId, customer, vm, index, i).then(function (result) {
                            if (!result.length) {
                                return;
                            }
                            //result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].descricaoTipo = vm.PagamentosType.BOLETO;
                            result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'INVÁLIDO'



                            if (result[0].status == "waiting_payment") {
                                result[0].vm.customers[result[0].indexCustomer].ammoutIntPaid = 0;
                                result[0].vm.customers[result[0].indexCustomer].descricaoStatus = 'PENDENTE';
                                result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'PENDENTE'
                                if (!result[0].elemento.registerPayd) {
                                    result[0].elemento.status = result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription;
                                }

                                if (!result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Expired) {
                                    result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.COBRADO;
                                } else {
                                    result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.VENCIDO;
                                }
                            }
                            else if (result[0].status == "paid") {
                                result[0].vm.customers[result[0].indexCustomer].ammoutIntPaid = parseFloat(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount / 100);
                                result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.PAGO;
                                result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'PAGO'
                                try {

                                }
                                catch (erro) { }

                                result[0].elemento.registerPayd = true;
                                result[0].elemento.status = charge.StatusDescription;
                                result[0].vm.totalRecebidoBoleto += parseInt(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount, 10)
                                result[0].vm.totalReceived += parseInt(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount, 10)
                            }
                            else {
                                // ;
                            }
                            charge.StatusDescription = result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription;

                            result[0].vm.callbackCount++;

                            if (result[0].vm.callbackCount == result[0].vm.totalBoletoCharges) {
                                result[0].vm.totalReceived = parseFloat(result[0].vm.totalReceived / 100).toString().replace('.', ',');
                                vm.totalReceivedReady = true;
                            }
                        })
                    }

                    if (charge.PaymentType == 1 && charge.StatusDescription == 'Refunded') {
                        customer.descricaoStatus = vm.statusType.REFUNDED;
                        customer.ChargingValidity[i].StatusDescription = 'REFUNDED'
                    }

                    if (charge.BoletoId == 0 && charge.PaymentType == 2) {
                        if (vm.customers[index].ChargingValidity[i].StatusDescription == 'CARREGANDO') {
                            vm.customers[index].ChargingValidity[i].StatusDescription = 'INVÁLIDO';
                            customer.descricaoStatus = 'INVÁLIDO';
                        }

                    }
                }

                vm.totalCharged += parseInt(customer.ChargingValidity[0].Ammount);

                if (customer.ChargingValidity[0].Payd == true) {
                    vm.totalReceived += parseInt(customer.ChargingValidity[0].Ammount)
                }

                customer.ammout = parseFloat(parseInt(customer.ChargingValidity[0].Ammount) / 100);
                customer.ammoutFormat = customer.ammout.toString().replace('.', ',');
                customer.descricaoCharge = charge.Canceled ? vm.AtivoType.CANCELADA : vm.AtivoType.ATIVA;
                customer.descricaoAcao = charge.Canceled ? vm.AtivoType.CANCELADA : vm.AtivoType.ATIVA;
                customer.ammoutInt = parseFloat(customer.ammout);
                customer.ammoutIntFormat = customer.ammoutInt;//.toString().replace('.', ',');
            }
            else {
                customer.status = 'NÃO COBRADO';
                customer.descricaoStatus = vm.statusType.NAO_COBRADO;
                customer.ammoutInt = 0;
                customer.ammoutIntPaid = 0;
            }
        }
        vm.totalCharged = parseFloat(vm.totalCharged / 100).toString().replace('.', ',');

    }

    var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds            
    var secondDate = new Date();

    function diffDays(date) {
        var firstDate = new Date(date);
        return Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
    }




    vm.onDesativarBoleto = onDesativarBoleto;
    vm.onAtivarBoleto = onAtivarBoleto;

    function onDesativarBoleto(chargeId) {
        DialogFactory.dialogConfirm({ mensagem: 'Tem certeza que seja cancelar essa cobrança?' })
            .then(function (value) {
                if (value) {
                    FoneclubeService.postChargingUpdate(chargeId, true)
                        .then(function (value) {
                            if (value) {
                                charge.Canceled = true;
                            }
                        })
                }
            })
    }

    function onAtivarBoleto(chargeId) {
        DialogFactory.dialogConfirm({ mensagem: 'Tem certeza que seja ativar essa cobrança?' })
            .then(function (value) {
                if (value) {
                    FoneclubeService.postChargingUpdate(chargeId, false)
                        .then(function (value) {
                            if (value) {
                                charge.Canceled = false;
                            }
                        })
                }
            })
    }
};


StatusChargingController.$inject = ['$interval', 'FoneclubeService', 'PagarmeService', 'FlowManagerService', '$filter', 'ViewModelUtilsService']; 

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('NewCardPaymentModalController', NewCardPaymentModalController);


    NewCardPaymentModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService', '$filter'];
    function NewCardPaymentModalController(ViewModelUtilsService, PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService, $filter) {


        var vm = this;
        var customer = ViewModelUtilsService.modalNewCardPaymentData;
        vm.customer = customer;
        var newCustomer;
        var cardData;
        var CARTAO = 1;
        
        vm.onTapPagar = onTapPagar;
        vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
        vm.onTapCancel = onTapCancel;
        vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;

        vm.years = [2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010];
        vm.months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
        vm.calculate = calculate;

        vm.amount = 0;
        vm.amountTemp = 0;
        vm.amountTemp1 = 0;
        vm.bonus = 0;
        
        vm.year = new Date().getFullYear().toString();
        vm.month = (new Date().getMonth() + 1).toString();

        vm.etapaDados = true;
        vm.chargeDisabled = true;
        vm.checkOne = checkOne;

        vm.chargeStatusfirst = false;
        vm.chargeStatusSecond = false;

        init();
        function init() {

        FoneclubeService.getTotaisComissoes(customer.Id).then(function (result) {
            console.log('FoneclubeService.getTotaisComissoes')
            console.log(result)
            debugger
            vm.bonus = parseFloat(result.ValorTotalLiberadoParaPagarCliente/ 100).toFixed(2);

          })

            FoneclubeService.getLastPersonCharging(customer.Id).then(function (result) {
                // debugger
                vm.comment = result.txtComment;
            })
        }

        function checkOne(val) {
          //alert('xx');
          vm.chargeDisabled = false;
          if (val == '1') {
            vm.chargeStatusfirst = true;
            vm.chargeStatusSecond = false;
            vm.chargeStatus = 1;
          }
          if (val == '2') {
            vm.chargeStatusSecond = true;
            vm.chargeStatusfirst = false;
            vm.chargeStatus = 2;
          }
        }

        function calculate() {
          var amount = vm.amountTemp.toString().indexOf('.') > -1 ? parseFloat(vm.amountTemp) : parseFloat(vm.amountTemp) / 100;
          var bonus = vm.bonus.toString().indexOf('.') > -1 ? parseFloat(vm.bonus) : parseFloat(vm.bonus) / 100;
          vm.amountTemp1 = vm.pagar ? parseFloat(amount - bonus) : amount;
          if (vm.pagar) {
            vm.amount = parseFloat(vm.amountTemp1).toFixed(2);
          }
          else {
            vm.amount = parseFloat(amount).toFixed(2);
          }

          if (isNaN(vm.amount)) {
            vm.amount = 0;
          }

          vm.amountTemp1 = vm.amount;
        }

        function onTapConfirmarPagamento() {
            // debugger
            if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                return;
            }

            if (parseInt(vm.amount) < 1) {
              DialogFactory.showMessageDialog({ mensagem: 'Não é possível criar uma cobrança com valor inferior a R$1.00. Por favor corrija o valor ou opte por criar uma ordem de serviço com os detalhes desta cobrança.', titulo: 'Aviso' });
              return;
            }

            if (!vm.chargeStatus) {
              vm.chargeStatusDiv = true;
              vm.etapaDados = false;
              vm.etapaConfirmacao = false;
            }
            else {
              vm.etapaDados = false;
              vm.etapaConfirmacao = true;
              vm.chargeStatusDiv = false;
            }
        }
        
        function onTapCancel(number){
            vm.etapaDados = true;
            vm.etapaConfirmacao = false;
            vm.chargeStatusDiv = false;
            if (number == 1){
                vm.amount = 0;
                vm.comment = '';
                vm.cobrancaRealizada = false;   
            }
        }
        
        vm.cardHolderName = '';
        vm.cardNumber = '';
        vm.cardExpirationMonth = '';
        vm.cardExpirationYear = '';
        vm.cardCVV = '';
        vm.amount = '';
        vm.statusTransaction = ''
        vm.comment = '';
        vm.cobrancaRealizada = false;
        if (vm.customer.CacheIn) {
            vm.amount = vm.customer.CacheIn;
        }

        console.log('NewCardPaymentModalController');

        var customerId = customer.Id;
        newCustomer = {
                    'name' : customer.Name,
                    'document_number' : customer.DocumentNumber,
                    'email' : customer.Email,
                    'address' : getAddress(customer),
                    'phone' : getContactPhone(customer)
        }

        vm.newCustomer = newCustomer;


        if(!customer.IdPagarme)
        {
            console.log('não tem conta no pagarme >>>');
            //não tem conta no pagarme ainda
        }
        else
        {
            //tem conta no pagarme
            //customer.IdPagarme
        }

        function onTapPagar(){
            // debugger
            cardData = getCardData();

             console.log("-----------------------")
             console.log(newCustomer)
             console.log(cardData)
             console.log(vm.amount);

            paymentNewCustomer();
        }

        function getContactPhone(customer){

            try{
                return {
                    'ddd' : customer.Phones[0].DDD.toString(),
                    'number' : customer.Phones[0].Number.toString()
                }
            }
            catch(e){
                return {
                    'ddd' : '21',
                    'number' : '997865645'
                }
            }
            
            var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
            if (!contacts || contacts.length == 0  || contacts[0].DDD == '' || contacts[0].Number == '') {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                return null;
            } else {
                return {
                    'ddd' : contacts[0].DDD.toString(),
                    'number' : contacts[0].Number.toString()
                }
            }
        }
        
        function getAddress(customer) {
            var address = customer.Adresses;
            if (!address || address.length == 0 ) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                return null;
            } else {
                return {
                    'street' : address[0].Street,
                    'street_number' : address[0].StreetNumber,
                    'neighborhood' : address[0].Neighborhood,
                    'zipcode' : address[0].Cep,
                    'city': address[0].City,
                    'uf': address[0].State
                }
            }
        }

        function getCardData(){
            var expirationMonth = vm.cardExpirationMonth;

            return {
                cardHolderName: vm.cardHolderName.toUpperCase(),
                cardExpirationMonth: expirationMonth,
                cardExpirationYear: vm.cardExpirationYear,
                cardNumber: vm.cardNumber,
                cardCVV:vm.cardCVV
            }
        }

        function paymentNewCustomer(){

          // debugger;

          var em = vm.amount.toString().split(".");
          if (em[1] != undefined) {
            vm.amount = vm.amount.toString().replace(".", "")

          }

            vm.disableTapPay = true;

            PagarmeService.generateCardHash(cardData).then(function(cardHash){

                vm.statusTransaction = 'Criptografando dados cartão';
                // debugger;
                PagarmeService.postTransactionCard(vm.amount, cardHash, newCustomer)
                .then(function(result){

                    // debugger;
                    vm.statusTransaction = 'Transação em andamento';


                    PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){
                      // debugger;
                      vm.TransactionId = result.tid;
                        var customCustomer = {
                            Id:vm.customer.Id,
                            IdPagarme:result.customer.id
                        }

                        if(vm.customerComment == undefined)
                            vm.customerComment = ''

                        var emailObject = {
                            'To': vm.newCustomer.email, //vm.newCustomer.email
                            'TargetName' : vm.newCustomer.name,
                            'TargetTextBlue' : $filter('currency')(vm.amount / 100, ""),
                            // 'CustomerComment':vm.customerComment,
                            'TargetSecondaryText' : vm.customerComment,
                            // 'TargetSecondaryText' : vm.commentBoleto,
                            'TemplateType' : 1
                        }

                        
                        if(vm.pagar && vm.bonus != '0.00')
                        {
                            emailObject.DiscountPrice = ($filter('currency')(vm.bonus / 100, "")).replace('.',',')
                        }

                        
                        try{
                            var chargingLog = {
                                'customer': newCustomer,
                                'ammount': vm.amount,
                                'email':emailObject,
                                'pagarmeResponse': result,
                                'customerComment':vm.customerComment,
                                'foneclubeComment' : vm.comment
                            };
                            
                            // debugger
                            FoneclubeService.postChargingLog(JSON.stringify(chargingLog), customerId).then(function(result){
                                console.log(result);
                            })
                            .catch(function(error){
                                console.log('catch error');
                                console.log(error);
                                var teste1 = emailObject;
                                var teste2 = existentCustomer;
                                var teste3 = vm.amount;
                                alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                            });
                        }
                        catch(erro){
                            var teste1 = emailObject;
                            var teste2 = existentCustomer;
                            var teste3 = vm.amount;
                            alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                        }


                        FoneclubeService.postSendEmail(emailObject).then(function(result){
                            console.log('FoneclubeService.postHistoryPayment');
                            console.log(result);
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);
                        });
                        
                        FoneclubeService.postUpdatePagarmeID(customCustomer).then(function(result){
                            console.log('FoneclubeService.postUpdatePagarmeID');
                            console.log(result);

                            vm.statusTransaction = 'Transação concluída';
                            vm.disableTapPay = false;
                            vm.cobrancaRealizada = true;  
                            saveHistoryPayment();
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);

                            vm.statusTransaction = 'Transação concluída sem associar ID pagarme, guarde o ID: result.customer.id , e informe o desenvolvimento';
                            vm.disableTapPay = false;
                            vm.cobrancaRealizada = true; 
                            saveHistoryPayment();
                            
                        });
                        // result.customer.id


                        
                    })
                    .catch(function(error){
                        try{        
                            DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação' + error.status, titulo: 'Aviso'});                                                  

                        }
                        catch(erro){  
                            DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação', titulo: 'Aviso'});                                                        
                        }
                        console.log(error);

                    });


                })
                .catch(function(error){
                    try{
                        console.log(error.data.errors)
                        vm.etapaDados = true;
                        vm.disableTapPay = false;
                        vm.etapaConfirmacao = false;
                        error.data.errors.forEach(function(erro) {
                            DialogFactory.showMessageDialog({mensagem:'Erro na transação: ' + erro.message, titulo: 'Aviso'});                              
                        }, this);

                    }
                    catch(erro){
                        vm.etapaDados = true;
                        vm.disableTapPay = false;
                        vm.etapaConfirmacao = false;
                        DialogFactory.showMessageDialog({mensagem:'Erro na transação', titulo: 'Aviso'});                                                      
                    }

                    console.log(error);
                });


            })
            .catch(function(error){
                var erro;
                for(var i in error)
                {

                    erro = error[i];
                }
                vm.etapaDados = true;
                vm.disableTapPay = false;
                vm.etapaConfirmacao = false;
                DialogFactory.showMessageDialog({mensagem:'Erro na transação '+ erro, titulo: 'Aviso'});                 

            });
        }

        function saveHistoryPayment(){

            try
            {
                console.log('saveHistoryPayment');
                console.log(MainUtils.getAgent());
                console.log(vm.comment);
                //vm.comment
                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:vm.comment,
                        CommentEmail:vm.customerComment,
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: CARTAO,
                        AnoVingencia:vm.year,
                        MesVingencia: vm.month,
                        ChargeStatus: vm.chargeStatus,
                        TransactionId: vm.TransactionId,
                        ComissionConceded: vm.pagar
                    }
                }


                FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                    console.log('FoneclubeService.postHistoryPayment');
                    console.log(result);

                    if(vm.pagar)
                    {   FoneclubeService.dispatchedCommision(vm.customer.Id).then(function (result) {
                        //alert('success!!');
                      })
                        .catch(function (error) {
  
                        })
                    }
                    
                })
                .catch(function(error){
                    alert('Aviso em verificação secundária, printar tela - ' 
                        + '_' + customerCharging.Id
                        + '_' + customerCharging.ChargeStatus
                        + '_' + customerCharging.TransactionId
                        + '_' + customerCharging.ComissionConceded
                        + '_' + customerCharging.Charging.Comment
                        + '_' + customerCharging.Charging.CommentEmail
                        + '_' + customerCharging.Charging.CommentBoleto
                        + '_' + customerCharging.Charging.Ammount
                        + '_' + customerCharging.Charging.CollectorName
                        + '_' + customerCharging.Charging.PaymentType
                        + '_' + customerCharging.Charging.BoletoId
                        + '_' + customerCharging.Charging.AcquireId
                        + '_' + customerCharging.Charging.AnoVingencia
                        + '_' + customerCharging.Charging.MesVingencia
                        + ' ncpc442' 
                        )
                    console.log('catch error');
                    console.log(error);
                });

            }
            catch(erro){

            }


        }
        
        function onTapPaymentHistoryDetail(history) {
            ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
        }


    }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('OrdemServico', OrdemServico);

    OrdemServico.inject = ['$scope', 'ViewModelUtilsService', 'FoneclubeService', 'MainUtils', '$stateParams', 'FlowManagerService'];
    function OrdemServico($scope, ViewModelUtilsService, FoneclubeService, MainUtils, $stateParams, FlowManagerService) {
        var vm = this;
        vm.cpf = $stateParams.data ? $stateParams.data.DocumentNumber : '';
        vm.requesting = true;
        vm.onTapSendOS = onTapSendOS;
        vm.goBack = goBack;
        
        init();
        function init() {
            if (!vm.cpf) {
                FlowManagerService.changeCustomersView();
                return;
            }
            vm.data = {
                warn: true,
                text: ''
            };
            FoneclubeService.getCustomerByCPF(vm.cpf).then(function(result){
                vm.customer = result;
                vm.requesting = false;
            });
        }
        
        function onTapSendOS() {
            MainUtils.setAgent('Cardozo');
            var order = {
                "Id": vm.customer.Id,
                "ServiceOrder": {
                    "AgentName": MainUtils.getAgent(),
                    "AgentId": 1,
                    "PendingInteraction": vm.data.warn,
                    "Description": vm.data.text
                }
            }
            FoneclubeService.postOrderServicePerson(order).then(function(data){
                vm.requesting = false;
                if(result) {
                    FlowManagerService.changeCustomersView();                    
                    DialogFactory.showMessageConfirm({titulo:'Aviso', mensagem:'Ordem de serviço adicionada com sucesso.'})
                    .then(function(result) {
                        if(result) {
                            FoneclubeService.getCustomerByCPF(vm.cpf).then(function(result){
                                ViewModelUtilsService.showModalCustomer(result);
                            });
                        }
                    })                    
                }
            }).catch(function(error) {
                FlowManagerService.changeCustomersView();                   
                DialogFactory.showMessageDialog({mensagem:'Houve um erro.', titulo: 'Aviso'});                                           
            });
        }
        
        function goBack() {
            FlowManagerService.goBack();
            FoneclubeService.getCustomerByCPF(vm.cpf).then(function(result){
                ViewModelUtilsService.showModalCustomer(result);
            });
        }
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('PaymentDetailController', PaymentDetailController);

    PaymentDetailController.inject = ['ViewModelUtilsService', 'MainUtils'];
    function PaymentDetailController(ViewModelUtilsService, MainUtils) {
        var vm = this;
        vm.customer = ViewModelUtilsService.modalPaymentDetailCustomer;
        vm.history = ViewModelUtilsService.modalPaymentDetailHistory;

    }
})();
(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('RepeatBoletoModalController', RepeatBoletoModalController);
    
    
        RepeatBoletoModalController.inject = ['ViewModelUtilsService', '$scope','PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService'];
        function RepeatBoletoModalController(ViewModelUtilsService, $scope,PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService) {

    
            var vm = this;
            // debugger;
            var customer = ViewModelUtilsService.modalBoletoData;
            var payment = ViewModelUtilsService.modalRepeatBoletoData;
           
            
            vm.customer = customer;
            vm.payment=payment;
             
            var newCustomer;
            var BOLETO = 2;
            
            
            vm.etapaDados = true;
            vm.cobrancaRealizada = false;
            //vm.amount = vm.customer.CacheIn ? vm.customer.CacheIn : '';
            vm.comment = '';
            console.log('RepeatBoletoModalController');
            vm.onTapPagar = onTapPagar;
            vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
            vm.onTapCancel = onTapCancel;
            vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;
            vm.enviaEmail = true;
            
            vm.amount=vm.payment.txtAmmountPayment/100;
            vm.commentBoleto='cobrando boleto de '+ (vm.payment.txtAmmountPayment/100);
            vm.comment='cobrando boleto de '+ (vm.payment.txtAmmountPayment/100);

            var customerId = customer.Id;
            var existentCustomer = {
                        'name' : customer.Name,
                        'document_number' : customer.DocumentNumber,
                        'email' : customer.Email,
                        'address' : getAddress(customer),
                        'phone' : getContactPhone(customer)
    
                 }
            /*function RepeatBoletoModalController($scope) {
                // debugger;
                $scope.vm.amount = 121;
                $scope.vm.commentBoleto="0123";
                $scope.vm.comment="123";
            }*/
    
            function onTapConfirmarPagamento() {
                if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                    return;
                }
                vm.etapaDados = false;
                vm.etapaConfirmacao = true;
            }
            
            function onTapCancel(number){
                vm.etapaDados = true;
                vm.etapaConfirmacao = false;
                if (number == 1){
                    vm.amount = 0;
                    vm.comment = '';
                    vm.cobrancaRealizada = false;   
                }
            }
            
            function onTapPagar(){
    // debugger;
                console.log('tap pagar boleto')
                console.log(parseInt(vm.amount))
                if(parseInt(vm.amount) < 100)
                {
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Não é permitido cobranças a baixo de 1 Real'});                
                    return;
                }
    
                vm.disableTapPay = true;
                vm.message = 'Iniciando transação';
                vm.instructions = 'FoneClub - 2017'
                // debugger;
                // PagarmeService.postBoleto(vm.amount, vm.commentBoleto, existentCustomer)
                //  .then(function(result){
                //     console.log(result);

                if(!vm.expirationDateField)
                {
                    vm.expirationDateField = 5; 
                }
                else{
                   if(vm.expirationDateField <= 0)
                   {
                    vm.expirationDateField = 5; 
                   } 
                }

                     PagarmeService.postBoletoDirect(vm.amount, vm.commentBoleto, existentCustomer, addExpirationDays(vm.expirationDateField)).then(function(resultCapture){
    
                            
                            
                        try{
                            var chargingLog = {
                                'customer': existentCustomer,
                                'ammount': vm.amount,
                                'pagarmeResponse': resultCapture,
                                'boletoComment':vm.commentBoleto,
                                'foneclubeComment' : vm.comment
                            };
                            
                            // debugger
                            FoneclubeService.postChargingLog(JSON.stringify(chargingLog), customerId).then(function(result){
                                console.log(result);
                            })
                            .catch(function(error){
                                console.log('catch error');
                                console.log(error);
                                var teste1 = emailObject;
                                var teste2 = existentCustomer;
                                var teste3 = vm.amount;
                                alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                            });
                        }
                        catch(erro){
                            var teste1 = emailObject;
                            var teste2 = existentCustomer;
                            var teste3 = vm.amount;
                            alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                        }

                            // debugger;
                            if(vm.enviaEmail)
                            {
                                // debugger;
                                var emailObject = {
                                    'To': existentCustomer.email, //existentCustomer.email
                                    'TargetName' : existentCustomer.name,
                                    'TargetTextBlue': resultCapture.boleto_url,
                                    'TargetSecondaryText' : vm.commentBoleto,
                                    'TemplateType' : 2
                                }
        
                                FoneclubeService.postSendEmail(emailObject).then(function(result){
                                    console.log('FoneclubeService.postHistoryPayment');
                                    console.log(result);
                                })
                                .catch(function(error){
                                    console.log('catch error');
                                    console.log(error);
                                });
                            }
                            
    
                            try{
                                vm.TransactionId = resultCapture.tid;
                                PagarmeService.notifyCustomerBoleto(resultCapture.id, existentCustomer.email).then(function(resultNotify){
                                vm.message = 'Boleto gerado com sucesso'
                                vm.cobrancaRealizada = true;
                                vm.disableTapPay = false;
                                    })
                                    .catch(function(error){
                                    try{
                                        vm.message = 'Boleto gerado com sucesso. Sem envio de notificação'
                                        vm.cobrancaRealizada = true;
                                        vm.disableTapPay = false;                                    
                                    }
                                    catch(erro){
                                        vm.message = 'Boleto gerado com sucesso. Sem envio de notificação'
                                        vm.cobrancaRealizada = true;
                                        vm.disableTapPay = false;                                    
                                    }
                                    console.log(error);
    
                                });
    
                            }
                            catch(erro){
    
                            }
    
    
                        saveHistoryPayment(resultCapture.id, resultCapture.acquirer_id);
    
                            vm.message = 'Boleto gerado com sucesso'
                        })
                        .catch(function(error){
                            try{
                                DialogFactory.showMessageDialog({mensagem: 'Erro na captura da transação' + error.status});                             
                            }
                            catch(erro){
                                DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação'});                             
                            }
                            console.log(error);
                        });
                // }, function (error) {
                //     DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                //     vm.disableTapPay = false;
                // }).catch(function (error) {
                //     DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                //     vm.disableTapPay = false;
                // });
    
            }
    
            function saveHistoryPayment(idBoleto, acquirer_id){
    
                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:vm.comment,
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: BOLETO,
                        BoletoId: idBoleto,
                        AcquireId: acquirer_id,
                        TransactionId: vm.TransactionId
                    }
                }
    
                FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                    console.log('FoneclubeService.postHistoryPayment');
                    console.log(result);
                })
                .catch(function(error){
                    console.log('catch error');
                    console.log(error);
                });
    
    
            }
    
    
            function getContactPhone(customer){
                var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
                if (!contacts || contacts.length == 0  || contacts[0].DDD == '' || contacts[0].Number == '') {
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                    return null;
                } else {
                    return {
                        'ddd' : contacts[0].DDD.toString(),
                        'number' : contacts[0].Number.toString()
                    }
                }
            }
            
            function getAddress(customer) {
                var address = customer.Adresses;
                if (!address || address.length == 0) {
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                    return null;
                } else {
                    return {
                        'street' : address[0].Street,
                        'street_number' : address[0].StreetNumber,
                        'neighborhood' : address[0].Neighborhood,
                        'zipcode' : address[0].Cep,
                        'city': address[0].City,
                        'uf': address[0].State
                    }
                }
            }
            
            function onTapPaymentHistoryDetail(history) {
                ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
            }

            function addExpirationDays(days) {
                var dat = new Date();
                dat.setDate(dat.getDate() + days);
                return dat.toISOString();
              }
    
        }
    })();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('RepeatCardController', RepeatCardController);

    RepeatCardController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService', '$filter'];
    function RepeatCardController(ViewModelUtilsService, PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService, $filter) {
        
        var vm = this;
        var customer = ViewModelUtilsService.modalCardData;  
        vm.customer = customer;
        var payment=ViewModelUtilsService.modalRepeatCardData;
        var newCustomer;
        var cardData;
        var CARTAO = 1;
        
        vm.onTapPagar = onTapPagar;
        vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
        vm.onTapCancel = onTapCancel;
        vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;

        vm.years = [2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010];
        vm.months = [1,2,3,4,5,6,7,8,9,10,11,12];
        
        vm.year = new Date().getFullYear().toString();
        vm.month = (new Date().getMonth() + 1).toString();

        vm.etapaDados = true;
        

        function onTapConfirmarPagamento() {
            // debugger
            if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                return;
            }
            vm.etapaDados = false;
            vm.etapaConfirmacao = true;
        }
        
        function onTapCancel(number){
            vm.etapaDados = true;
            vm.etapaConfirmacao = false;
            if (number == 1){
                vm.amount = 0;
                vm.comment = '';
                vm.cobrancaRealizada = false;   
            }
        }
        
        vm.cardHolderName = '';
        vm.cardNumber = '';
        vm.cardExpirationMonth = '';
        vm.cardExpirationYear = '';
        vm.cardCVV = '';
        vm.amount = '';
        vm.statusTransaction = ''
        vm.comment = '';
        vm.cobrancaRealizada = false;
        if (vm.customer.CacheIn) {
            vm.amount = vm.customer.CacheIn;
        }

        console.log('RepeatCardController');

        var customerId = customer.Id;
        newCustomer = {
                    'name' : customer.Name,
                    'document_number' : customer.DocumentNumber,
                    'email' : customer.Email,
                    'address' : getAddress(customer),
                    'phone' : getContactPhone(customer)
        }

        vm.newCustomer = newCustomer;


        if(!customer.IdPagarme)
        {
            console.log('não tem conta no pagarme >>>');
            //não tem conta no pagarme ainda
        }
        else
        {
            //tem conta no pagarme
            //customer.IdPagarme
        }

        function onTapPagar(){
            // debugger
            cardData = getCardData();

             console.log("-----------------------")
             console.log(newCustomer)
             console.log(cardData)
             console.log(vm.amount);

            if(parseInt(vm.amount) < 100)
            {
                DialogFactory.showMessageDialog({mensagem:'Não é permitido cobranças a baixo de 1 Real', titulo: 'Aviso'});                            
                return;
            }

            paymentNewCustomer();
        }

        function getContactPhone(customer){
            var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
            if (!contacts || contacts.length == 0  || contacts[0].DDD == '' || contacts[0].Number == '') {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                return null;
            } else {
                return {
                    'ddd' : contacts[0].DDD.toString(),
                    'number' : contacts[0].Number.toString()
                }
            }
        }
        
        function getAddress(customer) {
            var address = customer.Adresses;
            if (!address || address.length == 0 ) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                return null;
            } else {
                return {
                    'street' : address[0].Street,
                    'street_number' : address[0].StreetNumber,
                    'neighborhood' : address[0].Neighborhood,
                    'zipcode' : address[0].Cep,
                    'city': address[0].City,
                    'uf': address[0].State
                }
            }
        }

        function getCardData(){
            var expirationMonth = vm.cardExpirationMonth;

            return {
                cardHolderName: vm.cardHolderName.toUpperCase(),
                cardExpirationMonth: expirationMonth,
                cardExpirationYear: vm.cardExpirationYear,
                cardNumber: vm.cardNumber,
                cardCVV:vm.cardCVV
            }
        }

        function paymentNewCustomer(){

            // debugger;
            vm.disableTapPay = true;

            PagarmeService.generateCardHash(cardData).then(function(cardHash){

                vm.statusTransaction = 'Criptografando dados cartão';
                // debugger;
                PagarmeService.postTransactionCard(vm.amount, cardHash, newCustomer)
                .then(function(result){

                    // debugger;
                    vm.statusTransaction = 'Transação em andamento';


                    PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){
                      // debugger;
                      vm.TransactionId = result.tid;

                        var customCustomer = {
                            Id:vm.customer.Id,
                            IdPagarme:result.customer.id
                        }

                        var emailObject = {
                            'To': vm.newCustomer.email, //vm.newCustomer.email
                            'TargetName' : vm.newCustomer.name,
                            'TargetTextBlue' : $filter('currency')(vm.amount / 100, ""),
                            // 'TargetSecondaryText' : vm.commentBoleto,
                            'TemplateType' : 1
                        }

                        try{
                            var chargingLog = {
                                'customer': newCustomer,
                                'ammount': vm.amount,
                                'pagarmeResponse': result,
                                'foneclubeComment' : vm.comment
                            };
                            
                            // debugger
                            FoneclubeService.postChargingLog(JSON.stringify(chargingLog), customerId).then(function(result){
                                console.log(result);
                            })
                            .catch(function(error){
                                console.log('catch error');
                                console.log(error);
                                var teste1 = emailObject;
                                var teste2 = existentCustomer;
                                var teste3 = vm.amount;
                                alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                            });
                        }
                        catch(erro){
                            var teste1 = emailObject;
                            var teste2 = existentCustomer;
                            var teste3 = vm.amount;
                            alert("Alerta a cobrança não pode ser salva, se possível pare a tela aqui sem atualizar nada e entre em contato com cardozo")
                        }

                        FoneclubeService.postSendEmail(emailObject).then(function(result){
                            console.log('FoneclubeService.postHistoryPayment');
                            console.log(result);
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);
                        });
                        
                        FoneclubeService.postUpdatePagarmeID(customCustomer).then(function(result){
                            console.log('FoneclubeService.postUpdatePagarmeID');
                            console.log(result);

                            vm.statusTransaction = 'Transação concluída';
                            vm.disableTapPay = false;
                            vm.cobrancaRealizada = true;  
                            saveHistoryPayment();
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);

                            vm.statusTransaction = 'Transação concluída sem associar ID pagarme, guarde o ID: result.customer.id , e informe o desenvolvimento';
                            vm.disableTapPay = false;
                            vm.cobrancaRealizada = true; 
                            saveHistoryPayment();
                            
                        });
                        // result.customer.id


                        
                    })
                    .catch(function(error){
                        try{        
                            DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação' + error.status, titulo: 'Aviso'});                                                  

                        }
                        catch(erro){  
                            DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação', titulo: 'Aviso'});                                                        
                        }
                        console.log(error);

                    });


                })
                .catch(function(error){
                    try{
                        console.log(error.data.errors)
                        vm.etapaDados = true;
                        vm.disableTapPay = false;
                        vm.etapaConfirmacao = false;
                        error.data.errors.forEach(function(erro) {
                            DialogFactory.showMessageDialog({mensagem:'Erro na transação: ' + erro.message, titulo: 'Aviso'});                              
                        }, this);

                    }
                    catch(erro){
                        vm.etapaDados = true;
                        vm.disableTapPay = false;
                        vm.etapaConfirmacao = false;
                        DialogFactory.showMessageDialog({mensagem:'Erro na transação', titulo: 'Aviso'});                                                      
                    }

                    console.log(error);
                });


            })
            .catch(function(error){
                var erro;
                for(var i in error)
                {

                    erro = error[i];
                }
                vm.etapaDados = true;
                vm.disableTapPay = false;
                vm.etapaConfirmacao = false;
                DialogFactory.showMessageDialog({mensagem:'Erro na transação '+ erro, titulo: 'Aviso'});                 

            });
        }

        function saveHistoryPayment(){

            try
            {
                console.log('saveHistoryPayment');
                console.log(MainUtils.getAgent());
                console.log(vm.comment);
                //vm.comment
                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:vm.comment,
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: CARTAO,
                        TransactionId: vm.TransactionId
                    }
                }


                FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                    console.log('FoneclubeService.postHistoryPayment');
                    console.log(result);
                })
                .catch(function(error){
                    console.log('catch error');
                    console.log(error);
                });

            }
            catch(erro){

            }


        }
        
        function onTapPaymentHistoryDetail(history) {
            ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
        }


    }
})();
(function () {
  'use strict';

  angular.module('foneClub').service('FoneclubeService', FoneclubeService);

  FoneclubeService.inject = ['$q', 'HTTPService'];
  function FoneclubeService($q, HTTPService) {


    //API live
    var urlApi = 'http://default-environment.p2badpmtjj.us-east-2.elasticbeanstalk.com/api'

    this.postBasePerson = postBasePerson;
    this.postUpdatePerson = postUpdatePerson;
    this.postUpdatePersonAdress = postUpdatePersonAdress;
    this.postCheckout = postCheckout;
    this.postHistoryPayment = postHistoryPayment;
    this.postDebitoTransaction = postDebitoTransaction;
    this.postDeletePerson = postDeletePerson;
    this.postUpdateCustomer = postUpdateCustomer;
    this.postOrderServicePerson = postOrderServicePerson;
    this.postChargingClient = postChargingClient;
    this.postChargingClientCommitCard = postChargingClientCommitCard;
    this.postCustomerParent = postCustomerParent;
    this.postUpdatePagarmeID = postUpdatePagarmeID;
    this.postSendEmail = postSendEmail;
    this.postGeraBoleto = postGeraBoleto;
    this.postCustomerComment = postCustomerComment;
    this.postUpdateTemplate = postUpdateTemplate;
    this.postSoftDeletePhone = postSoftDeletePhone;
    this.postSoftDeleteCustomer = postSoftDeleteCustomer;
    this.postChargingLog = postChargingLog;
    this.postPersonAtivity = postPersonAtivity;
    this.postChargingUpdate = postChargingUpdate;
    this.postDesassociarLinha = postDesassociarLinha;
    this.postUpdatePhonePlan = postUpdatePhonePlan;
    this.postGeraCobrancaIntegrada = postGeraCobrancaIntegrada;
    this.postCustomerUpdateParent = postCustomerUpdateParent;
    this.postIsertServiceDeactive = postIsertServiceDeactive;
    this.postIsertServiceActive = postIsertServiceActive;
    this.postUpdateServiceFoneclube = postUpdateServiceFoneclube;
    this.postPersonFlag = postPersonFlag;
    this.postUpdateFlag = postUpdateFlag;

    this.getPlans = getPlans;
    this.getCustomerPlans = getCustomerPlans;
    this.getOperators = getOperators;
    this.getCustomers = getCustomers;
    this.getCustomerByCPF = getCustomerByCPF;
    this.getCustomerWithPhoneStatus = getCustomerWithPhoneStatus;
    this.getHistoryPayment = getHistoryPayment;
    this.getCustomerByPhoneNumber = getCustomerByPhoneNumber;
    this.getCustomerById = getCustomerById;
    this.getChargingClients = getChargingClients;
    this.getTblServiceOrders = getTblServiceOrders;
    this.getCustomerParentByPhone = getCustomerParentByPhone;
    this.getAllParents = getAllParents;
    this.getLastPaymentType = getLastPaymentType;
    this.getStatusBlockedClaro = getStatusBlockedClaro;
    this.getStatusLinhaClaro = getStatusLinhaClaro;
    this.getChargeAndServiceOrderHistory = getChargeAndServiceOrderHistory;
    this.getChargeAndServiceOrderHistoryDinamic = getChargeAndServiceOrderHistoryDinamic;
    this.getStatusCharging = getStatusCharging;
    this.getStatusDocument = getStatusDocument;
    this.getStatusChargingOfCustomer = getStatusChargingOfCustomer;
    this.getPlanOptios = getPlanOptios;
    this.getAllPlanOptios = getAllPlanOptios;
    this.SendEmailStatus = SendEmailStatus;
    this.getEmailDetails = getEmailDetails;
    this.saveemail = saveemail;
    this.getDataPgt = getDataPgt;
    this.getCommision = getCommision;
    this.dispatchedCommision = dispatchedCommision;
    this.dispatchedBonus = dispatchedBonus;
    this.getUpdatePagarme = getUpdatePagarme;
    this.getTemplates = getTemplates;
    this.getStatusAPI = getStatusAPI;
    this.getChargingLog = getChargingLog;
    this.getLinhasEstoque = getLinhasEstoque;
    this.getStatusTelefonesOperadora = getStatusTelefonesOperadora;
    this.getLastPersonCharging = getLastPersonCharging;
    this.getAllCustomers = getAllCustomers;
    this.getReintegrateDatePagarme = getReintegrateDatePagarme;
    this.getAllPhonesStatus = getAllPhonesStatus;
    this.getMassChargingData = getMassChargingData;
    this.getStatusDivergencia = getStatusDivergencia;
    this.getActiveCustomers = getActiveCustomers;
    this.getPhoneServices = getPhoneServices;
    this.getServices = getServices;
    this.getAllServices = getAllServices;
    this.getBonusLog = getBonusLog;
    this.getBonusOrderHistory = getBonusOrderHistory;
    this.getComissionsOrderHistory = getComissionsOrderHistory;
    this.getTotaisComissoes = getTotaisComissoes;
    this.postSendChargeMessage = postSendChargeMessage;
    this.postSendWhatsappMessage = postSendWhatsappMessage;
    this.getClientMessages = getClientMessages;
    this.getAPIUrl = getAPIUrl;
    this.getFlagsTypes = getFlagsTypes;
    this.getPersonFlags = getPersonFlags;
    this.getPersonPhones = getPersonPhones;
    this.getStatusCardDebito = getStatusCardDebito;
    this.getMassChargingFull = getMassChargingFull;

    function getAPIUrl() {
      return urlApi;
    }
    function getLastPaymentType(customer) {
      var q = $q.defer();
      HTTPService.get(
        urlApi.concat('/profile/getpaymentmethod?personID='.concat(customer.Id))
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomerParentByPhone(phoneparent, personid) {
      var q = $q.defer();
      HTTPService.get(
        urlApi.concat(
          '/profile/customer/GetParentbyPhone?phoneparent=' +
          phoneparent +
          '&personid=' +
          personid
        )
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getAllParents() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/customer/GetParentAll'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusChargingOfCustomer(id, month, year) {
      var q = $q.defer();
      HTTPService.get(
        urlApi.concat(
          '/charging/cobranca/status/vingencia/cliente/' +
          id +
          '/mes/' +
          month +
          '/ano/' +
          year
        )
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusCharging(month, year, ativos) {
      var q = $q.defer();

      HTTPService.get(
        urlApi.concat('/charging/cobranca/status/vingencia/mes/' + month + '/ano/' + year)
      )
        //HTTPService.get(urlApi.concat('/charging/cobranca/status/vingencia/mes/' + month + '/ano/' + year + '/ativos/' + ativos))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getUpdatePagarme() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/pagarme/transacao/update'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getReintegrateDatePagarme() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/pagarme/transacao/reintegrate/date'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getBonusLog() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/comission/bonus/lista/log'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getBonusOrderHistory(total) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/comission/bonus/order/history?total=' + total))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getComissionsOrderHistory(total) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/comission/comission/order/history?total=' + total))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getTotaisComissoes(customerId) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/comission/comission/totais/' + customerId))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postCustomerComment(commentDetails) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/comment'), commentDetails)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postUpdatePerson(personCheckout) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/update'), personCheckout)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postDeletePerson(personCheckout) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/delete/customer'), personCheckout)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postUpdatePersonAdress(personCheckout) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/updateAdress'), personCheckout)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postBasePerson(personCheckout) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/insert'), personCheckout)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postCheckout(personCheckout) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/cadastro'), personCheckout)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postHistoryPayment(personCharging) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/charging/insert'), personCharging)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postUpdateCustomer(customer) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/customer/update'), customer)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postOrderServicePerson(param) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/service/order'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postUpdatePagarmeID(customer) {
      // customer/pagarme/id/insert
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/profile/customer/pagarme/id/insert'), customer)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postChargingClient(year, month, param) {
      var q = $q.defer();
      HTTPService.post(
        urlApi
          .concat('/charging/')
          .concat(year)
          .concat('/')
          .concat(month)
          .concat('/clients/')
          .concat(param.ClientId)
          .concat('/charging'),
        param
      )
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postChargingClientCommitCard(year, month, chargingId, param) {
      var q = $q.defer();
      HTTPService.post(
        urlApi
          .concat('/charging/')
          .concat(year)
          .concat('/')
          .concat(month)
          .concat('/clients/')
          .concat(param.ClientId)
          .concat('/charging/')
          .concat(chargingId),
        param
      )
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postCustomerParent(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/customer/parent/insert'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postSendEmail(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/email/send'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postGeraBoleto() {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/pagarme/boleto'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postGeraCobrancaIntegrada(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/pagarme/integrada'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postUpdateTemplate(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/email/template/update'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postSoftDeletePhone(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/delete/soft/phone'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postSoftDeleteCustomer(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/delete/soft/customer'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postChargingLog(param, id) {
      // debugger;
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/charging/log/person/id/').concat(id), {
        SerializedCharging: param
      })
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postPersonAtivity(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/customer/ativity'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postChargingUpdate(chargingId, status) {
      var q = $q.defer();
      HTTPService.post(
        urlApi.concat('/charging/update/id/' + chargingId + '/canceled/' + status)
      )
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postDesassociarLinha(phoneId) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/desassociar?phoneId=' + phoneId))
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postUpdatePhonePlan(plan) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/plan/foneclube/update'), plan)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postCustomerUpdateParent(phone) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/customer/parent/id/insert'), phone)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postIsertServiceActive(phone) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/extra/service/insert'), phone)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postIsertServiceDeactive(phone) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/extra/service/insert/deactive'), phone)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postIsertServiceFoneclube(service) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/service/insert'), service)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postUpdateServiceFoneclube(service) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/service/update'), service)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postInsertPlanFoneclube(plan) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/plan/insert'), plan)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postUpdatePlanFoneclube(plan) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/manager/phones/plan/update'), plan)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postPersonFlag(flag) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/flags/insert'), flag)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postUpdateFlag(flag) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/profile/flag/update'), flag)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postDebitoTransaction(personCharging) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/charging/cielo/transaction/insert'), personCharging)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getPlans() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/account/plans'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getPlanOptios() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/plans'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getAllPlanOptios() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/all/plans'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCommision(customerId) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/comission/customer/').concat(customerId))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function dispatchedCommision(customerId) {
      var q = $q.defer();
      HTTPService.post(
        urlApi
          .concat('/comission/customer/')
          .concat(customerId)
          .concat('/dispatched')
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function dispatchedBonus(customerId) {
      var q = $q.defer();
      HTTPService.post(
        urlApi
          .concat('/comission/customer/')
          .concat(customerId)
          .concat('/bonus/dispatched')
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomerPlans(register) {
      var q = $q.defer();

      HTTPService.get(
        urlApi
          .concat('/profile/customer/plans?documentNumber=')
          .concat(register.toString())
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getOperators() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/account/operators'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomerByCPF(param) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/cliente?documentRegister='.concat(param)))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomerWithPhoneStatus(param) {
      var q = $q.defer();

      HTTPService.get(
        urlApi.concat('/profile/cliente/phone/status?documentRegister='.concat(param))
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomerWithPhoneStatus(param) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/cliente?documentRegister='.concat(param)))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusBlockedClaro(ddd, numeroLinha) {
      var q = $q.defer();

      HTTPService.get(
        urlApi.concat(
          '/manager/phones/claro/status/linha/ddd/' + ddd + '/numeroLinha/' + numeroLinha
        )
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusLinhaClaro(ddd, numeroLinha, numero) {
      var q = $q.defer();

      HTTPService.get(
        urlApi.concat(
          '/manager/phones/claro/status/linha/ddd/' +
          ddd +
          '/numeroLinha/' +
          numeroLinha +
          '/details'
        )
      )
        .then(function (result) {
          result.index = numero;
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomers() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/customers'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getHistoryPayment(id) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/charges?personID='.concat(id)))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getTblServiceOrders(id) {
      var q = $q.defer();
      HTTPService.get(urlApi.concat('/profile/getorders?personID='.concat(id)))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function getChargeAndServiceOrderHistory(id) {
      var q = $q.defer();
      HTTPService.get(urlApi.concat('/charging/history?personID='.concat(id)))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function getChargeAndServiceOrderHistoryDinamic(id, index) {
      var q = $q.defer();
      HTTPService.get(urlApi.concat('/charging/history?personID='.concat(id)))
        .then(function (result) {
          result.indexLista = index;
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function getCustomerByPhoneNumber(param) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/phoneOwner'), param)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomerById(id) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/cliente/id/'.concat(id)))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getChargingClients(param) {
      var q = $q.defer();

      HTTPService.get(
        urlApi
          .concat('/charging/')
          .concat(param.year)
          .concat('/')
          .concat(param.month)
          .concat('/clients')
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusDocument(documentNumber) {
      var q = $q.defer();

      HTTPService.get(
        urlApi.concat('/profile/customer/status/new/document/').concat(documentNumber)
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function SendEmailStatus(emaildetails) {
      var q = $q.defer();
      HTTPService.postFile(urlApi.concat('/email/sendemailstatus'), emaildetails)
        .then(function (result) {
          console.log(result);
          q.resolve(result);
        })
        .catch(function (error) {
          console.log(error);
          q.reject(error);
        });

      return q.promise;
    }

    function getEmailDetails(emaildetails) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/email/getEmailDetails'), emaildetails)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function saveemail(emaildetails) {
      var q = $q.defer();

      HTTPService.post(urlApi.concat('/email/saveEmailDetails'), emaildetails)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getDataPgt(idPargarme) {
      var q = $q.defer();

      HTTPService.get(
        urlApi.concat('/pagarme/transacao/dataUltimoPagamento/') + idPargarme
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getTemplates() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/email/templates'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusAPI() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/status/database/name'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getChargingLog(matricula) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/charging/history/log/person/id/') + matricula)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getLinhasEstoque() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/estoque'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusTelefonesOperadora() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/status'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getLastPersonCharging(matricula) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/charging/last/customer/') + matricula)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getAllCustomers(minimal) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/all/customers?minimal=') + minimal)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getAllPhonesStatus() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/all'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getMassChargingData(mes, ano) {
      var q = $q.defer();
      HTTPService.get(
        urlApi.concat(
          '/charging/mass?mes='
            .concat(mes)
            .concat('&ano=')
            .concat(ano)
        )
      )
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function getStatusDivergencia() {
      var q = $q.defer();
      HTTPService.get(urlApi.concat('/manager/phones/divergencia'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function getActiveCustomers() {
      var q = $q.defer();
      HTTPService.get(urlApi.concat('/profile/active/customers/parents'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function getPhoneServices(phoneId) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/') + phoneId + '/extra/services')
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getServices() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/extra/services'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getAllServices() {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/extra/all/services'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postSendChargeMessage(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/message/send-invoice'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function postSendWhatsappMessage(param) {
      var q = $q.defer();
      HTTPService.post(urlApi.concat('/message/send'), param)
        .then(function (data) {
          q.resolve(data);
        })
        .catch(function (error) {
          q.reject(error);
        });
      return q.promise;
    }

    function getClientMessages(param, minimal) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/message/client/') + param + "?minimal=" + minimal)
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getFlagsTypes(onlyFlags) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/flags/types?phoneFlagOnly='.concat(onlyFlags)))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getPersonFlags(idPerson) {
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/profile/customer/' + idPerson + '/flags'))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getPersonPhones(idPerson){
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/manager/phones/customer/' + idPerson))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusCardDebito(idPerson){
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/cielo/debito/apto/' + idPerson))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }


    function getMassChargingFull(mes,ano){
      var q = $q.defer();

      HTTPService.get(urlApi.concat('/charging/mass/full/mes/'+ mes +'/ano/' + ano))
        .then(function (result) {
          q.resolve(result);
        })
        .catch(function (error) {
          q.reject(error);
        });

      return q.promise;
    }

    

  }
})();

(function() {
  'use strict';

  angular.module('foneClub').service('HubDevService', HubDevService);

  HubDevService.inject = ['$q', 'HTTPService'];

  function HubDevService($q, HTTPService) {
    //teste
    var apiToken = '5ae973d7a997af13f0aaf2bf60e65803';

    //prod
    // var apiToken = '74817fbeb42c87d0a61f20684d3309e3';

    this.validaCPF = validaCPF;
    this.validaCEP = validaCEP;

    function validaCPF(cpf, datanascimento) {
      var q = $q.defer();
      var packageNumber = cpf.length > 11 ? 4 : 1;
      //packages
      //1 CPF Básico 2 CPF Avançado 4 CNPJ Básico 7 CPF Personalizado 8 CPF Personalizado
      ///{token}/{package}/{type}/{value}
      HTTPService.get(
        'https://api.cpfcnpj.com.br/'
          .concat(apiToken)
          .concat('/')
          .concat(packageNumber)
          .concat('/')
          .concat('json')
          .concat('/')
          .concat(cpf)
          .concat('/')
      )
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function validaCEP(cep) {
      var q = $q.defer();

      HTTPService.get('http://viacep.com.br/ws/'.concat(cep).concat('/json/'))
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }
  }
})();

(function() {
  'use strict';

  angular.module('foneClub').service('PagarmeService', PagarmeService);

  PagarmeService.inject = ['$q', 'HTTPService'];

  function PagarmeService($q, HTTPService) {
        
    //live
    var apiKey = 'ak_live_fP7ceLSpdBe8gCXGTywVRmC5VTkvN0'
    var encriptionKey = 'ek_live_U52ijlxsDgB8mk0rzcJde7HYHzqWYl';

    this.getCards = getCards;
    this.getCustomers = getCustomers;
    this.getCustomer = getCustomer;
    this.getCard = getCard;
    this.getStatusBoleto = getStatusBoleto;
    this.getStatusBoletoRecursivo = getStatusBoletoRecursivo;

    this.postBoleto = postBoleto;
    this.postBoletoDirect = postBoletoDirect;
    this.postTransactionCard = postTransactionCard;
    this.postTransactionExistentCard = postTransactionExistentCard; //refact pra uma só func
    this.postCaptureTransaction = postCaptureTransaction;
    this.generateCardHash = generateCardHash;
    this.notifyCustomerBoleto = notifyCustomerBoleto;

    this.getBoletoUrl = getBoletoUrl;

    function getBoletoUrl(id, chargesAndOrders, index) {
      var q = $q.defer();

      HTTPService.get(
        'https://api.pagar.me/1/transactions?api_key='
          .concat(apiKey)
          .concat('&id=')
          .concat(id)
      )
        .then(function(result) {

          debugger
          result.index = index;
          result.chargesAndOrders = chargesAndOrders;
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCards() {
      var q = $q.defer();

      HTTPService.get('https://api.pagar.me/1/cards?api_key='.concat(apiKey))
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomers() {
      var q = $q.defer();
      console.log('getCustomers');
      HTTPService.get(
        'https://api.pagar.me/1/customers/?count=10000&api_key='.concat(apiKey)
      )
        .then(function(result) {
          console.log(result);
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCustomer(documentNumber) {
      var q = $q.defer();

      HTTPService.get(
        'https://api.pagar.me/1/customers/?api_key='
          .concat(apiKey)
          .concat('&document_number=')
          .concat(documentNumber)
      )
        .then(function(result) {
          console.log(result);
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getCard(customerId) {
      var q = $q.defer();

      HTTPService.get(
        'https://api.pagar.me/1/cards?api_key='
          .concat(apiKey)
          .concat('&customer_id=')
          .concat(customerId)
      )
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postBoleto(amount, instructions, customer) {
      var q = $q.defer();

      // debugger;
      var parameters = {
        api_key: apiKey,
        encryption_key: encriptionKey,
        amount: amount,
        payment_method: 'boleto',
        'data-customer-data': true,
        customer: customer,
        boleto_instructions: instructions
      };

      HTTPService.post('https://api.pagar.me/1/transactions', parameters)
        .then(function(result) {
          console.log(result);
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postBoletoDirect(amount, instructions, customer, expirationDate) {
      var q = $q.defer();

      // debugger;
      // var parameters = {
      //     'api_key':apiKey,
      //     // 'encryption_key':encriptionKey,
      //     'amount': amount,
      //     'payment_method':'boleto',
      //     'boleto_instructions': instructions
      // };

      var parameters = {
        api_key: apiKey,
        // 'encryption_key':encriptionKey,
        amount: amount,
        payment_method: 'boleto',
        'data-customer-data': true,
        customer: customer,
        boleto_instructions: instructions,
        boleto_expiration_date: expirationDate
      };

      HTTPService.post('https://api.pagar.me/1/transactions', parameters)
        .then(function(result) {
          console.log(result);
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function notifyCustomerBoleto(id, email) {
      var q = $q.defer();

      // var parameters = {
      //     'email': email
      // };

      // HTTPService.post('https://api.pagar.me/1/transactions/'.concat(id).concat('/collect_payment?api_key=').concat(apiKey), parameters)
      // .then(function(result){
      //     console.log(result);
      //     q.resolve(result);
      // })
      // .catch(function(error){
      //     q.reject(error);
      // });

      q.resolve(true);

      return q.promise;
    }

    function postTransactionCard(amount, cardHash, customer) {
      var q = $q.defer();

      var parameters = {
        api_key: apiKey,
        encryption_key: encriptionKey,
        amount: amount,
        card_hash: cardHash,
        'data-customer-data': true,
        customer: customer
      };

      console.log('--- Transação com prametros:');
      console.log(parameters);

      HTTPService.post('https://api.pagar.me/1/transactions', parameters)
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postTransactionExistentCard(amount, cardId, customer) {
      var q = $q.defer();

      var parameters = {
        api_key: apiKey,
        encryption_key: encriptionKey,
        amount: amount,
        card_id: cardId,
        customer: customer
      };

      console.log('--- Transação com prametros:');
      console.log(parameters);

      HTTPService.post('https://api.pagar.me/1/transactions', parameters)
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function postCaptureTransaction(transactionId, amount) {
      var q = $q.defer();

      var parameters = {
        api_key: apiKey,
        amount: amount
      };

      HTTPService.post(
        'https://api.pagar.me/1/transactions/'.concat(transactionId).concat('/capture'),
        parameters
      )
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function generateCardHash(cardData) {
      var q = $q.defer();
      PagarMe.encryption_key = encriptionKey;
      var creditCard = new PagarMe.creditCard();
      creditCard.cardHolderName = cardData.cardHolderName;
      creditCard.cardExpirationMonth = cardData.cardExpirationMonth;
      creditCard.cardExpirationYear = cardData.cardExpirationYear;
      creditCard.cardNumber = cardData.cardNumber;
      creditCard.cardCVV = cardData.cardCVV;

      var fieldErrors = creditCard.fieldErrors();
      var hasErrors = false;

      for (var field in fieldErrors) {
        hasErrors = true;
        break;
      }

      if (hasErrors) {
        q.reject(fieldErrors);
      } else {
        creditCard.generateHash(function(cardHash) {
          q.resolve(cardHash);
        });
      }

      return q.promise;
    }

    function getStatusBoleto(boletoId) {
      var q = $q.defer();

      HTTPService.get(
        'https://api.pagar.me/1/transactions?api_key='
          .concat(apiKey)
          .concat('&id=')
          .concat(boletoId)
      )
        .then(function(result) {
          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }

    function getStatusBoletoRecursivo(
      boletoId,
      elemento,
      viewModel,
      indexCustomerModel,
      indexChargeModel
    ) {
      var q = $q.defer();

      HTTPService.get(
        'https://api.pagar.me/1/transactions?api_key='
          .concat(apiKey)
          .concat('&id=')
          .concat(boletoId)
      )
        .then(function(result) {
          // if (elemento.Name == 'Antonia Maria da Silva Barboza')
          //     // debugger

          try {
            result[0].elemento = elemento;
            result[0].vm = viewModel;
            result[0].indexCustomer = indexCustomerModel;
            result[0].indexCharge = indexChargeModel;
          } catch (erro) {
            //// debugger
          }

          q.resolve(result);
        })
        .catch(function(error) {
          q.reject(error);
        });

      return q.promise;
    }
  }
})();

(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .filter('filterTelefone', filterTelefone);
    
            filterTelefone.inject = [];

        function filterTelefone() {
            return function(arr, input) {
                if (input == null || input == undefined || arr == null || arr == undefined || arr.length == 0 ) {
                    return arr;
                }
                var inputClean = input.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~a-zA-Z]/g, '');
                if (inputClean == null || input == undefined) {
                    return arr;
                }
                return arr.filter(function(param) {
                    return param.Phones.find(function(phone) {
                        return phone.DDD.concat(phone.Number).indexOf(inputClean) !== -1;
                        // return phone.Number.toString().substring(0, inputClean.length) == inputClean;
                    }) 
                })
            }
        }
    })();
(function () {

    'use strict';

    angular
        .module('foneClub')
        .factory('DataFactory', DataFactory);

    DataFactory.$inject = [];

    function DataFactory() {

        var data = {};

        return data;

    }

})();

(function() {

  'use strict';

  angular.module('foneClub')
    .service('FileListUtil', FileListUtil);

  function FileListUtil() {

    /* fields */
    this.data = undefined;

    this.set = set
    this.get = get

    function set(fileList){
        this.data = fileList;
    }

    function get(){
        return this.data;
    }

  }

})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .service('FireBaseManagerUtil', FireBaseManagerUtil);

    FireBaseManagerUtil.$inject = ['$firebaseArray'];
    function FireBaseManagerUtil($firebaseArray) {

        var ref = firebase.database().ref();
        var log = $firebaseArray(ref.child("log"));
        var users = $firebaseArray(ref.child("users"));

        this.initialize = initialize;
        this.addLog = addLog;
        this.addUser = addUser;
        this.getUsers = getUsers;

        function initialize(){

        }

        function addLog(value){
            log.$add({
             text: value
            });
        }

        // FireBaseManagerUtil.addUser({
        //     user:'Gustavo',
        //     password:'123gustavo'
        // });

        function addUser(user){
            users.$add(user);
        }

        function getUsers(){

            // var obj = $firebaseObject(ref);
            // obj.$loaded()
            // .then(function(data) {
            //     console.log(data === obj); // true
            // })
            // .catch(function(error) {
            //     console.error("Error:", error);
            // });

            return users;
        }

    }
})();
(function () {

  'use strict';

  angular.module('foneClub')
    .service('HTTPService', HTTPService);

  HTTPService.$inject = ['$http'];

  function HTTPService($http) {

    var vm = this;
    vm.get = get;
    vm.post = post;
    vm.postFile = postFile;
    vm.getStatus = getStatus;

    function get(path, params) {

      return $http.get(path, { params: params })
        .then(complete)
        .catch(error);

      function complete(data) {
        return data.data;
      }

      function error(message) {
        throw message;
      }
    }

    function getStatus(path, params) {

      return $http.get(path, { params: params })
        .then(complete)
        .catch(error);

      function complete(data) {
        return data.status;
      }

      function error(message) {
        throw message;
      }
    }

    function post(path, params) {

      return $http.post(path, params)
        .then(complete)
        .catch(error);

      function complete(data, status, headers, config) {
        return data.data;
      }

      function error(message) {
        throw message;
      }
    }
    function postFile(path, params) {
      // debugger;
      return $http.post(path, params, {
        headers: { 'Content-Type': undefined }
      })
        .then(complete)
        .catch(error);

      function complete(data) {
        return data;
      }

      function error(message) {
        throw message;
      }
    }
  }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .service('LocationService', LocationService);

    LocationService.inject = ['$state', 'UtilsService'];
    function LocationService($state, UtilsService) {

        this.change = change;

        function change(value, dataParameters) {
            UtilsService.setRouteData(value)
            $state.go(value, {
                data: dataParameters
            });
        }
    }
})();
(function() {

  'use strict';

  angular.module('foneClub')
    .service('MainUtils', MainUtils);

  MainUtils.inject = ['$q', '$cordovaFile', '$ionicLoading', '$ionicPopup'];
  function MainUtils($q, $cordovaFile, $ionicLoading, $ionicPopup) {

    this.guid = guid;
    this.pathToDataURI = pathToDataURI;
    this.dataURIToBlob = dataURIToBlob;
    this.uploadFile = uploadFile;
    this.operatorOptions = operatorOptions;

    this.agent = undefined;
    this.setAgent = setAgent
    this.getAgent = getAgent

    function setAgent(value){
        this.agent = value;
    }

    function getAgent(){
        return this.agent;
    }

      function guid() {

        function s4() {
          return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
        }

        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
          s4() + '-' + s4() + s4() + s4();
      }

      function dataURIToBlob(dataURI) {
            // convert base64/URLEncoded data component to raw binary data held in a string
            var byteString;
            if (dataURI.split(',')[0].indexOf('base64') >= 0)
                byteString = atob(dataURI.split(',')[1]);
            else
                byteString = unescape(dataURI.split(',')[1]);

            // separate out the mime component
            var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

            // write the bytes of the string to a typed array
            var ia = new Uint8Array(byteString.length);
            for (var i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }

            return new Blob([ia], {type:mimeString});
        }

        function pathToDataURI(url, callback) {
            var xhr = new XMLHttpRequest();
            var headers = {
              'Access-Control-Allow-Origin' : '*',
              'Access-Control-Allow-Methods' : 'POST, GET, OPTIONS, PUT',
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            };
            xhr.onload = function() {
                var reader = new FileReader();
                reader.onloadend = function() {
                callback(reader.result);
                }
                reader.readAsDataURL(xhr.response);
            };
            xhr.open('GET', url);
            xhr.headers = headers;
            xhr.responseType = 'blob';
            xhr.send();
        }

        function uploadFile(file){

            var q = $q.defer();

            var imageUploader = new ImageUploader();
            imageUploader.push(file)
            .then((data) => {
                //console.debug('Upload complete. Data:', data);
                q.resolve(data);
            })
            .catch((err) => {
                console.error(err);
                q.reject(err);
            });

            return q.promise;
        }

        function operatorOptions(){

            return [
                {'nome':'Claro', 'id':1},
                {'nome':'Vivo', 'id':2},
                {'nome':'Oi', 'id':3},
                {'nome':'Tim', 'id':4},
                {'nome':'Vivo', 'id':5},
                {'nome':'Outra', 'id':6},
            ];
        }

  }

})();
(function() {

    'use strict';

    angular.module('foneClub').service('UtilsService', UtilsService);

    UtilsService.inject = ['$q'];

    function UtilsService($q) {
        return {
            clearDocumentNumber: _clearDocumentNumber,
            clearDocumentNumber: _clearDocumentNumber,
            getContactPhoneFromPhones: _getContactPhoneFromPhones,
            getRouteData: getRouteData,
            getPreviousRouteData: getPreviousRouteData,
            setRouteData:setRouteData,
            getDocumentNumerWithMask: _getDocumentNumerWithMask,
            getPhoneNumberFromStringToJson: _getPhoneNumberFromStringToJson,
            clearPhoneNumber: _clearPhoneNumber,
            sendImageToUpload: _sendImageToUpload
        }

        
        function getRouteData(){
            return this.data
        }

        function getPreviousRouteData(){
            return this.previousRoute
        }

        function setRouteData(param){
            this.previousRoute = this.data;
            this.data = param
        }
        
        function _clearDocumentNumber(documentNumber){
            return documentNumber.replace(/[-.]/g, '').replace('/','');
        }
        
        function _getContactPhoneFromPhones(phones) {
            var contacts = phones.filter(function (element) {
                return !element.IsFoneclube;
            });
            return contacts;
        }
        
        function _getDocumentNumerWithMask(documentNumber) {
            return documentNumber.substr(0, 3) + '.' + documentNumber.substr(3, 3) + '.' + documentNumber.substr(6, 3) + '-' + documentNumber.substr(9)
        }

        function _getPhoneNumberFromStringToJson(param) {
            var number = {
                DDD: _clearPhoneNumber(param).substring(0, 2),
                Number: _clearPhoneNumber(param).substring(2)
            }
            return number;
        }

        function _clearPhoneNumber(number) {
            return number ? number.replace('-', '').replace(' ', '').replace('(', '').replace(')', '') : '';
        }

        function _sendImageToUpload(imageSelf, imageFrente, imageVerso) {
            var q = $q.defer();
            var toUpload = [];
            if (imageSelf) toUpload.push({img: imageSelf, tipo: 1});
            if (imageFrente) toUpload.push({img: imageFrente, tipo: 2});
            if (imageVerso) toUpload.push({img: imageVerso, tipo: 3});
            if (toUpload.length == 0) {
                q.resolve();
            }
            var promises = toUpload.map(function(image) {
                return uploadImage(image);
            });
            $q.all(promises).then(function (result){
                console.log(result);
                q.resolve(result);
            }, function (result){
                console.log(result);
                q.reject(result);
            });
            return q.promise;
        }

        function uploadImage(imagem) {
            var q = $q.defer();
            var holdId = imagem.tipo;
            function isInvalidName(str){
                return /\s/.test(str);
            }
            if(isInvalidName(imagem.img.name)){
                q.reject("Não foi possivel enviar sua imagem, por favor envie uma imagem sem espaço no nome do arquivo");
                return q.promise;
            }
            var imageUploader = new ImageUploader();
            imageUploader.push(imagem.img)
            .then((data) => {
                data.tipo = holdId;
                q.resolve(data);
            })
            .catch((err) => {
                q.reject('Não foi possível enviar imagens');
            });
            return q.promise;
        }

    }
})();
(function() {
  'use strict';

  angular.module('foneClub').service('ViewModelUtilsService', ViewModelUtilsService);

  ViewModelUtilsService.inject = ['$ionicModal', 'DialogFactory'];
  function ViewModelUtilsService($ionicModal, DialogFactory) {
    //todo colocar cria~ção na hora do show garantindo sempre limpeza ao abrir
    this.modalCustomerData = {};
    this.showModalCustomer = showModalCustomer;
    this.showModalComment = showModalComment;
    this.showModalFlag = showModalFlag;

    this.modalNewCardPaymentData = {};
    this.showModalNewCardPayment = showModalNewCardPayment;

    this.modalExistentCardPaymentData = {};
    this.modalExistentCardData = {};
    this.showModalExistentCardPayment = showModalExistentCardPayment;
    this.showModalPaymentHistoryDetail = showModalPaymentHistoryDetail;

    this.modalData = {};
    this.showModal = showModal;

    this.modalBoletoData = {};
    this.modalRepeatBoletoData = {};

    this.modalCardData = {};
    this.modalRepeatCardData = {};
    this.showModalBoleto = showModalBoleto;
    this.showModalBoletoPayment = showModalBoletoPayment;
    this.showModalDebito = showModalDebito;

    this.showModalRepeatBoleto = showModalRepeatBoleto;
    this.showModalRepeatCard = showModalRepeatCard;
    this.showModalEmailDetail = showModalEmailDetail;
    this.showModalWhatsapp = showModalWhatsapp;

    function showModal(data) {
      this.modalData = data;
      var service = this;

      DialogFactory.showTemplate('modules/lista-customer/checkout-customer-modal.html');
    }

    function showModalCustomer(data, index) {
      this.modalCustomerData = data;
      this.modalCustomerData.index = index;
      var service = this;

      DialogFactory.showTemplate('modules/customers/customers-modal/customer-modal.html');
    }

    function showModalNewCardPayment(data) {
      this.modalNewCardPaymentData = data;
      var service = this;

      DialogFactory.showTemplate('modules/customers/new-card/new-card-payment.html');
    }
    function showModalComment(data) {
      this.modalCommentData = data;
      var service = this;
      DialogFactory.showTemplate('modules/customers/comment/comment.html');
    }

    function showModalFlag(data){
      this.modalFlagData = data;
      var service = this;
      DialogFactory.showTemplate('modules/customers/flags-modal/flags.html');
    }

    function showModalExistentCardPayment(data, card) {
      this.modalExistentCardPaymentData = data;
      this.modalExistentCardData = card;
      var service = this;

      DialogFactory.showTemplate('modules/customers/existent-card/existent-card.html');
    }

    function showModalBoleto(data) {
      this.modalBoletoData = data;
      var service = this;

      DialogFactory.showTemplate('modules/customers/boleto/boleto.html');
    }

    function showModalDebito(data) {
      this.modalBoletoData = data;
      var service = this;

      DialogFactory.showTemplate('modules/customers/debito/debito.html');
    }

    function showModalBoletoPayment(data) {
      this.modalBoletoData = data;
      var service = this;
      DialogFactory.showTemplate('modules/customers/boleto/boletopayment.html');
    }
    function showModalRepeatBoleto(payment, data) {
      // debugger;
      this.modalBoletoData = data;
      this.modalRepeatBoletoData = payment;
      var service = this;
      DialogFactory.showTemplate('modules/customers/repeat-boleto/repeat-boleto.html');
    }
    function showModalRepeatCard(payment, data) {
      // debugger;
      this.modalCardData = data;
      this.modalRepeatCardData = payment;
      var service = this;
      DialogFactory.showTemplate('modules/customers/repeat-card/repeat-card.html');
    }

    function showModalPaymentHistoryDetail(history, customer) {
      this.modalPaymentDetailHistory = history;
      this.modalPaymentDetailCustomer = customer;
      var service = this;
      DialogFactory.showTemplate('modules/customers/payment-detail/paymentdetail.html');
    }

    function showModalEmailDetail(emailstatus, phone, email, operator) {
      this.modalEmailDetailemailstatus = emailstatus;
      this.modalEmailDetailphone = phone;
      this.modalEmailDetailemail = email;
      this.modalEmailDetailoperator = operator;
      var service = this;
      DialogFactory.showTemplate('modules/customers/edicao/EmailTemplate.html');
    }

    function showModalWhatsapp(data) {
      this.modalData = data;
      var service = this;

      DialogFactory.showTemplate('modules/whatsapp/whatsapp.html');
    }

    this.showConfirmDialog = function(title, content) {
      return DialogFactory.dialogConfirm({
        titulo: title,
        mensagem: content
      });
    };
  }
})();

(function () {
    
        'use strict';
    
        angular
            .module('foneClub')
            .factory('DialogFactory', DialogFactory);
    
        DialogFactory.$inject = ['ngDialog', '$q'];
    
        function DialogFactory(ngDialog, $q) {

            function _dialogConfirm(param) {                
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    param.titulo = 'Confirmação';
                }
                if(param.btn1 == undefined || !param.btn1) {
                    param.btn1 = 'Não';
                }
                if(param.btn2 == undefined || !param.btn2) {
                    param.btn2 = 'Ok';
                }
                ngDialog.openConfirm({
                    template:'<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.mensagem +'</div>' +
                    '<div class="footer">' +                    
                    '<button type="button" class="btnCancelar" ng-click="closeThisDialog(0)"> '+ param.btn1 + ' </button>' +
                    '<button type="button" id="openConfirm-btn-confirm" class="btnConfirmar" ng-enter-all="confirm(1)" ng-click="confirm(1)"> ' + param.btn2 + ' </button></div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false                    
                }).then(function(param) {
                    defer.resolve(param);
                }, function(param) {
                    defer.resolve(param);
                })
                return defer.promise;
            }

            function _showMessageDialog(param) {
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    param.titulo = 'Aviso';
                }
                ngDialog.open({
                    template: '<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.mensagem +'</div>' +
                    '<div class="footer">' +
                    '<button type="button" class="btnOk" ng-enter-all="closeThisDialog(0)" ng-click="closeThisDialog(0)">Ok' +
                    '</button></div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                })
                return defer.promise;
            }

            function _showAlertDialog(param) {
                // debugger;
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    param.titulo = 'Aviso';
                }
                ngDialog.open({
                    template: '<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.message +'</div>' +
                    '<div class="footer">' +
                    '<button type="button" class="btnOk" ng-enter-all="closeThisDialog(0)" ng-click="closeThisDialog(0)">Ok' +
                    '</button></div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                })
                return defer.promise;
            }
            
            function _showLoader(mensagem) {                               
                return ngDialog.open({
                    template: '<div class="mensagens-dialog"><div class="show-loader">'+                    
                    '<span>'+ mensagem +'</span></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                })                
            }

            function _showMessageConfirm(param) {
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    param.titulo = 'Aviso';
                }
                ngDialog.openConfirm({
                    template:'<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.mensagem +'</div>' +
                    '<div class="footer">' +                    
                    '<button type="button" class="btnOk" ng-enter-all="confirm(1)" ng-click="confirm(1)"> Ok </button></div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                }).then(function(param) {
                    defer.resolve(param);
                }, function(param) {
                    defer.resolve(param);
                })
                return defer.promise;
            }

            function _showTemplate(template) {
                return ngDialog.open({                    
                    template: template,   
                    className: 'show-template',                        
                    closeByDocument: true,
                    closeByEscape: true,
                    showClose: false                    
                })
            }

            return {
                dialogConfirm: _dialogConfirm,
                showMessageDialog: _showMessageDialog,
                showMessageConfirm: _showMessageConfirm,
                showLoader: _showLoader,
                showTemplate: _showTemplate,
                showAlertDialog:_showAlertDialog
            }
    
        }
    
    })();
    

angular
.module('foneClub')
.directive('moneyInput', function($filter, $browser, $timeout) {
    return {
        require: 'ngModel',
        link: function($scope, $element, $attrs, ngModelCtrl) {
            var listener = function() {

                console.log($element.val());
                var value = $element.val().replace(/[^0-9]/g, '');
                $element.val($filter('currency')(value/100, "R$", 2));

            };


            // This runs when we update the text field
            ngModelCtrl.$parsers.push(function(viewValue) {
                return viewValue.replace(/[^0-9]/g, '')
            });

            // This runs when the model gets updated on the scope directly and keeps our view in sync
            ngModelCtrl.$render = function() {
                $element.val(ngModelCtrl.$viewValue);
            };

            $element.bind('change', listener);
            $element.bind('keydown', function(event) {
                $browser.defer(listener); // Have to do this or changes don't get picked up properly
            });
            $timeout(function(){
                $element.val($filter('currency')($element.val().replace(/[^0-9]/g, '')/100, "R$", 2));    
                $browser.defer(listener)
            },500);
            
        }

    };
});
angular.module('foneClub').directive('ngEnter', function () {
    return function(scope, element, attrs) {
        element.bind("keydown keypress", function(event) {
            if(event.which === 13) {
                scope.$apply(function(){
                    scope.$eval(attrs.ngEnter, {'event': event});
                });

                event.preventDefault();
            }
        });
    };
});

angular.module('foneClub').directive('ngEnterAll', function () {    
    return function (scope, element, attrs) {
        angular.element(document).find('body').bind("keydown", function (event) {            
            if(event.which === 13) {
                scope.$apply(function (){
                    scope.$eval(attrs.ngEnterAll);
                });
 
                event.preventDefault();
            }
        });

        
    };
});

angular.module('foneClub').directive('nextOnEnter', function () {
    return {
        restrict: 'A',
        link: function ($scope, selem, attrs) {
            selem.bind('keydown', function (e) {
                var code = e.keyCode || e.which;
                if (code === 13) {
                    e.preventDefault();
                    var pageElems = document.querySelectorAll('input, select, textarea'),
                        elem = e.srcElement || e.target,
                        focusNext = false,
                        len = pageElems.length;
                    for (var i = 0; i < len; i++) {
                        var pe = pageElems[i];
                        if (focusNext) {
                            if (pe.style.display !== 'none') {
                                document.getElementById(pe.id).focus();
                                break;
                            }
                        } else if (pe === elem) {
                            focusNext = true;
                        }
                    }
                }
            });
        }
    }
});


//angular.module('foneClub', ['kendo.directives']);
angular.module('foneClub').controller('statusChangingController2', statusChangingController2);



function statusChangingController2($scope, $interval, FoneclubeService, PagarmeService) {




  var vm = this;
  vm.month = new Date().getMonth() + 1;
  vm.year = new Date().getFullYear();
  vm.diffDays = diffDays;
  vm.statusType = {
    COBRADO: 1,
    NAO_COBRADO: 2,
    PAGO: 3,
    REFUNDED: 4,
    VENCIDO: 5
  };
  vm.PagamentosType = {
    BOLETO: 1,
    CARTAO: 2
  };
  vm.AtivoType = {
    ATIVA: 2,
    CANCELADA: 1
  }
  vm.tiposStatus = [
    { id: "", title: "" },
    { id: 1, title: 'COBRADO' },
    { id: 2, title: 'NÃO COBRADO' },
    { id: 3, title: 'PAGO' },
    { id: 4, title: 'REFUNDED' },
    { id: 5, title: 'VENCIDO' }
  ];
  vm.tiposPagamento = [
    { id: "", title: "" },
    { id: 1, title: 'BOLETO' },
    { id: 2, title: 'CARTÃO' }
  ];
  vm.tipoAtiva = [
    { id: "", title: "" },
    { id: 1, title: 'CANCELADA' },
    { id: 2, title: 'ATIVA' }
  ]
  vm.tipoAcao = [
    { id: "", title: "" },
    { id: 1, title: 'A' },
    { id: 2, title: 'C' }
  ]

  function convertToViewModel(sourceData) {
    var customerDataList = [];

    for (var i = 0; i < sourceData.length; i++) {
      var customer = sourceData[i];




      var RCobrado = customer.ammoutIntFormat;
      var customerSelectedCharge = '';
      var Tipo = '';
      var TipoLink = '';
      var Acao = '';
      var AcaoBool = false;
      var Vencimento = customer.boletoExpires;
      var Ultimopag = customer.LastPaidDate;
      var Dias2 = diffDays(customer.LastPaidDate);
      var RPago;
      var CustomerName = customer.Name;
      var Status2 = '';
      var customerChargeId = '';
      var UltimaCob = customer.chargingDate;
      var Dias = 0;
      var Status = customer.descricaoStatus;

      if (customer.descricaoStatus == '2') { Status = 'NÃO COBRADO'; }
      if (customer.descricaoStatus == '3') { Status = 'PAGO' };
      if (customer.descricaoStatus == '4') { Status = 'REFUNDED' };
      if (customer.descricaoStatus == '5') { Status = 'VENCIDO' };

      if (customer.ChargingValidity != undefined) {

        var lastChargingRec = (customer.ChargingValidity.length - 1);
        var customerChargingInfo = customer.ChargingValidity[lastChargingRec];

        customerSelectedCharge = customerChargingInfo;
        customerChargeId = customerChargingInfo.Id;
        if (customerChargingInfo.CreateDate != null && customerChargingInfo.CreateDate != undefined) {
          UltimaCob = customerChargingInfo.CreateDate;

        }



        Status2 = customerChargingInfo.Canceled ? 'Cancelada' : 'Ativa'

        if (customerChargingInfo.PaymentType == 1) {
          Tipo = 'CARTÃO';
        }
        else {
          Tipo = 'BOLETO'
          TipoLink = customerChargingInfo.BoletoLink;
        }
        if (customerChargingInfo.Canceled) {
          Acao = 'A';
          AcaoBool = true;
        }
        if (!customerChargingInfo.Canceled) {
          Acao = 'C';
        }
      }

      if (UltimaCob != undefined && UltimaCob != null) { Dias = diffDays(UltimaCob); }

      if (customer.Name == 'Rodrigo Cardozo Pinto') {
        //debugger;

      }

      customerDataList.push({
        'UltimaCob': UltimaCob,
        'Dias': Dias,
        'RCobrado': RCobrado,
        'Tipo': Tipo,
        'TipoLink': TipoLink,
        'Status': Status,
        'StatusId': customer.descricaoStatus,
        'Status2': Status2,
        'Acao': Acao,
        'AcaoBool': AcaoBool,
        'customerSelectedCharge': customerSelectedCharge,
        'customerChargeId': customerChargeId,
        'Vencimento': Vencimento,
        'Ultimopag': Ultimopag,
        'Dias2': Dias2,
        'RPago': RPago,
        'CustomerName': CustomerName,
      });
    }
    return customerDataList;
  }

  $scope.onPageLoad = function () {
    $scope.onClickSearchCustomerData();
  }

  $scope.onClickSearchCustomerData = function () {
    vm.loading = true;
    vm.totalReceivedReady = false;
    hasUpdate = false;
    var ativos = vm.somenteAtivos ? 1 : 0;

    FoneclubeService.getStatusCharging(vm.month, vm.year, ativos).then(function (result) {

      vm.customers = result;
      for (var i in vm.customers) {

        vm.customers[i].allChargingsCanceled = false;

        for (var o in vm.customers[i].ChargingValidity) {
          vm.customers[i].ChargingValidity[o].display = true;
        }
      }
      handleData(vm.customers);
      loadPaymentHistory();
      var gridData = vm.customers;
      initDataProperties(gridData);
    })
  }


  $scope.exportToExcel = function () {
    debugger
    $('.k-grid-excel').trigger("click")
  }

  function initDataProperties(customerDatasource) {
    var customerData = convertToViewModel(customerDatasource);
    var totalRecords = customerData.length + 10;
    var pageHeight = $(window).height() - 110;

    $scope.customerDataSource = new kendo.data.DataSource({
      data: customerData,
      pageSize: totalRecords,
      schema: {
        model: {
          fields: {
            Dias: { type: "number" },
            AcaoBool: { type: "boolean" },
          }
        }
      },
    });
    $scope.customerGridOptions = {
      dataSource: $scope.customerDataSource,
      height: pageHeight,
      toolbar: ["excel"],
      excel: {
        allPages: true,
        fileName: "Customer Report.xlsx",
        template: "<a class='k-button k-button-icontext' onclick='customCommand();' href='\\#'></span>Cutom Command</a>"
      },
      sortable: true,
      scrollable: true,
      pageable: {
        refresh: true,
        alwaysVisible: false

      },
      reorderable: true,
      resizable: true,

      filterable: {
        mode: "row",
        extra: false,
        operators: {
          string: {
            contains: "Contains",
            startswith: "Starts with",
            eq: "Is equal to",
            neq: "Is not equal to"
          },
          number: {
            eq: "Equal to",
            neq: "Not equal to",
            gte: "Greater Than",
            lte: "Less Than"
          }
        }
      },
      columns: [
        {
          field: "CustomerName", title: "Name", width: "220px", headerTemplate: "<div class='break-word'>Name<div>"
          , filterable: { cell: { operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "UltimaCob", title: "Última Cob.", width: "130px",
          template: "#if( UltimaCob != '1999/12/31') {# <div>#=kendo.toString(kendo.parseDate(UltimaCob, 'yyyy-MM-dd'), 'dd.MMM')#</div> #}else{# <div>-</div> #}#",
          headerTemplate: "<div class='break-word'>Última Cob.<div>",
          filterable: { cell: { showOperators: false,operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Dias", title: "Dias", width: "150px"
          , headerTemplate: "<div class='break-word'>Dias<div>",
          filterable: { cell: { operator: "gte", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }

        },
        {
          field: "Status", title: "Status", width: "140px"
          , headerTemplate: "<div class='break-word'>Última Cob. <br>Status<div>"
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({                   
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'COBRADO' }, { text: 'NÃO COBRADO' }, { text: 'PAGO' }, { text: 'REFUNDED' }, { text: 'VENCIDO' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },
        {
          field: "RCobrado", title: "R$ Cobrado", width: "110px"
          , headerTemplate: "<div class='break-word'>R$ <br>Cobrado<div>"
          , filterable: { cell: { showOperators: false,operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Tipo", title: "Tipo", width: "110px"
          , headerTemplate: "<div class='break-word'>Tipo<div>"
          , template: " #if( Tipo != 'BOLETO') {#   <label>#:Tipo#</label>  #} else{#  <a href='#:TipoLink#' target='_blank'>#:Tipo#</a> #}# "
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'BOLETO' }, { text: 'CARTÃO' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },


        {
          field: "Status2", title: "Status", width: "130px"
          , headerTemplate: "<div class='break-word'>Ação <br>Status<div>"
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'ATIVA' }, { text: 'CANCELADA' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },

        {
          field: "Acao", title: "Ação", width: "80px", headerTemplate: "<div class='break-word'>Ação <div>"
          , template: " #if( Acao == 'C') {#   <button class= 'btnb btn-danger action-buttons' ng-click='vm.onDesativarBoleto(#:customerChargeId#)'>				C</button>  #} else{#  <button class='btnb btn-info action-buttons' ng-click='vm.onAtivarBoleto(#:customerChargeId#)'>A</button> #}# "
          , filterable: {
            cell: {
              showOperators: false,
              template: function (args) {
                args.element.kendoDropDownList({
                  dataTextField: "text",
                  dataValueField: "text",
                  dataSource: new kendo.data.DataSource({ data: [{ text: 'A' }, { text: 'C' }] }),
                  index: 0,
                  optionLabel: { text: "", value: "" },
                  valuePrimitive: true
                })
              }
            }
          }
        },

         

        {
          field: "Vencimento", title: "Vencimento", width: "110px", headerTemplate: "<div class='break-word'>Vencimento<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Ultimopag", title: "Última pag.", width: "110px", headerTemplate: "<div class='break-word'>Última pag.<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "Dias2", title: "Dias", width: "110px", headerTemplate: "<div class='break-word'>Dias<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },
        {
          field: "RPago", title: "R$ Pago", width: "110px", headerTemplate: "<div class='break-word'>R$ Pago<div>"
          , filterable: { cell: { showOperators: false, operator: "contains", template: function (args) { args.element.css("width", "90%").addClass("k-textbox").attr("data-value-update", "keyup"); }, } }
        },

      ]
    }
    vm.loading = false;
  }


  function handleData(customers) {
    vm.callbackCount = 0;
    vm.totalBoletoCharges = 0;
    vm.totalReceived = 0;
    vm.totalCharged = 0;
    vm.totalCustomers = customers.length;
    vm.totalCustomersCharged = customers.filter(v => v.Charged == true).length;
    vm.totalCustomersNotCharged = customers.filter(v => v.Charged == false).length;

    try {
      vm.totalBoletoCharges = customers[0].TotalBoletoCharges;
    }
    catch (erro) {
      //sem clientes
    }

    for (var index in customers) {

      var customer = customers[index];
      if (customer.Name == '1 Antonia Maria da Silva Barboza') {

      }
      try {
        customer.phone = customer.Phones[0].DDD + customer.Phones[0].Number;
        var operadora = customer.Phones[0].IdOperator == 1 ? 'Claro' : 'Vivo'
        customer.phoneDetail = operadora + ' - ' + customer.Phones[0].PlanDescription;
      }
      catch (erro) { }

      if (customer.Charged) {
        customer.statusType = vm.statusType.CARREGANDO;
        customer.registerPayd = false;
        for (var i in customer.ChargingValidity) {
          var charge = customer.ChargingValidity[i];
          try {
            customer.ChargingValidity[i].BoletoExpires = new Date(customer.ChargingValidity[i].BoletoExpires).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
            customer.boletoExpires = customer.ChargingValidity[i].BoletoExpires;
          }
          catch (erro) { }

          if (charge.PaymentType == 1 && charge.StatusDescription != 'Refunded') {
            customer.ChargingValidity[i].StatusDescription = 'PAGO';
            customer.descricaoStatus = vm.statusType.PAGO;
            customer.descricaoTipo = vm.PagamentosType.CARTAO;
            customer.ammoutIntPaid = parseFloat(customer.ChargingValidity[i].Ammount / 100);
            customer.ammoutPaidFormat = customer.ammoutIntPaid.toString().replace('.', ',');
          }

          if (charge.PaymentType == 2 && charge.BoletoId != 0) {
            customer.descricaoTipo = vm.PagamentosType.BOLETO;
            PagarmeService.getStatusBoletoRecursivo(charge.BoletoId, customer, vm, index, i).then(function (result) {

              //result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].descricaoTipo = vm.PagamentosType.BOLETO;
              result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'INVÁLIDO'



              if (result[0].status == "waiting_payment") {
                result[0].vm.customers[result[0].indexCustomer].ammoutIntPaid = 0;
                result[0].vm.customers[result[0].indexCustomer].descricaoStatus = 'PENDENTE';
                result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'PENDENTE'
                if (!result[0].elemento.registerPayd) {
                  result[0].elemento.status = result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription;
                }

                if (!result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Expired) {
                  result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.COBRADO;
                } else {
                  result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.VENCIDO;
                }
              }
              else if (result[0].status == "paid") {
                result[0].vm.customers[result[0].indexCustomer].ammoutIntPaid = parseFloat(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount / 100);
                result[0].vm.customers[result[0].indexCustomer].descricaoStatus = vm.statusType.PAGO;
                result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'PAGO'
                try {

                }
                catch (erro) { }

                result[0].elemento.registerPayd = true;
                result[0].elemento.status = charge.StatusDescription;
                totalRecebidoBoleto += parseInt(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount, 10)
                result[0].vm.totalReceived += parseInt(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount, 10)
              }
              else {
                // ;
              }
              charge.StatusDescription = result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription;

              result[0].vm.callbackCount++;

              if (result[0].vm.callbackCount == result[0].vm.totalBoletoCharges) {
                result[0].vm.totalReceived = parseFloat(result[0].vm.totalReceived / 100).toString().replace('.', ',');
                vm.totalReceivedReady = true;
              }
            })
          }

          if (charge.PaymentType == 1 && charge.StatusDescription == 'Refunded') {
            customer.descricaoStatus = vm.statusType.REFUNDED;
            customer.ChargingValidity[i].StatusDescription = 'REFUNDED'
          }

          if (charge.BoletoId == 0 && charge.PaymentType == 2) {
            if (vm.customers[index].ChargingValidity[i].StatusDescription == 'CARREGANDO') {
              vm.customers[index].ChargingValidity[i].StatusDescription = 'INVÁLIDO';
              customer.descricaoStatus = 'INVÁLIDO';
            }

          }
        }

        vm.totalCharged += parseInt(customer.ChargingValidity[0].Ammount);

        if (customer.ChargingValidity[0].Payd == true) {
          vm.totalReceived += parseInt(customer.ChargingValidity[0].Ammount)
        }

        customer.ammout = parseFloat(parseInt(customer.ChargingValidity[0].Ammount) / 100);
        customer.ammoutFormat = customer.ammout.toString().replace('.', ',');
        customer.descricaoCharge = charge.Canceled ? vm.AtivoType.CANCELADA : vm.AtivoType.ATIVA;
        customer.descricaoAcao = charge.Canceled ? vm.AtivoType.CANCELADA : vm.AtivoType.ATIVA;
        customer.ammoutInt = parseFloat(customer.ammout);
        customer.ammoutIntFormat = customer.ammoutInt.toString().replace('.', ',');
      }
      else {
        customer.status = 'NÃO COBRADO';
        customer.descricaoStatus = vm.statusType.NAO_COBRADO;
        customer.ammoutInt = 0;
        customer.ammoutIntPaid = 0;
      }
    }
    vm.totalCharged = parseFloat(vm.totalCharged / 100).toString().replace('.', ',');

  }

  function loadPaymentHistory() {
    for (var index in vm.customers) {

      FoneclubeService.getChargeAndServiceOrderHistoryDinamic(vm.customers[index].Id, index).then(function (result) {

        if (result.length == 0) {
        }
        else {

          // TODO TEMPORARIO
          var dataCobranca;
          try {

            // dataCobranca = result[0].Charges.PaymentDate.substring(0,10).replace('-','/').replace('-','/');
            dataCobranca = result[0].Charges.CreationDate;
          }
          catch (erro) {

            // dataCobranca = result[0].CreatedDate.substring(0,10).replace('-','/').replace('-','/')
            dataCobranca = result[0].CreatedDate
          }

          var dataConvertida = new Date(dataCobranca).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
          var mes = dataConvertida.substring(5, 7);
          var ano = dataConvertida.substring(0, 4);

          var selecionado = new Date(vm.year.toString() + '/' + vm.month.toString()).toISOString().split('T')[0].replace('-', '/').replace('-', '/');
          var mesSelecionado = selecionado.substring(5, 7);
          var anoSelecionado = selecionado.substring(0, 4);

          if (mesSelecionado == mes && anoSelecionado == ano) {
            vm.customers[result.indexLista].dataIgual = true;
          }

          vm.customers[result.indexLista].chargingDate = dataConvertida;
          vm.customers[result.indexLista].chargingDateDiffDays = diffDays(dataConvertida);
          vm.customers[result.indexLista].LastPaidDateDiffDays = diffDays(vm.customers[result.indexLista].LastPaidDate);
        }
      });
    }
    for (var index in vm.customers) {
      if (vm.customers[index].chargingDate == undefined || vm.customers[index].chargingDate == null) {
        vm.customers[index].chargingDate = new Date('2000/01/01').toISOString().split('T')[0].replace('-', '/').replace('-', '/');
        vm.customers[index].chargingDateDiffDays = diffDays(vm.customers[index].chargingDate);
      }
    }

  }



  var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds            
  var secondDate = new Date();

  function diffDays(date) {
    var firstDate = new Date(date);
    return Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
  }




  vm.onDesativarBoleto = onDesativarBoleto;
  vm.onAtivarBoleto = onAtivarBoleto;

  function onDesativarBoleto(chargeId) {
    DialogFactory.dialogConfirm({ mensagem: 'Tem certeza que seja cancelar essa cobrança?' })
      .then(function (value) {
        if (value) {
          FoneclubeService.postChargingUpdate(chargeId, true)
            .then(function (value) {
              if (value) {
                charge.Canceled = true;
              }
            })
        }
      })
  }

  function onAtivarBoleto(chargeId) {
    DialogFactory.dialogConfirm({ mensagem: 'Tem certeza que seja ativar essa cobrança?' })
      .then(function (value) {
        if (value) {
          FoneclubeService.postChargingUpdate(chargeId, false)
            .then(function (value) {
              if (value) {
                charge.Canceled = false;
              }
            })
        }
      })
  }
};


statusChangingController2.$inject = ['$scope', '$interval', 'FoneclubeService', 'PagarmeService']; 

(function() {
'use strict';

    angular
        .module('foneClub')
        .directive('file', ['FileListUtil', function(FileListUtil) {
            return {
                restrict: 'AE',
                scope: {
                file: '@'
                },
                link: function(scope, el, attrs){

                    el.on('change', function(event){
                        var files = event.target.files;
                        var file = files[0];
                        if(file && typeof(file) !== undefined && file.size > 0){
                            scope.file = file;
                            scope.$parent.file = file;
                            FileListUtil.set(file);
                            event.currentTarget.value = "";
                        }
                        else {
                            scope.file = {};
                            scope.$parent.file = {};
                            FileListUtil.set(file);
                            event.currentTarget.value = "";
                        }
                        scope.$apply(); 
                    });


                }
            };
        }])


})();
(function () {
    'use strict';
  
    angular
      .module('foneClub')
      .component('foneHeader', {
        templateUrl: '../components/header-page/header-page.html',
        bindings: {
          title: "@"
          },
          controller: headerController,
          controllerAs: 'vm'
      });        
  
    headerController.$inject = ['$rootScope'];
  
    function headerController($rootScope) {
      var vm = this;      
      vm.clickMenuHamburguer = function() {
        $rootScope.$broadcast('menu-hamburguer');
      }
    }

  })();
  
(function () {

  'use strict';

  angular
    .module('foneClub')
    .service('MainComponents', MainComponents);

  MainComponents.$inject = ['$q', '$sce', '$ionicPopup', '$timeout', '$ionicLoading', '$cordovaNetwork', '$ionicBackdrop', '$ionicBody'];

  function MainComponents($q, $sce, $ionicPopup, $timeout, $ionicLoading, $cordovaNetwork, $ionicBackdrop, $ionicBody) {

    /* fields */
    var vm = this;
    vm.getVersion = getVersion;
    vm.alert = alert;
    vm.show = show;
    vm.showSimpleToast = showSimpleToast;
    vm.infoAlert = infoAlert;
    vm.showLoader = showLoader;
    vm.hideLoader = hideLoader;

    var releaseMode = true;
    var version = '1.3.0';

    setFavicon();

    function getVersion(){
      return version;
    }

    function setFavicon(){
      var link = document.querySelector("link[rel*='icon']") || document.createElement('link');
      link.type = 'image/x-icon';
      link.rel = 'shortcut icon';
      if(releaseMode){
        link.href = 'content/favicon/favicon-32x32.png'
      }
      else{
        link.href = 'content/favicon/homol/favicon-32x32.png'
      }

      document.getElementsByTagName('head')[0].appendChild(link);
    }

    function alert(params){

      if(!params.titulo)
        params.titulo = 'Aviso';

      closeAllPopups();

      var infoParams = {
        template: params.mensagem,
        title: params.titulo
      };

      return $ionicPopup.alert(infoParams).then(function (answer) {
        return answer;
      });

    }
      
    function show(params){
      closeAllPopups();
      return $ionicPopup.show(params);
    }

    function showLoader(mensagem){
      $ionicLoading.show({
                template: mensagem
      });
    }

    function hideLoader(){
      $ionicLoading.hide();
    }

    function infoAlert(params) {

      closeAllPopups();

      var infoParams = {
        template: params.mensagem,
        title: 'Info',
        cancelText: 'Cancelar'
      };

      return $ionicPopup.confirm(infoParams).then(function (answer) {
        return answer;
      });
    }

    function showLoading() {
      $ionicLoading.show({
        template: '<ion-spinner icon="bubbles" class="spinner-calm"></ion-spinner>'
      });
    }

    function hideLoading() {
      $ionicLoading.hide();
    }

    function isOnline() {
      if (window.cordova && window.cordova.plugins && navigator && navigator.connection && navigator.connection.type) {
          return (window.cordova && $cordovaNetwork.isOnline()) || (navigator.onLine);
      }else{
          return navigator.onLine;
      }
    }

    function showSimpleToast(toastMsg, title) {
      return $ionicPopup.alert({
        template: toastMsg,
        title: title
      });
    }

    function showConfirm(params) {

      var infoParams = {
        template: params.message || 'Mensagem',
        title: params.title || 'Título',
        cancelText: params.cancelText || 'Cancelar',
        okText: params.okText || 'Confirmar',
        okType: 'button-assertive'
      };

      return $ionicPopup.confirm(infoParams);
    }



    function _noConnectionMessage() {
      return showSimpleToast("Sem conexão com internet", "AVISO");
    }

    function closeAllPopups() {
        var noop = angular.noop;
        var elevated = false;
        var popupStack = $ionicPopup._popupStack;
        if (popupStack.length > 0) {
          popupStack.forEach(function(popup, index) {
            if (popup.isShown === true) {
              popup.remove();
              popupStack.pop();
            }
          });
        }

        $ionicBackdrop.release();
        //Remove popup-open & backdrop if this is last popup
        $timeout(function() {
          // wait to remove this due to a 300ms delay native
          // click which would trigging whatever was underneath this
          $ionicBody.removeClass('popup-open');
          // $ionicPopup._popupStack.pop();
        }, 400, false);
        ($ionicPopup._backButtonActionDone || noop)();
    }

  }
})();

