(function () {

  'use strict';

  angular.module('foneClub', [

    /* public modules */
    'ionic',
    'firebase',
    'ngCordova',
    'ngMask',
    'LocalStorageModule',
    'ui.bootstrap',
    'ngDialog'

  ]);

})();






(function () {

  'use strict';

  angular.module('foneClub')
    .config(masterConfiguration);

  function masterConfiguration($urlRouterProvider,$ionicConfigProvider,$provide, $stateProvider){

      configRouteProvider($ionicConfigProvider)

      $stateProvider.state('master', {
        url: '/',
        templateUrl: 'index.html',
        controller: 'MasterController as vm'
      })
      .state('login', {
        url: '/login',
        templateUrl: 'modules/login/login.html',
        controller: 'LoginController as vm'
      })
      .state('tabs', {
        url: "/tab",
        abstract: true,
        templateUrl: "modules/menu-tabs/menu-tabs.html",
        controller:"MenuController as vm"
      })
      .state('tabs.checkout-view', {
        url: "/checkout-view",
        views: {
          'menu-tab': {
            templateUrl: "modules/checkout/checkout.html",
            controller: 'CheckoutController as vm'
          }
        }
      })
      .state('tabs.home', {
        url: "/home",
        views: {
          'menu-tab': {
            templateUrl: "modules/home/home.html",
            controller: 'HomeController as vm'
          }
        }
      })
      .state('tabs.cadastro', {
        url: "/cadastro",
        views: {
          'menu-tab': {
            templateUrl: "modules/cadastro/cadastro.html",
            controller: 'CadastroController as vm'
          }
        }
      })
      .state('tabs.list-customer', {
        url: "/list-customer",
        views: {
          'menu-tab': {
            templateUrl: "modules/lista-customer/lista-customer.html",
            controller: 'CustomerListController as vm'
          }
        }
      })
      .state('tabs.customers', {
        url: "/customers",
        views: {
          'menu-tab': {
            templateUrl: "modules/customers/customers.html",
            controller: 'CustomersController as vm'
          }
        }
      })
      .state('tabs.edicao', {
        url: "/edicao", 
        views: {      
          'menu-tab': {
            templateUrl: "modules/customers/edicao/edicao.html",
            controller: 'EdicaoController as vm',
            params: {data: null}
          }
        }            
      })
      .state('ordemservico', {
        url: "/ordemservico",       
        templateUrl: "modules/customers/ordem-servico/ordemservico.html",
        controller: 'OrdemServico as vm',
        params: { data: null }      
      })

      $urlRouterProvider.otherwise('/');
      configErrorHandler($provide);
  }

  function configRouteProvider($ionicConfigProvider){
      $ionicConfigProvider.views.maxCache(0);
      $ionicConfigProvider.tabs.position('bottom');
      //$ionicConfigProvider.views.transition('android');
  }

  function configErrorHandler($provide){
    $provide.decorator("$exceptionHandler", function($delegate) {
        return function(exception, cause) {
          $delegate(exception, cause);
          //alert(exception.name + ' - ' + exception.message);
        };
      });
  }


})();

(function () {
  'use strict';

  angular.module('foneClub')
    .run(function($ionicPlatform) {
        $ionicPlatform.ready(function() {
            if(window.cordova && window.cordova.plugins && window.cordova.plugins.Keyboard) {
            // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
            // for form inputs)
            cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);

            // Don't remove this line unless you know what you are doing. It stops the viewport
            // from snapping when text inputs are focused. Ionic handles this internally for
            // a much nicer keyboard experience.
            cordova.plugins.Keyboard.disableScroll(true);
            }
            if(window.StatusBar) {
            StatusBar.styleDefault();
            }
        });
        })

})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CadastroController', CadastroController);

    CadastroController.inject = [
        '$scope',
        'PagarmeService',
        '$ionicPopup',
        'HubDevService',
        'FoneclubeService',
        '$ionicLoading',
        'FileListUtil',
        'MainUtils',
        '$q',
        '$cordovaCamera',
        '$cordovaFile',
        '$timeout',
        'MainComponents',
        '$ionicModal',
        '$interval',
        'FlowManagerService',
        'ViewModelUtilsService',
        '$ionicScrollDelegate',
        'UtilsService',
        'DialogFactory'
    ];

    function CadastroController(
        $scope,PagarmeService, 
         $ionicPopup, 
         HubDevService, 
         FoneclubeService,
         $ionicLoading, 
         FileListUtil,
         MainUtils, 
         $q, 
         $cordovaCamera, 
         $cordovaFile, 
         $timeout, 
         MainComponents, 
         $ionicModal,
         $interval,
         FlowManagerService, 
         ViewModelUtilsService,
         $ionicScrollDelegate,
         UtilsService,
         DialogFactory         
    ) {
            
        var vm = this;
        vm.viewName = 'Cadastro Foneclube';
        vm.requesting = false;        
        vm.cpf = '';
        vm.birthdate = '';
        vm.zipcode = '';
        vm.street = '';
        vm.complement = '';
        vm.street_number = '';
        vm.neighborhood = '';
        vm.city = '';
        vm.uf = '';
        vm.email = '';
        vm.personalNumber = '';
        vm.phoneNumbersView =[ ];
        onTapNewPhoneNumber();

        vm.onTapSearchDocument = onTapSearchDocument;
        vm.onTapSendDocument = onTapSendDocument;

        vm.validarCEP = validarCEP;
        vm.onTapSendAddress = onTapSendAddress;

        vm.onTapSendPersonalData = onTapSendPersonalData;

        vm.onTapPhotoSelfie = onTapPhotoSelfie;
        vm.onTapPhotoFront = onTapPhotoFront;
        vm.onTapPhotoVerse = onTapPhotoVerse;

        vm.onTapNewPhoneNumber = onTapNewPhoneNumber;
        vm.onTapRemoveNewNumber = onTapRemoveNewNumber;
        vm.setPlansList = setPlansList;
        vm.changePhoneNumber = changePhoneNumber;
        vm.getContactParentName = getContactParentName;
        vm.showAddNewPhone = showAddNewPhone;
        
        vm.enter = enter;
        vm.onTapCancel = onTapCancel;
           
        init();

        function init(){
            vm.hasCPF = false;
            etapaDocumento();
            vm.allOperatorOptions = MainUtils.operatorOptions();
            FoneclubeService.getPlans().then(function(result){
                console.log(result)
                vm.plans = result;
                vm.selectedPlansList = [];
            })
            .catch(function(error){
                console.log(error.statusText);
            });
           FoneclubeService.getOperators().then(function(result){
                vm.operators = result;
            })
            .catch(function(error){
                console.log(error.statusText);
            });
            $ionicModal.fromTemplateUrl('templates/modal.html', {
                scope: $scope
            }).then(function(modal) {
                vm.modal = modal;
            });
        }

        function onTapSearchDocument(){
            vm.requesting = true;
            var showLoader = DialogFactory.showLoader('Tentando preencher dados...');
            
            var cpf = UtilsService.clearDocumentNumber(vm.cpf);
            FoneclubeService.getCustomerByCPF(cpf).then(function(existentClient){
                if (existentClient.Id == 0) {
                    HubDevService.validaCPF(cpf).then(function(result){
                        if(result.status){
                           vm.name = result.nome;
                        }
                        etapaDocumentoFaseNome();
                        showLoader.close();
                    }, function(error){
                        etapaDocumentoFaseNome();
                        showLoader.close();
                    });
                } else {
                    showLoader.close();
                    DialogFactory.dialogConfirm({titulo:'Cliente já cadastrado', mensagem:'Deseja acrescentar novas linhas a este CPF?'})
                    .then(function(res){
                        if(res) {
                            FlowManagerService.changeEdicaoView(existentClient);
                        } else {
                            FlowManagerService.changeHomeView();
                        }
                    })                    
                }
            }, function (result) {
                FlowManagerService.changeHomeView();
            }).catch(function (error) {
                FlowManagerService.changeHomeView();
            });
        }

        function onTapSendDocument(){
            vm.requesting = true;
            var dia = vm.birthdate.split('/')[0];
            var mes = vm.birthdate.split('/')[1];
            var regexBirthday =/^([0-9]{2})\/([0-9]{2})\/([0-9]{4})$/;
            var dadosInvalidos = parseInt(dia) > 31 || parseInt(mes) > 12 || parseInt(mes) == 0 || parseInt(dia) == 0;
            if(!regexBirthday.test(vm.birthdate) || dadosInvalidos){
                DialogFactory.showMessageDialog({mensagem:'Data de nascimento Inválida'});                
                vm.requesting = false;
                return;
            }
            var personCheckout = {
                'DocumentNumber': UtilsService.clearDocumentNumber(vm.cpf),
                'Name': vm.name,
                'Born': vm.birthdate,
                'Email': vm.email
            };
            if(vm.personalNumber.length >= 14) {
                personCheckout['Phones'] = [
                    {
                        'DDD': getNumberJson(vm.personalNumber).DDD,
                        'Number': getNumberJson(vm.personalNumber).Number,
                        'IdOperator': vm.operator,
                        'IsFoneclube': null
                    }
                ];
            }
            FoneclubeService.postBasePerson(personCheckout).then(function(result){
                if(result) {
                    etapaEndereco();
                    DialogFactory.showMessageDialog({titulo:'Andamento', mensagem:'Documento enviado, agora preencha os dados de Endereço.'});
                }
            }).catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText);
                vm.requesting = false;
                DialogFactory.showMessageDialog({mensagem:error.statusText});                
            });
        }
            
        function getNumberJson(param) {
            var number = {
                DDD: clearPhoneNumber(param).substring(0, 2),
                Number: clearPhoneNumber(param).substring(2)
            }
            return number;
        }

        function validarCEP() {
            if (vm.zipcode.length < 9) return;
            
            var showLoader = DialogFactory.showLoader('Tentando preencher dados...');
            HubDevService.validaCEP(vm.zipcode.replace(/[-.]/g , '')).then(function(result){
                if (!result.erro) {
                    vm.street = result.logradouro;
                    vm.neighborhood = result.bairro;
                    vm.city = result.localidade;
                    vm.uf = result.uf;
                } else {
                    DialogFactory.showMessageDialog({mensagem: "CEP incorreto."});
                }
                showLoader.close();
            }, function(error){
                showLoader.close();
            });
        }

        function onTapSendAddress() {
            vm.requesting = true;
            var cpf = UtilsService.clearDocumentNumber(vm.cpf);

            var personCheckout = {
                'DocumentNumber': cpf,
                'Adresses': [
                    {
                        'Street': vm.street,
                        'Complement': vm.complement,
                        'StreetNumber': vm.street_number,
                        'Neighborhood': vm.neighborhood,
                        'City': vm.city,
                        'State': vm.uf,
                        'Cep': vm.zipcode
                    }
                ]
            };
            
            //Remove os atributos falsy
            if (personCheckout.Adresses[0].Complement == '' || !personCheckout.Adresses[0].Complement) {
                delete personCheckout.Adresses[0].Complement;
            }

            FoneclubeService.postUpdatePersonAdress(personCheckout).then(function(result){
                if(result) {
                    etapaDadosPessoais();
                    DialogFactory.showMessageDialog({titulo:'Andamento',mensagem:'Endereço enviado, agora preencha os dados pessoais.'});
                }
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
                DialogFactory.showMessageDialog({mensagem:error.statusText});
                vm.requesting = false;
            });

            console.log(personCheckout)
        }

        function onTapSendPersonalData(){
            vm.requesting = true;
            var cpf = UtilsService.clearDocumentNumber(vm.cpf);
            var personCheckout = {
                'DocumentNumber': cpf,
                'Images': [selfiePhotoName, frontPhotoName, versePhotoName]
            };
            
            //Remove os atributos falsy
            for(var i = personCheckout.Images.length - 1; i >= 0; i--) {
                if(personCheckout.Images[i] == "" || !personCheckout.Images[i]) {
                    personCheckout.Images.splice(i, 1);
                }
            } 
            if (personCheckout.Images.length == 0) {
                delete personCheckout.Images
            }

            /**var selfiePhotoName = '';
            var frontPhotoName = '';
            var versePhotoName = ''; */
            console.log(personCheckout);
            FoneclubeService.postUpdatePerson(personCheckout).then(function(result){
                console.log(result);
                if(result) {
                    etapaComplementar();
                    DialogFactory.showMessageDialog({titulo:'Andamento',mensagem:'Dados pessoais enviados, agora preencha os dados Foneclube.'});
                }
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                DialogFactory.showMessageDialog({mensagem:error.statusText});
                vm.requesting = false;
            });
        }

        function etapaDocumentoFaseNome(){
            vm.hasCPF = true;
            vm.requesting = false;            
        }

        function etapaDocumento(){
            limpaEtapas();
            resizeScroll();
            $ionicScrollDelegate.scrollTop(true);
            vm.etapaDocumento = true;
        }

        function etapaEndereco(){
            limpaEtapas();
            vm.etapaBuscarCEP = true;
            vm.etapaEndereco = true;
            resizeScroll();
            $ionicScrollDelegate.scrollTop(true);
            vm.requesting = false;
        }

        function etapaDadosPessoais(){
            limpaEtapas();
            vm.etapaDadosPessoais = true;
            resizeScroll();
            $ionicScrollDelegate.scrollTop(true);
            vm.requesting = false;
        }

        function etapaComplementar(){
            limpaEtapas();
            vm.etapaComplementar = true;
            resizeScroll();
            $ionicScrollDelegate.scrollTop(true);
            vm.requesting = false;
        }

        function limpaEtapas(){
            vm.etapaDocumento = false;
            vm.etapaEndereco = false;
            vm.etapaDadosPessoais = false;
            vm.etapaComplementar = false;
        }

        /////////////////////////
        /////FOTOS FASE
        //MOVER PRA CONSTATNS
        var PHOTO_SELFIE = 1;
        var PHOTO_FRONT = 2;
        var PHOTO_VERSE = 3;
        var interval;
        vm.currentPhoto;

        function onTapPhotoSelfie(){
            console.log('onTapPhotoSelfie');
            if(!vm.selfieSended)
                launchModal(PHOTO_SELFIE);
        }

        function onTapPhotoFront(){
            console.log('onTapPhotoFront');
            if(!vm.frontSended)
                launchModal(PHOTO_FRONT);
        }

        function onTapPhotoVerse(){
            console.log('onTapPhotoVerse');
            if(!vm.verseSended)
                launchModal(PHOTO_VERSE);
                //deseja trocar imagem?
        }

        function launchModal(photoType){
            console.log('launchModal ' + photoType);
            vm.currentPhoto = photoType;
            //limpa seleção de arquivo em variável local e em variável global
            vm.hasFileSelected = false;
            FileListUtil.set(undefined);
            vm.hasPhotoCaptured = false;
            vm.modal.show();
            validadeFile();

        }

        function validadeFile(){
            try{
                $interval.cancel(interval);
            }
            catch(error){ }
            interval = $interval(function() {
                //console.log('say hello');
                //console.log(FileListUtil.get())
                if(FileListUtil.get())
                {
                    vm.hasFileSelected = true;
                }
            }, 500);
        }

        vm.onTapPhotoGalley = onTapPhotoGalley;
        vm.onTapPhotoCamera = onTapPhotoCamera;
        function onTapPhotoGalley(){
            console.log('onTapPhotoGalley');
            //não precisu file upload abre direto do DOM
        }
        function onTapPhotoCamera(){
            console.log('onTapPhotoCamera');
            //startCameraPhoto(); não precisa file upload abre direto do DOM
        }

        ////PHOTO PROCCESS
        /////////////////////////////////////
        /////////////////////////////////////

        ///GALERIA
        var personCheckout = {};
        personCheckout.Images = [];
        var selfiePhotoName = '';
        var frontPhotoName = '';
        var versePhotoName = '';
        var listaImagens = [];
        var cameraPhotoName;
        vm.fotos = [];
        vm.images = []
        vm.onTapSendImage = onTapSendImage;
        function uploadIdentidadeGaleria(){
            console.log('uploadIdentidadeGaleria')
            var file = FileListUtil.get();
            if(!file)
             return;
            uploadFile(file).then(function(result){
                console.log('result')
                console.log(result.filename);
                setImageReleaseView(result);
                //https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/lsUbxLxh-IMG_20170420_162617843.jpg
            });

        }

        function setImageReleaseView(result){
            switch(vm.currentPhoto) {
                    case PHOTO_SELFIE:
                        console.log('PHOTO_SELFIE');
                        vm.selfieSended = true;
                        vm.showSelfiePhoto = true;
                        selfiePhotoName = result.filename;
                        vm.selfiePhotoURL = 'https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/' + selfiePhotoName;
                        vm.modal.hide();
                        //code
                        break;

                    case PHOTO_FRONT:
                        console.log('PHOTO_FRONT');
                        vm.frontSended = true;
                        vm.showFrontPhoto = true;
                        frontPhotoName = result.filename;
                        vm.frontPhotoURL = 'https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/' + frontPhotoName;
                        vm.modal.hide();
                        //code
                        break;

                    case PHOTO_VERSE:
                        console.log('PHOTO_VERSE');
                        versePhotoName = result.filename;
                        vm.verseSended = true;
                        vm.showVersePhoto = true;
                        vm.versePhotoURL = 'https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/' + versePhotoName;
                        vm.modal.hide();
                        //code
                        break;
                }
        }

        function isInvalidName(str){
            return /\s/.test(str);
        }


        function uploadFile(file){
            console.log('-- uploadFile galeria')
            var q = $q.defer();
            console.log(file);

            if(isInvalidName(file.name)){
                vm.file = null;
                vm.msg = "Não foi possivel enviar sua imagem, por favor envie uma imagem sem espaço no nome do arquivo"
                q.reject();
                return q.promise;
            }
            var showLoader = DialogFactory.showLoader('Enviando...');
            var imageUploader = new ImageUploader();
            imageUploader.push(file)
            .then((data) => {
                console.debug('Upload complete. Data:', data);
                // MainComponents.alert({mensagem:'Imagem enviada com sucesso'});
                showLoader.close();
                 q.resolve(data);
            })
            .catch((err) => {
                console.error(err);
                DialogFactory.showMessageDialog({mensagem:'Não foi possível enviar imagens'});
                showLoader.close();
                q.reject(error);
            });
            return q.promise;
        }

        function onTapSendImage(){
            vm.msg = "";
            console.log('onTapSendImage ');
            if(vm.hasPhotoCaptured)
                startListUpload(vm.fotos);
            if(vm.hasFileSelected)
                uploadIdentidadeGaleria();
        }

        /////////////////////////////////////
        ///foto de camera
        //extrair
        function startCameraPhoto() {
            console.log('fotoIdentidadeCamera')
            // 2
            var options = {
                destinationType : Camera.DestinationType.FILE_URI,
                sourceType : Camera.PictureSourceType.CAMERA, // Camera.PictureSourceType.PHOTOLIBRARY
                allowEdit : false,
                encodingType: Camera.EncodingType.JPEG,
                popoverOptions: CameraPopoverOptions,
            };

            // 3
            $cordovaCamera.getPicture(options).then(function(imageData) {
                console.log('cordovaCamera.getPicture')
                console.log(imageData)
                // 4
                onImageSuccess(imageData);

                function onImageSuccess(fileURI) {
                    createFileEntry(fileURI);
                }
                function createFileEntry(fileURI) {
                    window.resolveLocalFileSystemURL(fileURI, copyFile, fail);
                }
                // 5
                function copyFile(fileEntry) {
                    var newName = MainUtils.guid() + '.jpg'; //todo fazer tratamento pra nome jpg /png
                    window.resolveLocalFileSystemURL(cordova.file.dataDirectory, function(fileSystem2) {
                        fileEntry.copyTo(
                            fileSystem2,
                            newName,
                            onCopySuccess,
                            fail
                        );
                    },
                    fail);
                }

                // 6
                function onCopySuccess(entry) {
                    console.log('onCopySuccess ' );
                    console.log(entry);
                    console.log(entry.nativeURL);
                    var listName = entry.nativeURL.split('/');
                    vm.fotos.push(entry.nativeURL);
                    listaImagens.push(listName[listName.length - 1]);
                    $scope.$apply(function () {
                        vm.images.push(entry.nativeURL);
                    });
                    vm.hasPhotoCaptured = true;
                    //startListUpload(vm.fotos);
                }

                function fail(error) {
                    console.log("fail: " + error.code);
                }

                function makeid() {
                    var text = "";
                    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                    for (var i=0; i < 5; i++) {
                        text += possible.charAt(Math.floor(Math.random() * possible.length));
                    }
                    return text;
                }

            }, function(err) {
                console.log(err);
            });
        }

        function startListUpload(photos){
            var showLoader = DialogFactory.showLoader('Enviando...');
            if(photos.length > 0) {
                var lastItemIndex = photos[photos.length - 1];
                uploadImagePath(lastItemIndex).then(function(result){
                    if(result)
                        continueListUpload(vm.fotos);
                });
            } else {
                showLoader.close();
                //MainComponents.alert({mensagem:'Imagem enviada com sucesso'});
                console.log(listaImagens)
                //conclusão de foto auqi
                setImageReleaseView(cameraPhotoName)
            }
        }

        function continueListUpload(photos){
            photos.pop();
            startListUpload(vm.fotos);
        }

        function uploadImagePath(path){
            var q = $q.defer();
            var guidName = MainUtils.guid();
            MainUtils.pathToDataURI(path, function(dataUri) {
                var blob = MainUtils.dataURIToBlob(dataUri);
                blob.name = guidName.concat('.jpg');
                MainUtils.uploadFile(blob).then(function(result){
                    console.log(' MainUtils.uploadFile(blob)')
                    console.log(result)
                    personCheckout.Images.push(blob.name);
                    setImageReleaseView(result);
                    q.resolve(true);
                }).catch(function(result){
                    q.resolve(false);
                });
            });
            return q.promise;
        }


        /////////////////////////////////////
        /////////////////////////////////////

        vm.onTapSendFoneclubeData = onTapSendFoneclubeData;
        function onTapSendFoneclubeData(){
            vm.requesting = true;
            var showLoader = DialogFactory.showLoader('Enviando dados...');
            var cpf = UtilsService.clearDocumentNumber(vm.cpf);
            var phones = [];
            var totalPriceValidade = 0;
            
            for (var number in vm.phoneNumbersView) {
                if(!vm.phoneNumbersView[number].Nickname || vm.phoneNumbersView[number].Nickname == '') {
                    DialogFactory.showMessageDialog({titulo:'Linha ' + (number + 1), mensagem:'Nickname é um campo obrigario'});
                    vm.requesting = false;
                    showLoader.close();
                    return;
                }
                if(vm.phoneNumbersView[number].IdPlanOption == '') {
                    DialogFactory.showMessageDialog({titulo:'Linha ' + (number + 1), mensagem:'A escolha do plano é obrigatória.'});
                    vm.requesting = false;
                    showLoader.close();
                    return;
                } else {
                    vm.plans.find(function (element, index, array) {
                        if (element.Id == vm.phoneNumbersView[number].IdPlanOption) {
                            totalPriceValidade = totalPriceValidade + element.Value / 100;
                        }
                    });
                }
            }
            if (vm.singlePrice) {
                var price = parseFloat(vm.singlePrice) / 100;
                if (price > totalPriceValidade) {
                    DialogFactory.showMessageDialog({mensagem:'Preço único não pode ser maior do que o preço de todos os planos somados.'});
                    vm.requesting = false;
                    showLoader.close();
                    return
                }
                
            }

            vm.phoneNumbersView.forEach(function (element, index, array) {
                phones.push({
                    'DDD': getNumberJson(element.NovoFormatoNumero).DDD,
                    'Number': getNumberJson(element.NovoFormatoNumero).Number,
                    'Portability': element.Portability,
                    'IsFoneclube': true,
                    'Nickname': element.Nickname,
                    'IdPlanOption': element.IdPlanOption
                });
            });

            var personCheckout = {
                'DocumentNumber': cpf,  
                'NameContactParent': vm.whoinvite,
                'IdParent': vm.IdParent, //se passar um que não existe api não guarda indicação, atualmente não retornamos erro, validar com cliente, cardozo
                'IdContactParent': vm.IdParent, //se passar um que não existe api não guarda indicação, atualmente não retornamos erro, validar com cliente, cardozo
                'Phones': phones,
                'SinglePrice': vm.singlePrice,
                'DescriptionSinglePrice': vm.descriptionSinglePrice
            };
            
            //Remove os atributos falsy
            /*for (var key in personCheckout) {
                if (!personCheckout[key]) {
                    delete personCheckout[key];
                }
                if (personCheckout[key] && personCheckout[key].constructor === Array) {
                    for (var i in personCheckout[key]) {
                        for (var x in personCheckout[key][i]) {
                            if (!personCheckout[key][i][x]) {
                                delete personCheckout[key][i][x];
                            }
                        }
                    }    
                }
            }*/
            
            var arrayFiltered = personCheckout.Phones.filter(function (number){
                return number.IsFoneclube == true && number.DDD.length == 2 && number.Number.length >= 8;
            });
            if (personCheckout.IdParent == 0) {
                delete personCheckout.IdParent;
            }
            if (arrayFiltered.length == 0) {
                FoneclubeService.postUpdatePerson(personCheckout)
                        .then(postUpdatePersonSucess)
                        .catch(postUpdatePersonError);
            } else {
                validadeNumbers(arrayFiltered).then(function(result) {
                    var right = true;
                    for (var item in result) {
                        if (result[item].DocumentNumber && result[item].DocumentNumber != UtilsService.clearDocumentNumber(vm.cpf)) {
                            DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem:'Você não pode cadastrar o mesmo telefone para dois clientes.'});
                            right = false;
                            vm.requesting = false;
                            showLoader.close();
                        }
                    }
                    for(var x in arrayFiltered) {
                        //nao deixa add o mesmo numero duas vezes para o mesmo cliente;
                        var twiceNumber = arrayFiltered.filter(function (element, index, array) {
                            return element.DDD == arrayFiltered[x].DDD && element.Number == arrayFiltered[x].Number;
                        });
                        if (twiceNumber.length > 1) {
                            DialogFactory.showMessageDialog({titulo:'Aviso', mensagem:'Você não pode cadastrar o mesmo telefone duas vezes para o cliente.'});
                            right = false;
                            vm.requesting = false;
                            showLoader.close();
                            break;
                        }
                    }
                    if (right) {
                        FoneclubeService.postUpdatePerson(personCheckout)
                            .then(postUpdatePersonSucess)
                            .catch(postUpdatePersonError);
                    }
                });
            }
            
            function postUpdatePersonSucess(result) {
                showLoader.close();
                if(result) {
                    FlowManagerService.changeHomeView();
                    var params = {
                        title: 'Cadastro Realizado',
                        template: 'Todos dados pessoais enviados, cadastro Foneclube feito com sucesso.',
                        buttons: [
                          {
                            text: 'Ir para Home',
                            type: 'button-positive',
                            onTap: function(e) {

                            }
                          },
                          {
                            text: 'Realizar Cobrança',
                            type: 'button-positive',
                            onTap: function(e) {
                                console.log('Realizar cobrança.');
                                FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function(result){
                                    if(vm.singlePrice) {
                                        result.CacheIn = vm.singlePrice;
                                        ViewModelUtilsService.showModalCustomer(result);
                                    } else {
                                        FoneclubeService.getCustomerPlans(UtilsService.clearDocumentNumber(vm.cpf)).then(function(customerPlans){
                                            var valueTotal = 0;
                                            if(customerPlans.length > 0) {
                                                for(var i=0; i<customerPlans.length;i++){
                                                    valueTotal = valueTotal + customerPlans[i].Value;
                                                }
                                            }
                                            result.CacheIn = valueTotal;
                                            ViewModelUtilsService.showModalCustomer(result);
                                        });
                                    }
                                });
                            }
                          }
                        ]
                    }
                    MainComponents.show(params);
                }
            }
            
            function postUpdatePersonError(error) {
                vm.requesting = false;
                showLoader.close();
                DialogFactory.showMessageDialog({mensagem:error.statusText});
            }
        }
        
        function validadeNumbers(numbers){
            var promises = numbers.map(function(number) {
                return FoneclubeService.getCustomerByPhoneNumber({
                    ddd: clearPhoneNumber(number.DDD),
                    numero: clearPhoneNumber(number.Number)
                });
            });
            return $q.all(promises);
        }
        
        function setPlansList(operadora) {
            vm.selectedPlansList = [];
            for (var item in vm.plans) {
                if (operadora == 1 && vm.plans[item].Description.endsWith('VIVO')) {
                    vm.selectedPlansList.push(vm.plans[item]);
                } else if (operadora == 2 && vm.plans[item].Description.endsWith('CLARO')){
                    vm.selectedPlansList.push(vm.plans[item]);
                }
            }
        }
            
        //adiciona telefone do array que é exibido na view
        function onTapNewPhoneNumber() {
            vm.phoneNumbersView.push(
                {
                    'Id': null,
                    'DDD': '',
                    'Number': '',
                    'IsFoneclube': true,
                    'IdOperator': 0,
                    'Portability': 'false',
                    'NickName': '',
                    'IdPlanOption': 0,
                    'Inative': false,
                    'Delete': false,
                    'NovoFormatoNumero': '',
                    'operadora': '1',
                    'key': Math.random()
                }
            );
        }
        //remove telefone do array que é exibido na view
        function onTapRemoveNewNumber(position){
            var confirmPopup = $ionicPopup.confirm( {
                title: 'Excluir Número',
                template: 'Deseja realmente remover este número?',
                buttons: [
                    {   text: 'Não' },
                    {   text: '<b>Sim</b>',
                        type: 'button-positive',
                        onTap: function(e) {
                            return true;
                        }
                    }
                ]
            });
            confirmPopup.then(function(res) {
                if(res) {
                    vm.phoneNumbersView.splice(position, 1);
                }
            });
        }

        //remove () - < > do numero de telefone
        function clearPhoneNumber(number) {
            return number ? number.replace('-', '').replace(' ', '').replace('(', '').replace(')', '') : '';
        }
        
        function changePhoneNumber(position) {
            if (vm.phoneNumbersView[position].NovoFormatoNumero.length < 14) {
                return
            }
            var param = {
                ddd: getNumberJson(vm.phoneNumbersView[position].NovoFormatoNumero).DDD,
                numero: getNumberJson(vm.phoneNumbersView[position].NovoFormatoNumero).Number
            }
                //nao deixa add o mesmo numero duas vezes para o mesmo cliente;
                var twiceNumber = vm.phoneNumbersView.filter(function (element, index, array) {
                    return element.NovoFormatoNumero == vm.phoneNumbersView[position].NovoFormatoNumero;
                });
                if (twiceNumber.length > 1) {
                    DialogFactory.showMessageDialog({titulo:'Aviso', mensagem:'Você não pode cadastrar o mesmo telefone duas vezes para o mesmo cliente.'});
                    return;
                }
            FoneclubeService.getCustomerByPhoneNumber(param).then(function(res) {
                if (res.DocumentNumber && res.DocumentNumber != UtilsService.clearDocumentNumber(vm.cpf)) {
                    DialogFactory.showMessageDialog({titulo:'Aviso', mensagem:'Este telefone já pertence a um cliente.'});
                }
            });
        }
        
        function getContactParentName() {
            if (vm.phoneContactParent.length < 13) { 
                vm.IdParent = "";
                return 
            }
            var param = {
                ddd: clearPhoneNumber(vm.phoneContactParent).substring(0, 2),
                numero: clearPhoneNumber(vm.phoneContactParent).substring(2)
            }
            FoneclubeService.getCustomerByPhoneNumber(param).then(function(result) {
                vm.IdParent = result.Id;
                vm.whoinvite = result.Name;
            })
        }

        function onTapCancel(){
            vm.modal.hide();
        }
        
        function enter() {
            if (vm.etapaEndereco) {
                etapaDadosPessoais();
            } else if (vm.etapaDadosPessoais) {
                etapaComplementar();
            } else if (vm.etapaComplementar) {
                var params = {
                    title: 'Pular Fase',
                    template: 'Deseja realmente pular esta fase?',
                    buttons: [
                      {
                        text: 'Não',
                        type: 'button-positive',
                        onTap: function(e) {

                        }
                      },
                      {
                        text: 'Sim',
                        type: 'button-positive',
                        onTap: function(e) {
                            FlowManagerService.changeHomeView();
                            var params = {
                                title: 'Cadastro Realizado',
                                template: 'Todos dados pessoais enviados, cadastro Foneclube feito com sucesso.',
                                buttons: [
                                  {
                                    text: 'Ir para Home',
                                    type: 'button-positive',
                                    onTap: function(e) {

                                    }
                                  },
                                  {
                                    text: 'Visualizar Cadastro',
                                    type: 'button-positive',
                                    onTap: function(e) {
                                        FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function(result){
                                            ViewModelUtilsService.showModalCustomer(result);
                                        });
                                    }
                                  }
                                ]
                            }
                            MainComponents.show(params);
                        }
                      }
                    ]
                }
                MainComponents.show(params);
            }
        }
        
        function showAddNewPhone() {
            function filterPhones(number){
                return number.IsFoneclube == true;
            }
            return personCheckout.Phones.filter(filterPhones);
        }
            
        function resizeScroll() {
            $ionicScrollDelegate.resize();
        }
               
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CheckoutController', CheckoutController);

    CheckoutController.inject = ['$scope','PagarmeService', '$ionicPopup', 'HubDevService', 'FoneclubeService', '$ionicLoading', 'FileListUtil', 'MainUtils', '$q', '$cordovaCamera', '$cordovaFile', '$timeout', 'MainComponents'];
    function CheckoutController($scope,PagarmeService, $ionicPopup, HubDevService, FoneclubeService, $ionicLoading, FileListUtil, MainUtils, $q, $cordovaCamera, $cordovaFile, $timeout, MainComponents) {
        var vm = this;
        var personCheckout = {};
        personCheckout.Images = [];
        vm.images = [];
        vm.fotos = [];
        var listaImagens = [];
        console.log('=== CheckoutController Controller ===');

        vm.onTapPagar = onTapPagar;
        vm.statusTransaction = ''
        vm.validarCEP = validaCEP;
        vm.validarCPF = validaCPF;
        vm.fotoIdentidadeCamera = fotoIdentidadeCamera;
        vm.uploadIdentidadeGaleria = uploadIdentidadeGaleria;
        vm.uploadIdentidadeCamera = uploadIdentidadeCamera;
        vm.OperatorsSelecteds = [];
        vm.addCheckout = addCheckout;
        vm.onRegisterTap = onRegisterTap;
        vm.ionicAlert = ionicAlert;

        init();

        function init(){

            faseCadastro();

            FoneclubeService.getPlans().then(function(result){
                vm.plans = result;
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
            });
           FoneclubeService.getOperators().then(function(result){
                vm.operators = result;
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
                MainComponents.alert({mensagem:error.statusText})
            });
        }

        function onRegisterTap(){

                //limpando, assim chega na api

                //todo fix temp
                try{
                    var cellNumber = vm.UserCellphone.replace('-', '').replace(' ', '');
                }
                catch(e){
                    MainComponents.alert({mensagem:'Informações pendentes'});
                }

                var personCheckout = {
                    'DocumentNumber': vm.register,
                    'Name': vm.name,
                    'Nickname':vm.Nickname,
                    'Email': vm.email,
                    'Born': vm.birthdate,
                    'Gender': 1,
                    'IdPagarme': 100,
                    'IdPlanOption': 4,
                    'IdContactParent': 999999999, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou
                    'Adresses': [
                    {
                    'Street': vm.street,
                    'Complement': vm.complement,
                    'StreetNumber': vm.street_number,
                    'Neighborhood': vm.neighborhood,
                    'City': vm.city,
                    'State': vm.uf,
                    'Cep': vm.zipcode
                    }
                ],
                "Images": listaImagens,
                'Phones': [
                    {
                    // 'Id': 1,
                    'DDD': vm.UserDDD,
                    'Number': cellNumber
                    }
                ]
                };

                console.log(personCheckout)
            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
                MainComponents.alert({mensagem:'Cadastro realizado'});

                if(result)
                    fasePagamento();
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
                MainComponents.alert({mensagem:error.statusText});
            });

        }

        /*
        function onRegisterTap(){

                personCheckout.DocumentNumber = vm.register;
                personCheckout.Name = vm.name;
                personCheckout.Email = vm.email;
                personCheckout.Born = vm.birthdate;
                personCheckout.Gender = 1; // todo
                personCheckout.IdPagarme = vm.register; //vai ser limado
                personCheckout.IdPlanOption = parseInt(vm.plan);
                personCheckout.IdContactParent = 21999999999; //vm.contactParent, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou

                personCheckout.Adresses = [
                    {
                        'Street': vm.street,
                        'Complement': vm.complement,
                        'StreetNumber': vm.street_number,
                        'Neighborhood': vm.neighborhood,
                        'City': vm.city,
                        'State': vm.uf,
                        'Cep': vm.zipcode
                    }
                ];

                personCheckout.Phones = [
                    {
                    'DDD': vm.ddd,
                    'Number': vm.number
                    }
                ];


                console.log(personCheckout)

                if(!personCheckout.DocumentNumber || !personCheckout.Name || !personCheckout.Email
                || !personCheckout.Born || !personCheckout.IdPlanOption || !personCheckout.IdContactParent
                || !personCheckout.Adresses[0].Street || !personCheckout.Adresses[0].StreetNumber
                || !personCheckout.Adresses[0].City || !personCheckout.Adresses[0].Cep || !personCheckout.Adresses[0].State
                || !personCheckout.Phones[0].DDD || !personCheckout.Phones[0].Number)
                {
                    //trocar forma de aviso
                    vm.statusTransaction = "Existe pendência de campo a ser preenchido";
                    return;
                }

            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
                vm.statusTransaction = result;
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
                vm.statusTransaction = error.statusText;
            });

        }
        */

        function uploadIdentidadeGaleria(){
            console.log('uploadIdentidadeGaleria')
            var file = FileListUtil.get();

            if(!file)
             return;

            uploadFile(file).then(function(result){
                personCheckout.Images.push(result.filename);
                listaImagens.push(result.filename);
            });

        }

        function uploadIdentidadeCamera(param){
            if(vm.fotos.length > 0)
            {
                startListUpload(vm.fotos);
            }
            else
            {
                alert('não tem foto tirada')
            }
        }


        function addCheckout(){

        console.log('addCheckout');

        //esse ´o objeto checkout que vamos montar a partir do form
        //se o document number for repetido não funciona ( ver catch )
           var personCheckout = {
                    'DocumentNumber': vm.register,
                    'Name': vm.name,
                    'Email': vm.email,
                    'Born': vm.birthdate,
                    'Gender': 1, //??
                    'IdPagarme': 100, //??
                    'IdPlanOption': vm.plan,
                    'IdContactParent': 999999999, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou
                    'Adresses': [
                    {
                    'Street': vm.street,
                    'Complement': vm.complement,
                    'StreetNumber': vm.street_number,
                    'Neighborhood': vm.neighborhood,
                    'City': vm.city,
                    'State': vm.uf,
                    'Cep': vm.zipcode
                    }
                ],
                // "Images": [
                //    vm.HoldingRg.url, //aqui vão os guids
                //    vm.rg.url
                // ],
                'Phones': [
                    {
                    'DDD': vm.ddd,
                    'Number': vm.number
                    }
                ]
                };

                debugger;
            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
            });
        }



        function validaCEP(cepInput){
            var cep = cepInput.replace(/[-.]/g , '');
            if(cep.length < 8)
                return;
            MainComponents.showLoader('Tentando preencher dados...');

            HubDevService.validaCEP(cep)
            .then(function(result){
             vm.street = result.info.logradouro;
             vm.neighborhood = result.info.bairro;
             vm.city = result.info.cidade;
             vm.uf = result.info.uf;
             MainComponents.hideLoader();
             console.log(result);

            },
            function(error){
            MainComponents.hideLoader()
            });
        }

         function validaCPF(cpfInput, birthdate){

                console.log(cpfInput.length)
                if(cpfInput.length <= 6)
                    return;


                var patternValidaData =/^([0-9]{2})\/([0-9]{2})\/([0-9]{4})$/;
                if(!patternValidaData.test(birthdate)){
                    MainComponents.alert({mensagem:'Data Inválida'});
                    return;
                }



                MainComponents.showLoader('Tentando preencher dados...');

                var cpf = cpfInput.replace(/[-.,]/g , '');
                HubDevService.validaCPF(cpf,birthdate)
                .then(function(result){
                   if(result.status){
                       vm.name = result.result.nome_da_pf;
                   }
                     MainComponents.hideLoader()
                },
            function(error){
            MainComponents.hideLoader()
            });
        }

        function onTapPagar(){


            console.log(' --- onTapPagar ');
            vm.statusTransaction = 'Iniciando transação';



            try
            {

                var expirationMonth = vm.cardExpirationMonth;

                if(vm.cardExpirationMonth < 10)
                {
                    expirationMonth = '0' + vm.cardExpirationMonth;
                }

                var cardData = {
                    cardHolderName: vm.cardHolderName.toUpperCase(),
                    cardExpirationMonth: expirationMonth,
                    cardExpirationYear: vm.cardExpirationYear,
                    cardNumber: vm.cardNumber,
                    cardCVV:vm.cardCVV
                }
            }
            catch(erro){

                MainComponents.alert({mensagem:'Existe campo vazio'});
                return;
            }

            try
            {
                var customer = {
                    'name' : vm.name,
                    'document_number' : vm.register.toString(),
                    'email' : vm.email,
                    'birthdate' : vm.birthdate,
                    'nickname': vm.Nickname,
                    'user_cellphone': vm.UserCellphone,
                    'plan': vm.plan,
                    'actual_mobile_operators': {
                        'vivo': vm.Vivo,
                        'tim': vm.Tim,
                        'nextel': vm.Nextel,
                        'claro': vm.Claro,
                        'oi': vm.Oi,
                        'other': vm.Other
                    },
                    'front_and_back': vm.Yes == undefined ? false : vm.Yes
                    ,
                    'sugestions': vm.sugestions,
                    'foneClub_new_operators': {
                        'vivo': vm.VivoActual,
                        'claro': vm.ClaroActual
                    },
                    'invite' : {
                        'name': vm.whoinvite,
                        'number': vm.contactParent
                    },
                    'address' : {
                        'street' : vm.street,
                        'street_number' : vm.street_number,
                        'neighborhood' : vm.neighborhood,
                        'zipcode' : vm.zipcode,
                        'city': vm.city,
                        'uf': vm.uf

                    },
                    'phone' : {
                        'ddd' : vm.ddd.toString(),
                        'number' : vm.number.toString()
                    }

                }

                console.log(customer);

                var patternValidaData =/^([0-9]{2})\/([0-9]{2})\/([0-9]{4})$/;
                if(!patternValidaData.test(customer.birthdate)){
                    MainComponents.alert({mensagem:'Data Inválida'});
                    return;
                }

                var cpf = customer.document_number.replace(/[-.,]/g , '');
                HubDevService.validaCPF(cpf,customer.birthdate)
                .then(function(result){
                    console.log(result);
                    if(result.status){
                        var validaCamposReturn = {
                            success: true,
                            msg: 'Cpf válido'
                        }
                    }else{
                       MainComponents.alert({mensagem:'CPF Inválido'});
                       return;
                    }
                });


            }
            catch(erro){
                console.log(erro)
                MainComponents.alert({mensagem:'Existe campo vazio'});

                return;
            }

            PagarmeService.generateCardHash(cardData).then(function(cardHash){

                vm.statusTransaction = 'Criptografando dados cartão';

                PagarmeService.postTransactionCard(vm.amount, cardHash, customer)
                .then(function(result){


                    vm.statusTransaction = 'Transação em andamento';


                    PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){

                        vm.statusTransaction = 'Transação concluída';
                    })
                    .catch(function(error){
                        try{
                            MainComponents.alert({mensagem:'Erro na captura da transação' + error.status});
                        }
                        catch(erro){
                            MainComponents.alert({mensagem:'Erro na captura da transação'});
                        }
                        console.log(error);

                    });


                })
                .catch(function(error){
                    try{
                        MainComponents.alert({mensagem:'Erro na transação'});
                        console.log(error.data.errors)

                        error.data.errors.forEach(function(erro) {
                            MainComponents.alert({mensagem:'Erro na transação: ' + erro.message});
                        }, this);

                    }
                    catch(erro){
                        MainComponents.alert({mensagem:'Erro na transação'});
                    }

                    console.log(error);
                });


            })
            .catch(function(error){
                var erro;
                for(var i in error)
                {

                    erro = error[i];
                }
                MainComponents.alert({mensagem:'Erro na transação ' + erro});

            });

        }

         function uploadFile(file){
             console.log('-- uploadFile')
            var q = $q.defer();
            console.log(file)

            MainComponents.showLoader('Enviando...');

            var imageUploader = new ImageUploader();
            imageUploader.push(file)
            .then((data) => {
                console.debug('Upload complete. Data:', data);
                MainComponents.alert({mensagem:'Imagem enviada com sucesso'});
                MainComponents.hideLoader();
                 q.resolve(data);
            })
            .catch((err) => {
                console.error(err);
                MainComponents.alert({mensagem:'Não foi possível enviar imagens'});
                MainComponents.hideLoader();
                q.reject(error);
            });
            return q.promise;
        }

        function faseCadastro(){
            vm.faseCadastro = true;
            vm.fasePagamento = false;
        }

        function fasePagamento(){
            vm.faseCadastro = false;
            vm.fasePagamento = true;
        }

        function fotoIdentidadeCamera() {

            console.log('fotoIdentidadeCamera')
            // 2
            var options = {
                destinationType : Camera.DestinationType.FILE_URI,
                sourceType : Camera.PictureSourceType.CAMERA, // Camera.PictureSourceType.PHOTOLIBRARY
                allowEdit : false,
                encodingType: Camera.EncodingType.JPEG,
                popoverOptions: CameraPopoverOptions,
            };

            // 3
            $cordovaCamera.getPicture(options).then(function(imageData) {

                console.log('cordovaCamera.getPicture')
                console.log(imageData)
                // 4
                onImageSuccess(imageData);

                function onImageSuccess(fileURI) {
                    createFileEntry(fileURI);
                }

                function createFileEntry(fileURI) {
                    window.resolveLocalFileSystemURL(fileURI, copyFile, fail);
                }

                // 5
                function copyFile(fileEntry) {
                    var newName = MainUtils.guid() + '.jpg'; //todo fazer tratamento pra nome jpg /png

                    window.resolveLocalFileSystemURL(cordova.file.dataDirectory, function(fileSystem2) {
                        fileEntry.copyTo(
                            fileSystem2,
                            newName,
                            onCopySuccess,
                            fail
                        );
                    },
                    fail);
                }

                // 6
                function onCopySuccess(entry) {
                    console.log('onCopySuccess ' );
                    console.log(entry.nativeURL);
                    var listName = entry.nativeURL.split('/');

                    vm.fotos.push(entry.nativeURL);
                    listaImagens.push(listName[listName.length - 1]);

                    $scope.$apply(function () {
                        vm.images.push(entry.nativeURL);
                    });

                    startListUpload(vm.fotos);

                }

                function fail(error) {
                    console.log("fail: " + error.code);
                }

                function makeid() {
                    var text = "";
                    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

                    for (var i=0; i < 5; i++) {
                        text += possible.charAt(Math.floor(Math.random() * possible.length));
                    }
                    return text;
                }

            }, function(err) {
                console.log(err);
            });


        }

        function startListUpload(photos){

            MainComponents.showLoader('Enviando...');

            if(photos.length > 0)
            {
                var lastItemIndex = photos[photos.length - 1];
                uploadImagePath(lastItemIndex).then(function(result){
                    if(result)
                        continueListUpload(vm.fotos);

                });
            }
            else
            {
                MainComponents.hideLoader();
                MainComponents.alert({mensagem:'Imagem enviada com sucesso'});
            }
        }

        function continueListUpload(photos){
            photos.pop();
            startListUpload(vm.fotos);
        }

        function uploadImagePath(path){

            var q = $q.defer();

            var guidName = MainUtils.guid();

            MainUtils.pathToDataURI(path, function(dataUri) {

                var blob = MainUtils.dataURIToBlob(dataUri);
                blob.name = guidName.concat('.jpg');

                MainUtils.uploadFile(blob).then(function(result){
                    personCheckout.Images.push(blob.name);
                    q.resolve(true);
                }).catch(function(result){
                    q.resolve(false);
                });
            });

            return q.promise;
        }

        //remover daqui
        function ionicAlert(message){
            console.log('alerta')
            $scope.showAlert = function() {
                var alertPopup = $ionicPopup.alert({
                    title: 'Aviso',
                    template: message
                });
            };
        }


    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('HomeController', HomeController);

    HomeController.inject =
    [
        '$scope',
        '$cordovaCamera',
        '$cordovaFile',
        '$ionicLoading',
        'FileListUtil',
        'MainUtils',
        'FoneclubeService',
        '$q'
    ];

    function HomeController($scope, $cordovaCamera, $cordovaFile, $ionicLoading, FileListUtil, MainUtils, FoneclubeService, $q) {
        var vm = this;
        console.log('=== HomeController Controller ===');
        vm.images = [];
        vm.fotos = [];
        vm.addCheckout = addCheckout;
        vm.addPhoto = addPhoto;
        vm.urlForImage = urlForImage;
        vm.testeData = testeData;

        var imageUploader = new ImageUploader();
        vm.result = {};
        vm.uploadGaleria = uploadGaleria;

        function addCheckout(){

            console.log('addCheckout');

            //esse ´o objeto checkout que vamos montar a partir do form
            //se o document number for repetido não funciona ( ver catch )
           var personCheckout = {
                    'DocumentNumber': '12345678946',
                    'Name': 'Teste de pessoa',
                    'Email': 'teste@teste.com.br',
                    'Born': '08/11/1988',
                    'Gender': 1,
                    'IdPagarme': 100,
                    'IdPlanOption': 4,
                    'IdContactParent': 999999999, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou
                    'Adresses': [
                    {
                    'Street': 'sample string 1',
                    'Complement': 'sample string 2',
                    'StreetNumber': '100',
                    'Neighborhood': 'sample string 4',
                    'City': 'sample string 5',
                    'State': 'sample string 6',
                    'Cep': 'sample string 7'
                    }
                ],
                "Images": [
                    "sample string 1", //aqui vão os guids
                    "sample string 2"
                ],
                'Phones': [
                    {
                    'Id': 1,
                    'DDD': '21',
                    'Number': '22222222'
                    }
                ]
                };


            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
            });
        }

        //TODO MainUtils.guid()
        // colocar nome das imagens id de usuario mais guid
        // remover imagens caso de troca

        function urlForImage(imageName) {

            var name = imageName.substr(imageName.lastIndexOf('/') + 1);
            var trueOrigin = cordova.file.dataDirectory + name;

            console.log("get correct path for image " + imageName);
            console.log("origin " + trueOrigin);
            return trueOrigin;
        }

        function addPhoto() {

            console.log('addPhoto')
            // 2
            var options = {
                destinationType : Camera.DestinationType.FILE_URI,
                sourceType : Camera.PictureSourceType.CAMERA, // Camera.PictureSourceType.PHOTOLIBRARY
                allowEdit : false,
                encodingType: Camera.EncodingType.JPEG,
                popoverOptions: CameraPopoverOptions,
            };

            // 3
            $cordovaCamera.getPicture(options).then(function(imageData) {

                console.log('cordovaCamera.getPicture')
                console.log(imageData)
                // 4
                onImageSuccess(imageData);

                function onImageSuccess(fileURI) {
                    createFileEntry(fileURI);
                }

                function createFileEntry(fileURI) {
                    window.resolveLocalFileSystemURL(fileURI, copyFile, fail);
                }

                // 5
                function copyFile(fileEntry) {
                    var newName = MainUtils.guid() + '.jpg'; //todo fazer tratamento pra nome jpg /png

                    window.resolveLocalFileSystemURL(cordova.file.dataDirectory, function(fileSystem2) {
                        fileEntry.copyTo(
                            fileSystem2,
                            newName,
                            onCopySuccess,
                            fail
                        );
                    },
                    fail);
                }

                // 6
                function onCopySuccess(entry) {
                    console.log('onCopySuccess ' );
                    console.log(entry.nativeURL);
                    vm.fotos.push(entry.nativeURL);


                    $scope.$apply(function () {
                        vm.images.push(entry.nativeURL);
                    });
                }

                function fail(error) {
                    console.log("fail: " + error.code);
                }

                function makeid() {
                    var text = "";
                    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

                    for (var i=0; i < 5; i++) {
                        text += possible.charAt(Math.floor(Math.random() * possible.length));
                    }
                    return text;
                }

            }, function(err) {
                console.log(err);
            });


        }


        ////////////////////////////
        function uploadGaleria(param) {
            var file = FileListUtil.get();
            uploadFile(file);
        };

        function testeData(){
            if(vm.fotos.length > 0)
            {
                startListUpload(vm.fotos);
            }
            else
            {
                alert('não tem foto tirada')
            }
        }

        function startListUpload(photos){

            $ionicLoading.show({
                template: 'Uploading...'
            });

            if(photos.length > 0)
            {
                var lastItemIndex = photos[photos.length - 1];
                uploadImagePath(lastItemIndex).then(function(result){
                    if(result)
                        continueListUpload(vm.fotos);

                });
            }
            else
            {
                $ionicLoading.hide();
            }
        }

        function continueListUpload(photos){
            photos.pop();
            startListUpload(vm.fotos);
        }

        function uploadImagePath(path){

            var q = $q.defer();

            var guidName = MainUtils.guid();

            MainUtils.pathToDataURI(path, function(dataUri) {

                var blob = MainUtils.dataURIToBlob(dataUri);
                blob.name = guidName.concat('.jpg');

                MainUtils.uploadFile(blob).then(function(result){
                    q.resolve(true);
                }).catch(function(result){
                    q.resolve(false);
                });
            });

            return q.promise;
        }

        function uploadFile(file){

            console.log('upload file')
            console.log(file)

            $ionicLoading.show({
                template: 'Carregando...'
            });

            var imageUploader = new ImageUploader();
            imageUploader.push(file)
            .then((data) => {
                console.debug('Upload complete. Data:', data);
                $ionicLoading.hide();
                $scope.$digest();
            })
            .catch((err) => {
                console.error(err);
                $ionicLoading.hide();
            });
        }

        ////////////////////////////

    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CustomersController', CustomersController);

    CustomersController.inject = ['PagarmeService', '$ionicPopup', '$ionicModal', '$scope', 'ViewModelUtilsService', 'FoneclubeService', 'MainComponents', 'MainUtils'];
    function CustomersController(PagarmeService, $ionicPopup, $ionicModal, $scope, ViewModelUtilsService, FoneclubeService, MainComponents, MainUtils) {
        var vm = this;
        vm.onTapCustomer = onTapCustomer;
        vm.showLoader = true;        

        console.log('=== Customers Controller Controller ===');       
        FoneclubeService.getCustomers().then(function(result){
            vm.showLoader = false;
            vm.customers = result;
            console.log('getCustomers')
            console.log(result)
            //post realizado com sucesso
        })
        .catch(function(error){
            console.log('catch error');
            console.log(error);
            console.log(error.statusText); // mensagem de erro para tela, caso precise
        });

        function onTapCustomer(customer){
            console.log('customer')
            console.log(customer)
            ViewModelUtilsService.showModalCustomer(customer);
        }


    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CheckoutCustomerModalController', CheckoutCustomerModalController);

    CheckoutCustomerModalController.inject = ['ViewModelUtilsService', 'PagarmeService'];
    function CheckoutCustomerModalController(ViewModelUtilsService, PagarmeService) {
        var vm = this;
        var customer = ViewModelUtilsService.modalData;
        vm.onTapCard = onTapCard;
        vm.onTapPagar = onTapPagar;
                
        initCardList();
        etapaEscolhaCartao();

        function initCardList(){
            console.log(customer.id)
            PagarmeService.getCard(customer.id)
            .then(function(result){
                vm.cards = result;
                console.log(result)
            })
            .catch(function(error){
                console.log(error);
                vm.message = 'falha ao recuperar cartão';
            });

        }

        function onTapCard(card){

            vm.card = card;
            etapaQuantia();

        }

        function onTapPagar(){

            vm.message = 'Transação iniciada';
            var customer;

            if(!vm.customer.address || !vm.customer.phone || !vm.customer.email || !vm.customer.document_number || !vm.customer.name)
            {
                customer = {
                    'name' : vm.customer.name,
                    'document_number' : vm.customer.document_number,
                    'email' : vm.customer.email
                    ,
                    'address' : {
                        'street' : 'empty',
                        'street_number' : '10',
                        'neighborhood' : 'empty',
                        'zipcode' : '01452000'
                    },
                    'phone' : {
                        'ddd' : '00',
                        'number' : '000000000'
                    }
                }
                //vm.message = 'Usuário incompleto';
            }

            console.log('on tap pagar');
            console.log(vm.card.id);
            console.log(vm.customer);
            console.log(vm.amount);
            console.log(customer);

             PagarmeService.postTransactionExistentCard(vm.amount, vm.card.id, customer)
             .then(function(result){
                console.log('nova transac ' + result);
                vm.message = 'Transação efetuada';
                PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){

                        vm.message = 'Transação concluída';
                    })
                    .catch(function(error){
                        try{
                            vm.message = 'Erro na captura da transação' + error.status;
                        }
                        catch(erro){
                            vm.message = 'Erro na captura da transação'
                        }
                        console.log(error);

                    });
             })


            console.log(customer)


        }

        function etapaEscolhaCartao(){
            vm.etapaEscolhaCartao = true;
            vm.etapaQuantia = false;
        }

        function etapaQuantia(){
            vm.etapaEscolhaCartao = false;
            vm.etapaQuantia = true;
        }

    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CustomerListController', CustomerListController);

    CustomerListController.inject = ['PagarmeService', '$ionicPopup', '$ionicModal', '$scope', 'ViewModelUtilsService'];
    function CustomerListController(PagarmeService, $ionicPopup, $ionicModal, $scope, ViewModelUtilsService) {
        var vm = this;
        vm.onTapCustomer = onTapCustomer;
        vm.showLoader = true;
        
        console.log('=== CustomerListController Controller ===');    

        PagarmeService.getCustomers()
        .then(function(result){
            console.log(result);
            vm.customers = result;
            vm.showLoader = false;
        })
        .catch(function(error){
            console.log(error);
        });

        function onTapCustomer(customer){
            console.log('onTapCustomer')
            console.log(customer);
             ViewModelUtilsService.showModal(customer);
        }



        /**$ionicModal.fromTemplateUrl('templates/modal.html', {
    scope: $scope
  }).then(function(modal) {
    $scope.modal = modal;
  }); */

/*
        $ionicModal.fromTemplateUrl('modules/lista-customer/modal.html', {
            scope: $scope
        }).then(function(modal) {
            $scope.modal = modal;
        });*/







        /*

        //get cards ok
        PagarmeService.getCards()
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        //get customers ok
        PagarmeService.getCustomers()
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        //get card ok 145059
        PagarmeService.getCard(145059)
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        //post boleto
        PagarmeService.postBoleto(6000)
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        */




        /*
        var cardData = {
            cardHolderName:'Desenv C Teste',
            cardExpirationMonth:11,
            cardExpirationYear:17,
            cardNumber:'4716329201322757',
            cardCVV:'162'
        }

        PagarmeService.generateCardHash(cardData).then(function(cardHash){
            console.log(cardHash);
            /*
            PagarmeService.postTransactionCard(7000, cardHash)
            .then(function(result){
                console.log(result);
            })
            .catch(function(error){
                console.log(error);
        });


        })
        .catch(function(error){
            //mensagem erro ao inserir dados
            console.log(error);
        });
        */





/*
        PagarmeService.postTransactionCard(7000, cardHash)
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });
        */
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('LoginController', LoginController);

    LoginController.inject = ['FlowManagerService', '$scope', '$ionicPopup', 'FireBaseManagerUtil', 'MainUtils'];
    function LoginController(FlowManagerService, $scope, $ionicPopup, FireBaseManagerUtil, MainUtils) {
        var vm = this;
        vm.login = login;

        function validaLogin(){

            var users = FireBaseManagerUtil.getUsers();

            for(var i in users){
                var user = users[i];
                if(user.user == vm.user && user.password == vm.password)
                {
                    MainUtils.setAgent(user.user);
                    return true;
                }

            }

            return false;
        }

        function login(){

            if(validaLogin())
            {
                FlowManagerService.changeHomeView();
            }
            else
            {
                var alertPopup = $ionicPopup.alert({
                    title: 'Alerta',
                    template: 'Usuário ou senha incorretos'
                });
            }
        }

    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .service('FlowManagerService', FlowManagerService);

    FlowManagerService.inject = ['LocationService', 'FireBaseManagerUtil', '$window', 'localStorageService'];
    function FlowManagerService(LocationService, FireBaseManagerUtil, $window, localStorageService) {

        this.changeLoginView = changeLoginView;
        this.changeHomeView = changeHomeView;
        this.changeCheckoutView = changeCheckoutView;
        this.changeEdicaoView = changeEdicaoView;
        this.changeCustomersView = changeCustomersView;
        this.changeOrdemServicoView = changeOrdemServicoView;
        this.goBack = goBack;

        function changeLoginView(){
            LocationService.change('login');
        }

        function changeCheckoutView(){
            LocationService.change('tabs.checkout-view');
        }

        function changeHomeView(){
            localStorageService.set('menuItemActive', 'home');
            LocationService.change('tabs.home');
        }
        
        function changeEdicaoView(param) {
            LocationService.change('tabs.edicao', param);
        }
        
        function changeCustomersView(){
            LocationService.change('tabs.customers');
        }
        
        function changeOrdemServicoView(param){
            LocationService.change('ordemservico', param);
        }
        
        function goBack() {
            $window.history.back();
        }
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('MasterController', MasterController);

    MasterController.inject = ['FlowManagerService', 'MainUtils'];
    function MasterController(FlowManagerService, MainUtils) {
        var vm = this;
        console.log('--- Master controller --- ' + FlowManagerService);
        FlowManagerService.changeLoginView();

        ////////
        //MainUtils.setAgent('Cardozo');
        //FlowManagerService.changeHomeView();
        ////////

    }

})();
(function() {
    'use strict';
    angular.module('foneClub')
    .controller('MenuController', menuController);

    menuController.$inject = ['$scope', '$window', '$state', 'localStorageService'];

    function menuController($scope, $window, $state, localStorageService) {
        var vm = this;     
        vm.compress = false;                
        vm.menuItemActive = localStorageService.get('menuItemActive');        

        vm.menuCompress = function() {
            if ($window.innerWidth >= 767) {
                vm.compress = !vm.compress;                 
            }        
        }                      

        vm.setMenuItemActive = function(screen) {
            vm.menuItemActive = screen;
            localStorageService.set('menuItemActive', screen);
        }
        
        angular.element($window).bind('resize', function(){            
           if ($window.innerWidth <= 767 && vm.compress) {               
               vm.compress = false;
               $scope.$apply();
           }
       });     
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('BoletoModalController', BoletoModalController);

    BoletoModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainComponents', 'MainUtils', 'FoneclubeService'];
    function BoletoModalController(ViewModelUtilsService, PagarmeService, MainComponents, MainUtils, FoneclubeService) {

        var vm = this;
        var customer = ViewModelUtilsService.modalBoletoData;
        vm.customer = customer;
        var newCustomer;
        var BOLETO = 2;
        vm.etapaDados = true;
        vm.cobrancaRealizada = false;
        vm.amount = vm.customer.CacheIn ? vm.customer.CacheIn : '';
        vm.comment = '';
        console.log('BoletoModalController');
        vm.onTapPagar = onTapPagar;
        vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
        vm.onTapCancel = onTapCancel;
        vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;

        var existentCustomer = {
                    'name' : customer.Name,
                    'document_number' : customer.DocumentNumber,
                    'email' : customer.Email,
                    'address' : {
                        'street' : customer.Adresses[0].Street,
                        'street_number' : customer.Adresses[0].StreetNumber,
                        'neighborhood' : customer.Adresses[0].Neighborhood,
                        'zipcode' : customer.Adresses[0].Cep,
                        'city': customer.Adresses[0].City,
                        'uf': customer.Adresses[0].State

                    },
                    'phone' : getContactPhone(customer)

             }

        function onTapConfirmarPagamento() {
            vm.etapaDados = false;
            vm.etapaConfirmacao = true;
        }
        
        function onTapCancel(number){
            vm.etapaDados = true;
            vm.etapaConfirmacao = false;
            if (number == 1){
                vm.amount = 0;
                vm.comment = '';
                vm.cobrancaRealizada = false;   
            }
        }
        
        function onTapPagar(){

            console.log('tap pagar boleto')
            console.log(parseInt(vm.amount))
            if(parseInt(vm.amount) < 100)
            {
                MainComponents.showSimpleToast('Não é permitido cobranças a baixo de 1 Real', 'Aviso');
                return;
            }

            vm.disableTapPay = true;
            vm.message = 'Iniciando transação';
            vm.instructions = 'FoneClub - 2017'
            PagarmeService.postBoleto(vm.amount, vm.instructions, existentCustomer)
             .then(function(result){
                console.log(result);
                 PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(resultCapture){
                        try{

                            PagarmeService.notifyCustomerBoleto(resultCapture.id, existentCustomer.email).then(function(resultNotify){
                            vm.message = 'Boleto gerado com sucesso'
                            vm.cobrancaRealizada = true;
                            vm.disableTapPay = false;
                                })
                                .catch(function(error){
                                try{
                                    vm.message = 'Boleto gerado com sucesso. Sem envio de notificação'
                                    vm.cobrancaRealizada = true;
                                    vm.disableTapPay = false;
                                    //MainComponents.alert({mensagem:'Erro na notificação do boleto' + error.status});
                                }
                                catch(erro){
                                    vm.message = 'Boleto gerado com sucesso. Sem envio de notificação'
                                    vm.cobrancaRealizada = true;
                                    vm.disableTapPay = false;
                                    //MainComponents.alert({mensagem:'Erro na notificação do boleto'});
                                }
                                console.log(error);

                            });

                        }
                        catch(erro){

                        }


                    saveHistoryPayment(resultCapture.id, resultCapture.acquirer_id);

                        vm.message = 'Boleto gerado com sucesso'
                    })
                    .catch(function(error){
                        try{
                            MainComponents.alert({mensagem:'Erro na captura da transação' + error.status});
                        }
                        catch(erro){
                            MainComponents.alert({mensagem:'Erro na captura da transação'});
                        }
                        console.log(error);

                    });


             })

        }

        function saveHistoryPayment(idBoleto, acquirer_id){

            var customerCharging = {
                Id: vm.customer.Id,
                Charging:{
                    Comment:vm.comment,
                    Ammount: vm.amount,
                    CollectorName: MainUtils.getAgent(),
                    PaymentType: BOLETO,
                    BoletoId: idBoleto,
                    AcquireId: acquirer_id
                }
            }

            FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                console.log('FoneclubeService.postHistoryPayment');
                console.log(result);
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
            });


        }


        function getContactPhone(customer){
            for(var i in customer.Phones)
            {
                var phone = customer.Phones[i];
                if(!phone.IsFoneclube)
                {
                    return {
                        'ddd' : phone.DDD.toString(),
                        'number' : phone.Number.toString()
                    };
                }

            }

            if(!contactPhone)
            {
                for(var i in customer.Phones)
                {
                    var phone = customer.Phones[i];

                    return {
                        'ddd' : phone.DDD.toString(),
                        'number' : phone.Number.toString()
                    };

                }
            }
        }
        
        function onTapPaymentHistoryDetail(history) {
            ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
        }

    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CustomerModalController', CustomerModalController);

    CustomerModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'FoneclubeService', 'MainComponents', 'FlowManagerService'];
    function CustomerModalController(ViewModelUtilsService, PagarmeService, FoneclubeService, MainComponents, FlowManagerService) {
        var vm = this;
        vm.onTapNewCardPayment = onTapNewCardPayment;
        vm.onTapBoleto = onTapBoleto;
        vm.onTapCard = onTapCard;
        vm.onTapEditar = onTapEditar;
        vm.onTapExcluir = onTapExcluir;
        vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;
        vm.onTapOrdemServico = onTapOrdemServico;

        var customer = ViewModelUtilsService.modalCustomerData;
        vm.customer = customer;
        var CARTAO = 1;
        var BOLETO = 2;
        console.log('customer modal controller')
        console.log(customer);

        init();


        function init(){
            if(!customer.IdPagarme)
            {

                PagarmeService.getCustomer(customer.DocumentNumber)
                .then(function(result){
                    console.log('- get customer')
                    console.log(result)


                    try{
                        var pagarmeID = result[0].id;
                        updatePagarmeId(pagarmeID);
                        initCardList(pagarmeID);
                        etapaEscolhaCartao();
                    }
                    catch(erro){
                        console.log('cliente sem id pagarme ainda')
                    }
                    /*
                    var pagarmeID = result[0].id;
                    updatePagarmeId(pagarmeID);
                    initCardList(pagarmeID);
                    etapaEscolhaCartao();
                    */

                })
                .catch(function(error){
                    console.log(error);

                });


            }
            else
            {
                etapaEscolhaCartao();
                initCardList(customer.IdPagarme);
            }

            FoneclubeService.getHistoryPayment(customer.Id).then(function(result){
                console.log('FoneclubeService.getHistoryPayment');
                console.log(result);
                vm.histories = result;
                for(var i in vm.histories)
                {
                    var history = vm.histories[i];
                    history.descriptionType = (history.PaymentType == CARTAO) ? 'Cartão de crédito' : 'Boleto';

                    if(history.PaymentType == BOLETO)
                    {
                        setStatusBoleto(history);
                    }
                }
                customer.histories = vm.histories;
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
            });
        }

        function onTapExcluir(){
            //alert('Atenção essa ação irá excluir o cliente da base foneclube, após exclusão não terá volta.');
            var personCheckout = {
                    'DocumentNumber': customer.DocumentNumber
                };

            if (confirm('Atenção essa ação irá excluir o cliente da base foneclube, após exclusão não terá volta, deseja proseguir?')) {
                FoneclubeService.postDeletePerson(personCheckout).then(function(result){
                    console.log(result);
                    if(result){
                        alert('Usuário foi removido com sucesso, no próximo carregamento da lista ele não será mais exibido')
                        ViewModelUtilsService.modalCustomer.hide();
                    }                       
                    else
                        alert('Usuário não foi removido, guarde o documento dele: ' + customer.DocumentNumber)
                })
                .catch(function(error){
                    console.log('catch error');
                    console.log(error);
                });
            } else {
            // Do nothing!
            }

            //MainComponents.infoAlert({mensagem:'Atenção essa ação irá excluir o cliente da base foneclube, após exclusão não terá volta.'});
            //MainComponents.alert({titulo:'Andamento',mensagem:'Documento enviado, agora preencha os dados de Endereço.'});
        }

        function setStatusBoleto(history){
            console.log('setStatusBoleto')
            console.log(history)
            PagarmeService.getStatusBoleto(history.BoletoId).then(function(result){
               history.StatusPayment = result[0].status;
            })
        }

        function updatePagarmeId(pagarmeID){
            var personCheckout = {
                    'DocumentNumber': customer.DocumentNumber,
                    'IdPagarme': pagarmeID
                };

            FoneclubeService.postUpdatePerson(personCheckout).then(function(result){
                console.log(result);
                initCardList(pagarmeID);
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
            });
        }

        function onTapNewCardPayment(){
            console.log('onTapNewCardPayment');
            ViewModelUtilsService.showModalNewCardPayment(customer);
        }


        function initCardList(customerId){


            PagarmeService.getCard(customerId)
            .then(function(result){
                vm.cards = result;
                console.log('-- cards --')
                console.log(result)
            })
            .catch(function(error){
                console.log(error);
                vm.message = 'falha ao recuperar cartão';
            });


        }

        function onTapCard(card){

            //vm.card = card;
            //etapaQuantia();
            console.log('onTapCard')
            ViewModelUtilsService.showModalExistentCardPayment(customer, card);

        }

         function onTapBoleto(card){
            console.log('onTapBoleto')
            ViewModelUtilsService.showModalBoleto(customer);

        }

        function onTapPagar(){

            vm.message = 'Transação iniciada';
            var customer;

            if(!vm.customer.address || !vm.customer.phone || !vm.customer.email || !vm.customer.document_number || !vm.customer.name)
            {
                customer = {
                    'name' : vm.customer.name,
                    'document_number' : vm.customer.document_number,
                    'email' : vm.customer.email
                    ,
                    'address' : {
                        'street' : 'empty',
                        'street_number' : '10',
                        'neighborhood' : 'empty',
                        'zipcode' : '01452000'
                    },
                    'phone' : {
                        'ddd' : '00',
                        'number' : '000000000'
                    }
                }
                //vm.message = 'Usuário incompleto';
            }

            console.log('on tap pagar');
            console.log(vm.card.id);
            console.log(vm.customer);
            console.log(vm.amount);
            console.log(customer);

             PagarmeService.postTransactionExistentCard(vm.amount, vm.card.id, customer)
             .then(function(result){
                console.log('nova transac ' + result);
                vm.message = 'Transação efetuada';
                PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){

                        vm.message = 'Transação concluída';
                    })
                    .catch(function(error){
                        try{
                            vm.message = 'Erro na captura da transação' + error.status;
                        }
                        catch(erro){
                            vm.message = 'Erro na captura da transação'
                        }
                        console.log(error);

                    });
             })


            console.log(customer)


        }

        function etapaEscolhaCartao() {
            vm.etapaEscolhaCartao = true;
            vm.etapaQuantia = false;
        }

        function etapaQuantia() {
            vm.etapaEscolhaCartao = false;
            vm.etapaQuantia = true;
        }
        
        function onTapEditar() {
            FlowManagerService.changeEdicaoView(customer);
            ViewModelUtilsService.modalCustomer.hide();
        }
        

        function onTapPaymentHistoryDetail(history) {
            ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer)
        }

        function onTapOrdemServico() {
            FlowManagerService.changeOrdemServicoView(customer);
            ViewModelUtilsService.modalCustomer.hide();
        }

    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('EdicaoController', EdicaoController);

    EdicaoController.inject = ['$ionicPopup', '$ionicModal', '$scope', 'ViewModelUtilsService', 'FoneclubeService', 'MainComponents', 'MainUtils', '$stateParams', 'FlowManagerService', '$timeout', 'HubDevService', '$q', '$ionicScrollDelegate', 'UtilsService', 'DialogFactory'];
    function EdicaoController($ionicPopup, $ionicModal, $scope, ViewModelUtilsService, FoneclubeService, MainComponents, MainUtils, $stateParams, FlowManagerService, $timeout, HubDevService, $q, $ionicScrollDelegate, UtilsService, DialogFactory) {
        var vm = this;
        vm.onTapSendUser = onTapSendUser;
        vm.onTapRemoveNewNumber = onTapRemoveNewNumber;
        vm.onTapNewPhoneNumber = onTapNewPhoneNumber;
        vm.validarCEP = validarCEP;
        vm.validarCPF = validarCPF;
        vm.validatePhoneNumber = validatePhoneNumber;
        vm.getContactParentName = getContactParentName;
        vm.showAddNewPhone = showAddNewPhone;
        vm.goBack = goBack;
        
        vm.singlePriceLocal = 0;
        vm.allOperatorOptions = MainUtils.operatorOptions();
        vm.cpf = $stateParams.data ? $stateParams.data.DocumentNumber : '130.568.077-43'; //10667103767 //46637152226
        vm.requesting = true;
        
        init();
        function init(){
            if (!vm.cpf) {
                FlowManagerService.changeCustomersView();
                return;
            }
            var showDialog = DialogFactory.showLoader('Carregando dados...');
            FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function(result){
                vm.DocumentNumberFreeze = angular.copy(result.DocumentNumber);
                vm.customer = result;
                vm.customer.Born = vm.customer.Born ? getFormatedDate(vm.customer.Born) : ''; //formata data de nasicmento
                getPersonParent(vm.customer.IdContactParent); //ToDo falta ajustar a API para devolver o id do cliente parent;
                vm.singlePriceLocal = vm.customer.SinglePrice ? vm.customer.SinglePrice : 0; //single place formatado;
                if (vm.customer.Adresses) {
                    for(var i=0; i < vm.customer.Adresses.length;i++) {
                        vm.customer.Adresses[i].StreetNumber = parseInt(vm.customer.Adresses[i].StreetNumber); //deve ser int por causa da mascara
                    }    
                }
                FoneclubeService.getPlans().then(function(result){
                    vm.plans = result;
                    for(var number in vm.customer.Phones) {
                        vm.customer.Phones[number].key = Math.random();
                        vm.customer.Phones[number].IdOperator = vm.customer.Phones[number].IdOperator.toString(); //deve ser string por causa do ng-options
                        vm.customer.Phones[number].IdPlanOption = vm.customer.Phones[number].IdPlanOption.toString(); //deve ser string por causa do ng-options
                        if (vm.customer.Phones[number].Portability) {
                            vm.customer.Phones[number].Portability = 'true';
                        } else {
                            vm.customer.Phones[number].Portability = 'false';   
                        }
                        vm.customer.Phones[number].NovoFormatoNumero = getNumberString(vm.customer.Phones[number]); //popula o novo campo vm.<telefone>
                        for (var plan in vm.plans) {
                            if (vm.plans[plan].Id == vm.customer.Phones[number].IdPlanOption) {
                                if (vm.plans[plan].Description.endsWith('VIVO')) {
                                    vm.customer.Phones[number].operadora = '1'; //seta a operadora local
                                } else {
                                    vm.customer.Phones[number].operadora = '2'; //seta a operadora local
                                }
                            }
                        }
                    }
                    console.info(vm.customer);
                    showDialog.close();
                    $timeout(function () {
                        vm.requesting = false;
                    }, 2000)
                });
            });
        };
        
        function ajustaDados() {
            console.log(vm.customer); //log :D
        }
        
        function getPersonParent(id) {
            if (id) {
                FoneclubeService.getCustomerById(id).then(function (result) {
                    if (result.Phones.length > 0) {
                        vm.contactParent = result.Phones[0].DDD.concat(result.Phones[0].Number); 
                    }
                }).catch(function (error) {
                    console.log('error: ' + error);
                });
            }
        }

        function getFormatedDate(param) {
            var date = new Date(param);
            var day = date.getDate();
            var month = date.getMonth() + 1;
            var year = date.getFullYear();
            if (day < 10) {day = "0" + day;}
            if (month < 10) {month = "0" + month;}
            return day + '/' + month + '/' + year;
        }
        
        function onTapSendUser(customer){
            if (vm.requesting == true) return;
            vm.requesting = true;
            var showLoader = DialogFactory.showLoader('Enviando Dados...');
            
            var customerSend = {
                "Id": customer.Id,
                "DocumentNumber": UtilsService.clearDocumentNumber(customer.DocumentNumber),
                "Register": customer.Register,
                "Name": customer.Name,
                "NickName": customer.NickName,
                "Email": customer.Email,
                "Born": customer.Born,
                "Gender": customer.Gender,
                "IdPlanOption": customer.IdPlanOption,
                "IdPagarme": customer.IdPagarme,
                "IdRole": customer.IdRole,
                "Adresses": customer.Adresses,
                "Phones": customer.Phones,
                "Images": customer.Images,
                "IdParent": customer.IdParent,
                "IdContactParent": customer.IdContactParent,
                "NameContactParent": customer.NameContactParent,
                "IdCommissionLevel": customer.IdCommissionLevel,
                "SinglePrice": vm.singlePriceLocal,
                "DescriptionSinglePrice": customer.DescriptionSinglePrice
            }
            
            var totalPriceValidade = 0;
            for (var i in vm.customer.Phones) {
                vm.plans.find(function (element, index, array) {
                    if (element.Id == vm.customer.Phones[i].IdPlanOption) {
                        totalPriceValidade = totalPriceValidade + element.Value / 100;
                    }
                });
            }
            if (vm.singlePriceLocal) {
                if ((vm.singlePriceLocal / 100) > totalPriceValidade) {
                    DialogFactory.showMessageDialog({mensagem:'Preço único não pode ser maior do que o preço de todos os planos somados.'});
                    showLoader.close();
                    vm.requesting = false;
                    return;
                }
            }
            
            //Regra: o telefone não pode ser incompleto, mass pode estar em branco
            for (var item in customerSend.Phones) {
                if (customerSend.Phones[item].NovoFormatoNumero.length < 14 && customerSend.Phones[item].NovoFormatoNumero.length > 0) {
                    DialogFactory.showMessageDialog({titulo:'Aviso', mensagem:'O telefone: '.concat(customerSend.Phones[item].NovoFormatoNumero).concat(', não pode ficar incompleto, mas pode ficar em branco.')});
                    showLoader.close();
                    vm.requesting = false;
                    return;
                } else {
                    customerSend.Phones[item].DDD = getNumberJson(customerSend.Phones[item].NovoFormatoNumero).DDD;
                    customerSend.Phones[item].Number = getNumberJson(customerSend.Phones[item].NovoFormatoNumero).Number;
                }
            }
            
            var arrayFiltered = customerSend.Phones.filter(function (number) {
                return number.IsFoneclube == true && number.DDD.length == 2 && number.Number.length >= 8;
            });
            
            if (arrayFiltered.length == 0) {
                runPostUpdateCustomer(customerSend);
            } else {
                validadeNumbers(arrayFiltered).then(function(result) {
                    var right = true;
                    for (var item in result) {
                        if (result[item].DocumentNumber && result[item].DocumentNumber != UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)) {
                            DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Você não pode cadastrar o mesmo telefone para dois clientes.'});
                            right = false;
                            vm.requesting = false;
                            showLoader.close();
                        }
                    }
                    for(var x in arrayFiltered) {
                        //nao deixa add o mesmo numero duas vezes para o mesmo cliente;
                        var twiceNumber = arrayFiltered.filter(function (element, index, array) {
                            return element.DDD == arrayFiltered[x].DDD && element.Number == arrayFiltered[x].Number;
                        });
                        if (twiceNumber.length > 1) {
                            DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Você não pode cadastrar o mesmo telefone duas vezes para o cliente.'});
                            right = false;
                            vm.requesting = false;
                            showLoader.close();
                            break;
                        }
                    }
                    if (right) {
                        runPostUpdateCustomer(customerSend);
                    }
                });
            }
            
            function runPostUpdateCustomer(customerSend) {
                FoneclubeService.postUpdateCustomer(customerSend)
                    .then(postUpdateCustomerSucess)
                    .catch(postUpdateCustomerError);
            }
            
            function postUpdateCustomerSucess(result) {
                if(result) {
                    var params = {
                        title: 'Edição Realizada',
                        template: 'Todos dados pessoais enviados, edição Foneclube feita com sucesso.',
                        buttons: [
                            {
                                text: 'Ir para Home',
                                type: 'button-positive',
                                onTap: function(e) {
                                    FlowManagerService.changeHomeView();
                                }
                            },
                            {
                                text: 'Visualizar Cliente',
                                type: 'button-positive',
                                onTap: function(e) {
                                    FlowManagerService.changeCustomersView();
                                    FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function(result){
                                        ViewModelUtilsService.showModalCustomer(result);
                                    });
                                }
                            }
                        ]
                    }
                    MainComponents.show(params);
                }
                vm.requesting = false;
                showLoader.close();
            }
            
            function postUpdateCustomerError(error) {
                DialogFactory.showMessageDialog({mensagem:error.statusText});
                vm.requesting = false;
                showLoader.close();
            }
        };
        
        function setPlansList(operadora) {
            vm.selectedPlansList = [];
            for (var item in vm.plans) {
                if (operadora == 1 && vm.plans[item].Description.endsWith('VIVO')) {
                    vm.selectedPlansList.push(vm.plans[item]);
                } else if (operadora == 2 && vm.plans[item].Description.endsWith('CLARO')){
                    vm.selectedPlansList.push(vm.plans[item]);
                }
            }
        }
        
        function validarCEP(index) {
            if (vm.customer.Adresses[index].Cep.length < 9) return;
            var showLoader = DialogFactory.showLoader('Tentando preencher dados...');
            HubDevService.validaCEP(vm.customer.Adresses[index].Cep.replace(/[-.]/g , '')).then(function(result){
                if (!result.erro) {
                    vm.customer.Adresses[index].Street = result.logradouro;
                    vm.customer.Adresses[index].Neighborhood = result.bairro;
                    vm.customer.Adresses[index].City = result.localidade;
                    vm.customer.Adresses[index].State = result.uf;
                } else {
                    DialogFactory.showMessageDialog({mensagem:"CEP incorreto."});
                }
                showLoader.close();
            }, function(error){
                showLoader.close();
            });
        }
        
        function validarCPF () {
            if (vm.customer.DocumentNumber.length < 11) { return }
            FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)).then(function(existentClient){
                if (existentClient.Id == 0) {
                    HubDevService.validaCPF(UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)).then(function(result){
                        if(result.status){
                           vm.name = result.nome;
                        }
                    }, function(error){ });
                } else if (existentClient.DocumentNumber != vm.DocumentNumberFreeze) {                    
                    DialogFactory.showMessageConfirm({titulo: 'CPF já cadastrado', mensagem: 'Você não pode cadastrar um cpf repetido.'})
                    .then(function(param) {
                        var cpf = angular.copy(vm.DocumentNumberFreeze);
                        vm.customer.DocumentNumber = cpf.substr(0, 3) + '.' + cpf.substr(3, 3) + '.' + cpf.substr(6, 3) + '-' + cpf.substr(9)
                    })                   
                }
            }, function (result) {
                FlowManagerService.changeHomeView();
            }).catch(function (error) {
                FlowManagerService.changeHomeView();
            });
        }
        
        function getContactParentName() {
            if (vm.contactParent.length < 13) { 
                vm.customer.IdParent = "";
                return
            }
            var param = {
                ddd: clearPhoneNumber(vm.contactParent).substring(0, 2),
                numero: clearPhoneNumber(vm.contactParent).substring(2)
            }
            FoneclubeService.getCustomerByPhoneNumber(param).then(function(result) {
                vm.customer.IdParent = result.Id;
                vm.customer.NameContactParent = result.Name;
            })
        }
        
        function onTapNewPhoneNumber() {
            vm.customer.Phones.push(
                {
                    'Id': null,
                    'DDD': '',
                    'Number': '',
                    'IsFoneclube': true,
                    'IdOperator': 0,
                    'Portability': 'false',
                    'NickName': '',
                    'IdPlanOption': 0,
                    'Inative': false,
                    'Delete': false,
                    'NovoFormatoNumero': '',
                    'operadora': '1',
                    'key' : Math.random()
                }
            );
            resizeScroll();
        }
        
        function onTapRemoveNewNumber(position){
            DialogFactory.showMessageConfirm({titulo: 'Excluir Número', mensagem: 'Deseja realmente remover este número?'})
            .then(function(res){
                if(res) {
                    vm.customer.Phones[position].Delete = true;
                }
            })           
        }
        
        function validadeNumbers(numbers){
            var promises = numbers.map(function(number) {
                return FoneclubeService.getCustomerByPhoneNumber({
                    ddd: clearPhoneNumber(number.DDD),
                    numero: clearPhoneNumber(number.Number)
                });
            });
            return $q.all(promises);
        }
        
        function validatePhoneNumber(position) {
            if (vm.requesting || vm.customer.Phones[position].NovoFormatoNumero.length < 14) return;
            var number = {
                ddd: getNumberJson(vm.customer.Phones[position].NovoFormatoNumero).DDD,
                numero: getNumberJson(vm.customer.Phones[position].NovoFormatoNumero).Number
            }
            //nao deixa add o mesmo numero duas vezes para o mesmo cliente;
            var twiceNumber = vm.customer.Phones.filter(function (element, index, array) {
                return element.NovoFormatoNumero == vm.customer.Phones[position].NovoFormatoNumero;
            });
            if (twiceNumber.length > 1) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Você não pode cadastrar o mesmo telefone duas vezes para o cliente.'});
                return;
            }
            FoneclubeService.getCustomerByPhoneNumber(number).then(function(res) {
                if (res.DocumentNumber && res.DocumentNumber != UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)) {
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Este telefone já pertence a um cliente.'});
                }
            });
        }
        
        function getNumberJson(param) {
            var number = {
                DDD: clearPhoneNumber(param).substring(0, 2),
                Number: clearPhoneNumber(param).substring(2)
            }
            return number;
        }
        
        function getNumberString(param) {
            return param.DDD.concat(param.Number);
        }
        
        function clearPhoneNumber(number) {
            return number ? number.replace('-', '').replace(' ', '').replace('(', '').replace(')', '') : '';
        }
        
        function showAddNewPhone() {
            function filterPhones(number) {
                return number.IsFoneclube == true;
            }
            return vm.customer.Phones.filter(filterPhones);
        }
        
        function goBack() {
            FlowManagerService.goBack();
            FoneclubeService.getCustomerByCPF(vm.cpf).then(function(result){
                ViewModelUtilsService.showModalCustomer(result);
            });
        }
        
        function resizeScroll() {
            $ionicScrollDelegate.resize();
        }
                
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('ExistentCardPaymentModalController', ExistentCardPaymentModalController);

    ExistentCardPaymentModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainComponents', 'FoneclubeService', 'MainUtils'];
    function ExistentCardPaymentModalController(ViewModelUtilsService, PagarmeService, MainComponents, FoneclubeService, MainUtils) {

        var vm = this;
        vm.etapaDados = true;
        var customer = ViewModelUtilsService.modalExistentCardPaymentData;
        var card = ViewModelUtilsService.modalExistentCardData;
        vm.customer = customer;
        vm.card = card;
        console.log(vm.card)
        var newCustomer;
        var cardData;
        var CARTAO = 1;
        vm.amount = '';
        vm.comment = '';
        vm.cobrancaRealizada = false;
        console.log('ExistentCardPaymentModalController');
        vm.onTapPagar = onTapPagar;
        vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
        vm.onTapCancel = onTapCancel;
        vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;

        if (vm.customer.CacheIn) {
            vm.amount = vm.customer.CacheIn;
        }
        var existentCustomer = {
                    'name' : customer.Name,
                    'document_number' : customer.DocumentNumber,
                    'email' : customer.Email,
                    'address' : {
                        'street' : customer.Adresses[0].Street,
                        'street_number' : customer.Adresses[0].StreetNumber,
                        'neighborhood' : customer.Adresses[0].Neighborhood,
                        'zipcode' : customer.Adresses[0].Cep,
                        'city': customer.Adresses[0].City,
                        'uf': customer.Adresses[0].State

                    },
                    'phone' : getContactPhone(customer)

             }

        function onTapConfirmarPagamento() {
            vm.etapaDados = false;
            vm.etapaConfirmacao = true;
        }
        
        function onTapCancel(number){
            vm.etapaDados = true;
            vm.etapaConfirmacao = false;
            if (number == 1){
                vm.amount = 0;
                vm.comment = '';
                vm.cobrancaRealizada = false;   
            }
        }

        function onTapPagar(){
            console.log('tap pagar existente')
            console.log(parseInt(vm.amount))
            console.log(card.id)
            if(parseInt(vm.amount) < 100)
            {
                MainComponents.showSimpleToast('Não é permitido cobranças a baixo de 1 Real', 'Aviso');
                return;
            }

            vm.disableTapPay = true;
            vm.message = 'Iniciando transação';
            PagarmeService.postTransactionExistentCard(vm.amount, card.id, existentCustomer)
             .then(function(result){

                vm.message = 'Transação efetuada';
                PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){

                        vm.message = 'Transação concluída';
                        saveHistoryPayment();
                        vm.disableTapPay = false;
                        vm.cobrancaRealizada = true;                        
                    })
                    .catch(function(error){

                        vm.disableTapPay = false;
                        try{
                            vm.message = 'Erro na captura da transação' + error.status;
                        }
                        catch(erro){
                            vm.message = 'Erro na captura da transação'
                        }
                        console.log(error);

                    });
             })

        }

        function saveHistoryPayment(){

            console.log('saveHistoryPayment');
            console.log(MainUtils.getAgent());
            console.log(vm.comment);
            //vm.comment
            var customerCharging = {
                Id: vm.customer.Id,
                Charging:{
                    Comment:vm.comment,
                    Ammount: vm.amount,
                    CollectorName: MainUtils.getAgent(),
                    PaymentType: CARTAO
                }
            }

            FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                console.log('FoneclubeService.postHistoryPayment');
                console.log(result);
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
            });

        }

        function getContactPhone(customer){
            for(var i in customer.Phones)
            {
                var phone = customer.Phones[i];
                if(!phone.IsFoneclube)
                {
                    return {
                        'ddd' : phone.DDD.toString(),
                        'number' : phone.Number.toString()
                    };
                }

            }

            if(!contactPhone)
            {
                for(var i in customer.Phones)
                {
                    var phone = customer.Phones[i];

                    return {
                        'ddd' : phone.DDD.toString(),
                        'number' : phone.Number.toString()
                    };

                }
            }
        }
        
        function onTapPaymentHistoryDetail(history) {
            ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
        }

    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('NewCardPaymentModalController', NewCardPaymentModalController);

    NewCardPaymentModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainComponents', 'MainUtils', 'FoneclubeService'];
    function NewCardPaymentModalController(ViewModelUtilsService, PagarmeService, MainComponents, MainUtils, FoneclubeService) {

        var vm = this;
        var customer = ViewModelUtilsService.modalNewCardPaymentData;
        vm.customer = customer;
        var newCustomer;
        var cardData;
        var CARTAO = 1;
        
        vm.onTapPagar = onTapPagar;
        vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
        vm.onTapCancel = onTapCancel;
        vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;

        vm.etapaDados = true;

        function onTapConfirmarPagamento() {
            vm.etapaDados = false;
            vm.etapaConfirmacao = true;
        }
        
        function onTapCancel(number){
            vm.etapaDados = true;
            vm.etapaConfirmacao = false;
            if (number == 1){
                vm.amount = 0;
                vm.comment = '';
                vm.cobrancaRealizada = false;   
            }
        }
        
        vm.cardHolderName = '';
        vm.cardNumber = '';
        vm.cardExpirationMonth = '';
        vm.cardExpirationYear = '';
        vm.cardCVV = '';
        vm.amount = '';
        vm.statusTransaction = ''
        vm.comment = '';
        vm.cobrancaRealizada = false;
        if (vm.customer.CacheIn) {
            vm.amount = vm.customer.CacheIn;
        }

        console.log('NewCardPaymentModalController');

        newCustomer = {
                    'name' : customer.Name,
                    'document_number' : customer.DocumentNumber,
                    'email' : customer.Email,
                    'address' : {
                        'street' : customer.Adresses[0].Street,
                        'street_number' : customer.Adresses[0].StreetNumber,
                        'neighborhood' : customer.Adresses[0].Neighborhood,
                        'zipcode' : customer.Adresses[0].Cep,
                        'city': customer.Adresses[0].City,
                        'uf': customer.Adresses[0].State

                    },
                    'phone' : getContactPhone(customer)
        }


        if(!customer.IdPagarme)
        {
            console.log('não tem conta no pagarme >>>');
            //não tem conta no pagarme ainda
        }
        else
        {
            //tem conta no pagarme
            //customer.IdPagarme
        }

        function onTapPagar(){
            cardData = getCardData();

             console.log("-----------------------")
             console.log(newCustomer)
             console.log(cardData)
             console.log(vm.amount);

            if(parseInt(vm.amount) < 100)
            {
                MainComponents.showSimpleToast('Não é permitido cobranças a baixo de 1 Real', 'Aviso');
                return;
            }

            paymentNewCustomer();
        }

        function getContactPhone(customer){
            for(var i in customer.Phones)
            {
                var phone = customer.Phones[i];
                if(!phone.IsFoneclube)
                {
                    return {
                        'ddd' : phone.DDD.toString(),
                        'number' : phone.Number.toString()
                    };
                }

            }

            if(!contactPhone)
            {
                for(var i in customer.Phones)
                {
                    var phone = customer.Phones[i];

                    return {
                        'ddd' : phone.DDD.toString(),
                        'number' : phone.Number.toString()
                    };

                }
            }
        }

        function getCardData(){
            var expirationMonth = vm.cardExpirationMonth;

            return {
                cardHolderName: vm.cardHolderName.toUpperCase(),
                cardExpirationMonth: expirationMonth,
                cardExpirationYear: vm.cardExpirationYear,
                cardNumber: vm.cardNumber,
                cardCVV:vm.cardCVV
            }
        }

        function paymentNewCustomer(){

            vm.disableTapPay = true;

            PagarmeService.generateCardHash(cardData).then(function(cardHash){

                vm.statusTransaction = 'Criptografando dados cartão';

                PagarmeService.postTransactionCard(vm.amount, cardHash, newCustomer)
                .then(function(result){


                    vm.statusTransaction = 'Transação em andamento';


                    PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){

                        vm.statusTransaction = 'Transação concluída';
                        vm.disableTapPay = false;
                        vm.cobrancaRealizada = true;  
                        saveHistoryPayment();
                    })
                    .catch(function(error){
                        try{                            
                            MainComponents.showSimpleToast('Erro na captura da transação' + error.status, 'Aviso');

                        }
                        catch(erro){                            
                            MainComponents.showSimpleToast('Erro na captura da transação', 'Aviso');
                        }
                        console.log(error);

                    });


                })
                .catch(function(error){
                    try{
                        console.log(error.data.errors)
                        vm.etapaDados = true;
                        vm.disableTapPay = false;
                        vm.etapaConfirmacao = false;
                        error.data.errors.forEach(function(erro) {
                            MainComponents.showSimpleToast('Erro na transação: ' + erro.message, 'Aviso');
                        }, this);

                    }
                    catch(erro){
                        vm.etapaDados = true;
                        vm.disableTapPay = false;
                        vm.etapaConfirmacao = false;
                        MainComponents.showSimpleToast('Erro na transação', 'Aviso');
                    }

                    console.log(error);
                });


            })
            .catch(function(error){
                var erro;
                for(var i in error)
                {

                    erro = error[i];
                }
                vm.etapaDados = true;
                vm.disableTapPay = false;
                 vm.etapaConfirmacao = false;
                MainComponents.showSimpleToast('Erro na transação'+ erro, 'Aviso');

            });
        }

        function saveHistoryPayment(){

            try
            {
                console.log('saveHistoryPayment');
                console.log(MainUtils.getAgent());
                console.log(vm.comment);
                //vm.comment
                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:vm.comment,
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: CARTAO
                    }
                }


                FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                    console.log('FoneclubeService.postHistoryPayment');
                    console.log(result);
                })
                .catch(function(error){
                    console.log('catch error');
                    console.log(error);
                });

            }
            catch(erro){

            }


        }
        
        function onTapPaymentHistoryDetail(history) {
            ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
        }


    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('OrdemServico', OrdemServico);

    OrdemServico.inject = ['$ionicPopup', '$ionicModal', '$scope', 'ViewModelUtilsService', 'FoneclubeService', 'MainComponents', 'MainUtils', '$stateParams', 'FlowManagerService'];
    function OrdemServico($ionicPopup, $ionicModal, $scope, ViewModelUtilsService, FoneclubeService, MainComponents, MainUtils, $stateParams, FlowManagerService) {
        var vm = this;
        vm.cpf = $stateParams.data ? $stateParams.data.DocumentNumber : '';
        vm.requesting = true;
        vm.onTapSendOS = onTapSendOS;
        vm.goBack = goBack;
        
        init();
        function init() {
            if (!vm.cpf) {
                FlowManagerService.changeCustomersView();
                return;
            }
            vm.data = {
                warn: true,
                text: ''
            };
            FoneclubeService.getCustomerByCPF(vm.cpf).then(function(result){
                vm.customer = result;
                vm.requesting = false;
            });
        }
        
        function onTapSendOS() {
            MainUtils.setAgent('Cardozo');
            var order = {
                "Id": vm.customer.Id,
                "ServiceOrder": {
                    "AgentName": MainUtils.getAgent(),
                    "AgentId": 1,
                    "PendingInteraction": vm.data.warn,
                    "Description": vm.data.text
                }
            }
            FoneclubeService.postOrderServicePerson(order).then(function(data){
                vm.requesting = false;
                if(result) {
                    FlowManagerService.changeCustomersView();
                    var params = {
                        title: 'Aviso',
                        template: 'Ordem de serviço adicionada com sucesso.',
                        buttons: [
                            {
                                text: 'Fechar',
                                type: 'button-positive',
                                onTap: function(e) {
                                    FoneclubeService.getCustomerByCPF(vm.cpf).then(function(result){
                                        ViewModelUtilsService.showModalCustomer(result);
                                    });
                                }
                            }
                        ]
                    }
                    MainComponents.show(params);
                }
            }).catch(function(error) {
                FlowManagerService.changeCustomersView();
                    var params = {
                        title: 'Aviso',
                        mensagem: 'Houve um erro.'
                    }
                    MainComponents.alert(params);
            });
        }
        
        function goBack() {
            FlowManagerService.goBack();
            FoneclubeService.getCustomerByCPF(vm.cpf).then(function(result){
                ViewModelUtilsService.showModalCustomer(result);
            });
        }
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('PaymentDetailController', PaymentDetailController);

    PaymentDetailController.inject = ['ViewModelUtilsService', 'MainComponents', 'MainUtils'];
    function PaymentDetailController(ViewModelUtilsService, MainComponents, MainUtils) {
        var vm = this;
        vm.customer = ViewModelUtilsService.modalPaymentDetailCustomer;
        vm.history = ViewModelUtilsService.modalPaymentDetailHistory;

    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .service('FoneclubeService', FoneclubeService);

    FoneclubeService.inject = ['$q','HTTPService'];
    function FoneclubeService($q,HTTPService) {

        //var urlApi = 'http://localhost:58949/api';

        //API HOMOL TEMP
        var urlApi = 'http://homol-api.p2badpmtjj.us-east-2.elasticbeanstalk.com/api';

        //API QUE VAI SER PROD
        //var urlApi = 'http://default-environment.p2badpmtjj.us-east-2.elasticbeanstalk.com/api';

        this.postBasePerson = postBasePerson;
        this.postUpdatePerson = postUpdatePerson;
        this.postUpdatePersonAdress = postUpdatePersonAdress;
        this.postCheckout = postCheckout;
        this.postHistoryPayment = postHistoryPayment;
        this.postDeletePerson = postDeletePerson;
        this.postUpdateCustomer = postUpdateCustomer;
        this.postOrderServicePerson = postOrderServicePerson;
        this.getPlans = getPlans;
        this.getCustomerPlans = getCustomerPlans;
        this.getOperators = getOperators;
        this.getCustomers = getCustomers;
        this.getCustomerByCPF = getCustomerByCPF;
        this.getHistoryPayment = getHistoryPayment;
        this.getCustomerByPhoneNumber = getCustomerByPhoneNumber;
        this.getCustomerById = getCustomerById;
        
        function postUpdatePerson(personCheckout){
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/update'), personCheckout)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function postDeletePerson(personCheckout){
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/delete/customer'), personCheckout)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function postUpdatePersonAdress(personCheckout){
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/updateAdress'), personCheckout)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function postBasePerson(personCheckout){
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/insert'), personCheckout)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function postCheckout(personCheckout){
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/cadastro'), personCheckout)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function postHistoryPayment(personCharging){
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/charging/insert'), personCharging)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }
        
        function postUpdateCustomer(customer){
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/customer/update'), customer)
            .then(function(data){
                q.resolve(data);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }
        
        function postOrderServicePerson(param) {
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/service/order'), param)
            .then(function(data){
                q.resolve(data);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function getPlans(){
            var q = $q.defer();

            HTTPService.get(urlApi.concat('/account/plans'))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }
        
        function getCustomerPlans(register){
            var q = $q.defer();

            HTTPService.get(urlApi.concat('/profile/customer/plans?documentNumber=').concat(register.toString()))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function getOperators(){
            var q = $q.defer();

            HTTPService.get(urlApi.concat('/account/operators'))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }
        
        function getCustomerByCPF(param){

            var q = $q.defer();

            HTTPService.get(urlApi.concat('/profile/cliente?documentRegister='.concat(param)))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function getCustomers(){

            var q = $q.defer();

            HTTPService.get(urlApi.concat('/profile/customers'))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function getHistoryPayment(id){
            var q = $q.defer();

            HTTPService.get(urlApi.concat('/profile/charges?personID='.concat(id)))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }
        
        function getCustomerByPhoneNumber(param) {
            var q = $q.defer();

            HTTPService.get(urlApi.concat('/profile/phoneOwner'), param)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }
        
        function getCustomerById(id) {
            var q = $q.defer();

            HTTPService.get(urlApi.concat('/profile/cliente/id/'.concat(id)))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }



    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .service('HubDevService', HubDevService);

    HubDevService.inject = ['$q','HTTPService'];

    function HubDevService($q, HTTPService) {

        //teste
        var apiToken = '5ae973d7a997af13f0aaf2bf60e65803';

        //prod
        //var apiToken = '74817fbeb42c87d0a61f20684d3309e3';

        this.validaCPF = validaCPF;
        this.validaCEP = validaCEP;

        function validaCPF(cpf, datanascimento){

            var q = $q.defer();
            var packageNumber = cpf.length > 11 ? 4 : 1;            
            //packages
            //1 CPF Básico 2 CPF Avançado 4 CNPJ Básico 7 CPF Personalizado 8 CPF Personalizado 
            ///{token}/{package}/{type}/{value}
            HTTPService.get('https://api.cpfcnpj.com.br/'.concat(apiToken).concat('/').concat(packageNumber).concat('/').concat('json').concat('/').concat(cpf).concat('/'))           
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }


        function validaCEP(cep){

            var q = $q.defer();

            HTTPService.get('http://viacep.com.br/ws/'.concat(cep).concat('/json/'))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }


    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .service('PagarmeService', PagarmeService);

    PagarmeService.inject = ['$q','HTTPService'];

    function PagarmeService($q, HTTPService) {

        //live
        //var apiKey = 'ak_live_fP7ceLSpdBe8gCXGTywVRmC5VTkvN0'
        //var encriptionKey = 'ek_live_U52ijlxsDgB8mk0rzcJde7HYHzqWYl';

        //Testes
        var apiKey = 'ak_test_rIMnFMFbwNJR1A5RuTmSULl9xxDdoM';
        var encriptionKey = 'ek_test_5rLvyIU3tqMGHKAj94kpCuqSWT37Ps';

        this.getCards = getCards;
        this.getCustomers = getCustomers;
        this.getCustomer = getCustomer;
        this.getCard = getCard;
        this.getStatusBoleto = getStatusBoleto;

        this.postBoleto = postBoleto;
        this.postTransactionCard = postTransactionCard;
        this.postTransactionExistentCard = postTransactionExistentCard; //refact pra uma só func
        this.postCaptureTransaction = postCaptureTransaction;
        this.generateCardHash = generateCardHash;
        this.notifyCustomerBoleto = notifyCustomerBoleto;



        function getCards(){

            var q = $q.defer();

            HTTPService.get('https://api.pagar.me/1/cards?api_key='.concat(apiKey))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function getCustomers(){

            var q = $q.defer();
            console.log('getCustomers')
            HTTPService.get('https://api.pagar.me/1/customers/?count=10000&api_key='.concat(apiKey))
            .then(function(result){
                console.log(result)
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function getCustomer(documentNumber){

            var q = $q.defer();

            HTTPService.get('https://api.pagar.me/1/customers/?api_key='.concat(apiKey).concat('&document_number=').concat(documentNumber))
            .then(function(result){
                console.log(result)
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function getCard(customerId){
            var q = $q.defer();

            HTTPService.get('https://api.pagar.me/1/cards?api_key='.concat(apiKey).concat('&customer_id=').concat(customerId))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function postBoleto(amount, instructions, customer){
            var q = $q.defer();

            var parameters = {
                'api_key':apiKey,
                'encryption_key':encriptionKey,
                'amount': amount,
                'payment_method':'boleto',
                'data-customer-data':true,
                'customer':customer,
                'boleto_instructions': instructions
            };

            HTTPService.post('https://api.pagar.me/1/transactions', parameters)
            .then(function(result){
                console.log(result);
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

         function notifyCustomerBoleto(id, email){
            var q = $q.defer();

            var parameters = {
                'email': email
            };

            HTTPService.post('https://api.pagar.me/1/transactions/'.concat(id).concat('/collect_payment?api_key=').concat(apiKey), parameters)
            .then(function(result){
                console.log(result);
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function postTransactionCard(amount, cardHash, customer){
            var q = $q.defer();

            var parameters = {
                'api_key':apiKey,
                'encryption_key':encriptionKey,
                'amount': amount,
                'card_hash': cardHash,
                'data-customer-data':true,
                'customer':customer
            };

            console.log('--- Transação com prametros:')
            console.log(parameters)

            HTTPService.post('https://api.pagar.me/1/transactions', parameters)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });


            return q.promise;

        }

         function postTransactionExistentCard(amount, cardId, customer){
            var q = $q.defer();

            var parameters = {
                'api_key':apiKey,
                'encryption_key':encriptionKey,
                'amount': amount,
                'card_id': cardId,
                'customer':customer
            };

            console.log('--- Transação com prametros:')
            console.log(parameters)

            HTTPService.post('https://api.pagar.me/1/transactions', parameters)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });


            return q.promise;

        }

        function postCaptureTransaction(transactionId, amount){
            var q = $q.defer();

            var parameters = {
                api_key:apiKey,
                amount: amount
            };

            HTTPService.post('https://api.pagar.me/1/transactions/'.concat(transactionId).concat('/capture'), parameters)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function generateCardHash(cardData){

            var q = $q.defer();
            PagarMe.encryption_key = encriptionKey;
            var creditCard = new PagarMe.creditCard();
            creditCard.cardHolderName = cardData.cardHolderName;
            creditCard.cardExpirationMonth = cardData.cardExpirationMonth;
            creditCard.cardExpirationYear = cardData.cardExpirationYear;
            creditCard.cardNumber = cardData.cardNumber;
            creditCard.cardCVV = cardData.cardCVV;

            var fieldErrors = creditCard.fieldErrors();
            var hasErrors = false;

            for(var field in fieldErrors){
                hasErrors = true; break;
            }

            if(hasErrors){
                q.reject(fieldErrors);
            }
            else {
                creditCard.generateHash(function(cardHash) {
                    q.resolve(cardHash);
                });
            }

            return q.promise;
        }

        function getStatusBoleto(boletoId){
            var q = $q.defer();

            HTTPService.get('https://api.pagar.me/1/transactions?api_key='.concat(apiKey).concat('&id=').concat(boletoId))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }


    }
})();
(function () {

    'use strict';

    angular
        .module('foneClub')
        .factory('DataFactory', DataFactory);

    DataFactory.$inject = [];

    function DataFactory() {

        var data = {};

        return data;

    }

})();

(function() {

  'use strict';

  angular.module('foneClub')
    .service('FileListUtil', FileListUtil);

  function FileListUtil() {

    /* fields */
    this.data = undefined;

    this.set = set
    this.get = get

    function set(fileList){
        this.data = fileList;
    }

    function get(){
        return this.data;
    }

  }

})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .service('FireBaseManagerUtil', FireBaseManagerUtil);

    FireBaseManagerUtil.$inject = ['$firebaseArray'];
    function FireBaseManagerUtil($firebaseArray) {

        var ref = firebase.database().ref();
        var log = $firebaseArray(ref.child("log"));
        var users = $firebaseArray(ref.child("users"));

        this.initialize = initialize;
        this.addLog = addLog;
        this.addUser = addUser;
        this.getUsers = getUsers;

        function initialize(){

        }

        function addLog(value){
            log.$add({
             text: value
            });
        }

        // FireBaseManagerUtil.addUser({
        //     user:'Gustavo',
        //     password:'123gustavo'
        // });

        function addUser(user){
            users.$add(user);
        }

        function getUsers(){

            // var obj = $firebaseObject(ref);
            // obj.$loaded()
            // .then(function(data) {
            //     console.log(data === obj); // true
            // })
            // .catch(function(error) {
            //     console.error("Error:", error);
            // });

            return users;
        }

    }
})();
(function () {

  'use strict';

  angular.module('foneClub')
    .service('HTTPService', HTTPService);

  HTTPService.$inject = ['$http'];

  function HTTPService($http) {

    var vm = this;
    vm.get = get;
    vm.post = post;
    vm.getStatus = getStatus;

    function get(path, params) {

      return $http.get(path, {params: params})
        .then(complete)
        .catch(error);

      function complete(data) {
        return data.data;
      }

      function error(message) {
        throw message;
      }
    }

    function getStatus(path, params) {

      return $http.get(path, {params: params})
        .then(complete)
        .catch(error);

      function complete(data) {
        return data.status;
      }

      function error(message) {
        throw message;
      }
    }

    function post(path, params) {

      return $http.post(path, params)
        .then(complete)
        .catch(error);

      function complete(data, status, headers, config) {
        return data.data;
      }

      function error(message) {
        throw message;
      }
    }
  }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .service('LocationService', LocationService);

    LocationService.inject = ['$state'];
    function LocationService($state) {

        this.change = change;

        function change(value, dataParameters) {
            $state.go(value, {
                data: dataParameters
            });
        }
    }
})();
(function() {

  'use strict';

  angular.module('foneClub')
    .service('MainUtils', MainUtils);

  MainUtils.inject = ['$q', '$cordovaFile', '$ionicLoading', '$ionicPopup'];
  function MainUtils($q, $cordovaFile, $ionicLoading, $ionicPopup) {

    this.guid = guid;
    this.pathToDataURI = pathToDataURI;
    this.dataURIToBlob = dataURIToBlob;
    this.uploadFile = uploadFile;
    this.operatorOptions = operatorOptions;

    this.agent = undefined;
    this.setAgent = setAgent
    this.getAgent = getAgent

    function setAgent(value){
        this.agent = value;
    }

    function getAgent(){
        return this.agent;
    }

      function guid() {

        function s4() {
          return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
        }

        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
          s4() + '-' + s4() + s4() + s4();
      }

      function dataURIToBlob(dataURI) {
            // convert base64/URLEncoded data component to raw binary data held in a string
            var byteString;
            if (dataURI.split(',')[0].indexOf('base64') >= 0)
                byteString = atob(dataURI.split(',')[1]);
            else
                byteString = unescape(dataURI.split(',')[1]);

            // separate out the mime component
            var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

            // write the bytes of the string to a typed array
            var ia = new Uint8Array(byteString.length);
            for (var i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }

            return new Blob([ia], {type:mimeString});
        }

        function pathToDataURI(url, callback) {
            var xhr = new XMLHttpRequest();
            var headers = {
              'Access-Control-Allow-Origin' : '*',
              'Access-Control-Allow-Methods' : 'POST, GET, OPTIONS, PUT',
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            };
            xhr.onload = function() {
                var reader = new FileReader();
                reader.onloadend = function() {
                callback(reader.result);
                }
                reader.readAsDataURL(xhr.response);
            };
            xhr.open('GET', url);
            xhr.headers = headers;
            xhr.responseType = 'blob';
            xhr.send();
        }

        function uploadFile(file){

            var q = $q.defer();

            var imageUploader = new ImageUploader();
            imageUploader.push(file)
            .then((data) => {
                //console.debug('Upload complete. Data:', data);
                q.resolve(data);
            })
            .catch((err) => {
                console.error(err);
                q.reject(err);
            });

            return q.promise;
        }

        function operatorOptions(){

            return [
                {'nome':'Claro', 'id':1},
                {'nome':'Vivo', 'id':2},
                {'nome':'Oi', 'id':3},
                {'nome':'Tim', 'id':4},
                {'nome':'Vivo', 'id':5},
                {'nome':'Outra', 'id':6},
            ];
        }

  }

})();
(function() {

    'use strict';

    angular.module('foneClub').service('UtilsService', UtilsService);

    UtilsService.inject = [];

    function UtilsService() {
        return {
            clearDocumentNumber: _clearDocumentNumber
        }
        
        function _clearDocumentNumber(documentNumber){
            return documentNumber.replace(/[-.]/g, '');
        }

    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .service('ViewModelUtilsService', ViewModelUtilsService);

    ViewModelUtilsService.inject = ['$ionicModal'];
    function ViewModelUtilsService($ionicModal) {


        //todo colocar cria~ção na hora do show garantindo sempre limpeza ao abrir
        this.modalCustomerData = {};
        this.showModalCustomer = showModalCustomer;

        this.modalNewCardPaymentData = {};
        this.showModalNewCardPayment = showModalNewCardPayment;

        this.modalExistentCardPaymentData = {};
        this.modalExistentCardData = {};
        this.showModalExistentCardPayment = showModalExistentCardPayment;
        this.showModalPaymentHistoryDetail = showModalPaymentHistoryDetail;

        this.modalData = {};
        this.showModal = showModal;

        this.modalBoletoData = {};
        this.showModalBoleto = showModalBoleto;

        function showModal(data){

            this.modalData = data;
            var service = this;

            $ionicModal.fromTemplateUrl('modules/lista-customer/checkout-customer-modal.html', {
                scope: null
            }).then(function(modal) {
                service.modal = modal;
                service.modal.show();
            });
        }

        function showModalCustomer(data){
            this.modalCustomerData = data;
            var service = this;

            $ionicModal.fromTemplateUrl('modules/customers/customers-modal/customer-modal.html', {
                scope: null
            }).then(function(modal) {
                service.modalCustomer = modal;
                service.modalCustomer.show();
            });
        }

        function showModalNewCardPayment(data){
            this.modalNewCardPaymentData = data;
            var service = this;

            $ionicModal.fromTemplateUrl('modules/customers/new-card/new-card-payment.html', {
                scope: null
            }).then(function(modal) {
                service.modalNewCardPayment = modal;
                service.modalNewCardPayment.show();
            });
        }

        function showModalExistentCardPayment(data,card){
            this.modalExistentCardPaymentData = data;
            this.modalExistentCardData = card;
            var service = this;

            $ionicModal.fromTemplateUrl('modules/customers/existent-card/existent-card.html', {
                scope: null
            }).then(function(modal) {
                service.modalExistentCardPayment = modal;
                service.modalExistentCardPayment.show();
            });
        }

       function showModalBoleto(data){
            this.modalBoletoData = data;           
            var service = this;

            $ionicModal.fromTemplateUrl('modules/customers/boleto/boleto.html', {
                scope: null
            }).then(function(modal) {
                service.modalBoleto = modal;
                service.modalBoleto.show();
            });
        }
        
        function showModalPaymentHistoryDetail(history, customer) {
            this.modalPaymentDetailHistory = history;
            this.modalPaymentDetailCustomer = customer;
            var service = this;

            $ionicModal.fromTemplateUrl('modules/customers/payment-detail/paymentdetail.html', {
                scope: null
            }).then(function(modal) {
                service.modalPaymentDetail = modal;
                service.modalPaymentDetail.show();
            });
        }

    }
})();
(function () {
    
        'use strict';
    
        angular
            .module('foneClub')
            .factory('DialogFactory', DialogFactory);
    
        DialogFactory.$inject = ['ngDialog', '$q'];
    
        function DialogFactory(ngDialog, $q) {

            function _dialogConfirm(param) {                
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    titulo = 'Confirmação';
                }
                ngDialog.openConfirm({
                    template:'<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.mensagem +'</div>' +
                    '<div class="footer">' +
                    '<button type="button" class="btnCancelar" ng-click="closeThisDialog(0)"> Cancelar </button>' +
                    '<button type="button" class="btnConfirmar" ng-click="confirm(1)"> Ok </button></div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                }).then(function(param) {
                    defer.resolve(param);
                }, function(param) {
                    defer.resolve(param);
                })
                return defer.promise;
            }

            function _showMessageDialog(param) {
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    param.titulo = 'Aviso';
                }
                ngDialog.open({
                    template: '<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.mensagem +'</div>' +
                    '<div class="footer">' +
                    '<button type="button" class="btnOk" ng-click="confirm(1)">Ok' +
                    '</button></div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                })
                return defer.promise;
            }

            function _showLoader(mensagem) {                               
                return ngDialog.open({
                    template: '<div class="mensagens-dialog"><div class="show-loader">'+                    
                    '<span>'+ mensagem +'</span></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                })                
            }

            function _showMessageConfirm(param) {
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    param.titulo = 'Aviso';
                }
                ngDialog.openConfirm({
                    template:'<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.mensagem +'</div>' +
                    '<div class="footer">' +                    
                    '<button type="button" class="btnOk" ng-click="confirm(1)"> Ok </button></div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                }).then(function(param) {
                    defer.resolve(param);
                }, function(param) {
                    defer.resolve(param);
                })
                return defer.promise;
            }

            return {
                dialogConfirm: _dialogConfirm,
                showMessageDialog: _showMessageDialog,
                showMessageConfirm: _showMessageConfirm,
                showLoader: _showLoader
            }
    
        }
    
    })();
    

angular
.module('foneClub')
.directive('moneyInput', function($filter, $browser, $timeout) {
    return {
        require: 'ngModel',
        link: function($scope, $element, $attrs, ngModelCtrl) {
            var listener = function() {

                console.log($element.val());
                var value = $element.val().replace(/[^0-9]/g, '');
                $element.val($filter('currency')(value/100, "R$", 2));

            };


            // This runs when we update the text field
            ngModelCtrl.$parsers.push(function(viewValue) {
                return viewValue.replace(/[^0-9]/g, '')
            });

            // This runs when the model gets updated on the scope directly and keeps our view in sync
            ngModelCtrl.$render = function() {
                $element.val(ngModelCtrl.$viewValue);
            };

            $element.bind('change', listener);
            $element.bind('keydown', function(event) {
                $browser.defer(listener); // Have to do this or changes don't get picked up properly
            });
            $timeout(function(){
                $element.val($filter('currency')($element.val().replace(/[^0-9]/g, '')/100, "R$", 2));    
                $browser.defer(listener)
            },500);
            
        }

    };
});
angular.module('foneClub').directive('ngEnter', function () {
    return function (scope, element, attrs) {
        angular.element(document).find('body').bind("keydown", function (event) {
            if(event.which === 13) {
                scope.$apply(function (){
                    scope.$eval(attrs.ngEnter);
                });
 
                event.preventDefault();
            }
        });
    };
});
(function() {
'use strict';

    angular
        .module('foneClub')
        .directive('file', ['FileListUtil', function(FileListUtil) {
            return {
                restrict: 'AE',
                scope: {
                file: '@'
                },
                link: function(scope, el, attrs){

                    el.on('change', function(event){
                        var files = event.target.files;
                        var file = files[0];
                        if(file && typeof(file) !== undefined && file.size > 0){
                            scope.file = file;
                            scope.$parent.file = file;
                            FileListUtil.set(file);
                            event.currentTarget.value = "";
                        }
                        else {
                            scope.file = {};
                            scope.$parent.file = {};
                            FileListUtil.set(file);
                            event.currentTarget.value = "";
                        }
                        scope.$apply(); 
                    });


                }
            };
        }])


})();
(function () {

  'use strict';

  angular
    .module('foneClub')
    .service('MainComponents', MainComponents);

  MainComponents.$inject = ['$q', '$sce', '$ionicPopup', '$timeout', '$ionicLoading', '$cordovaNetwork', '$ionicBackdrop', '$ionicBody'];

  function MainComponents($q, $sce, $ionicPopup, $timeout, $ionicLoading, $cordovaNetwork, $ionicBackdrop, $ionicBody) {

    /* fields */
    var vm = this;
    vm.alert = alert;
    vm.show = show;
    vm.showSimpleToast = showSimpleToast;
    vm.infoAlert = infoAlert;
    vm.showLoader = showLoader;
    vm.hideLoader = hideLoader;

    function alert(params){

      if(!params.titulo)
        params.titulo = 'Aviso';

      closeAllPopups();

      var infoParams = {
        template: params.mensagem,
        title: params.titulo
      };

      return $ionicPopup.alert(infoParams).then(function (answer) {
        return answer;
      });

    }
      
    function show(params){
      closeAllPopups();
      return $ionicPopup.show(params);
    }

    function showLoader(mensagem){
      $ionicLoading.show({
                template: mensagem
      });
    }

    function hideLoader(){
      $ionicLoading.hide();
    }

    function infoAlert(params) {

      closeAllPopups();

      var infoParams = {
        template: params.mensagem,
        title: 'Info',
        cancelText: 'Cancelar'
      };

      return $ionicPopup.confirm(infoParams).then(function (answer) {
        return answer;
      });
    }

    function showLoading() {
      $ionicLoading.show({
        template: '<ion-spinner icon="bubbles" class="spinner-calm"></ion-spinner>'
      });
    }

    function hideLoading() {
      $ionicLoading.hide();
    }

    function isOnline() {
      if (window.cordova && window.cordova.plugins && navigator && navigator.connection && navigator.connection.type) {
          return (window.cordova && $cordovaNetwork.isOnline()) || (navigator.onLine);
      }else{
          return navigator.onLine;
      }
    }

    function showSimpleToast(toastMsg, title) {
      return $ionicPopup.alert({
        template: toastMsg,
        title: title
      });
    }

    function showConfirm(params) {

      var infoParams = {
        template: params.message || 'Mensagem',
        title: params.title || 'Título',
        cancelText: params.cancelText || 'Cancelar',
        okText: params.okText || 'Confirmar',
        okType: 'button-assertive'
      };

      return $ionicPopup.confirm(infoParams);
    }



    function _noConnectionMessage() {
      return showSimpleToast("Sem conexão com internet", "AVISO");
    }

    function closeAllPopups() {
        var noop = angular.noop;
        var elevated = false;
        var popupStack = $ionicPopup._popupStack;
        if (popupStack.length > 0) {
          popupStack.forEach(function(popup, index) {
            if (popup.isShown === true) {
              popup.remove();
              popupStack.pop();
            }
          });
        }

        $ionicBackdrop.release();
        //Remove popup-open & backdrop if this is last popup
        $timeout(function() {
          // wait to remove this due to a 300ms delay native
          // click which would trigging whatever was underneath this
          $ionicBody.removeClass('popup-open');
          // $ionicPopup._popupStack.pop();
        }, 400, false);
        ($ionicPopup._backButtonActionDone || noop)();
    }

  }
})();

